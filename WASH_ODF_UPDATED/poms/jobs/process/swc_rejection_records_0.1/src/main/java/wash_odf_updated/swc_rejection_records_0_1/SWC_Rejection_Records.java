// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package wash_odf_updated.swc_rejection_records_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.ReportingHelper;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: SWC_Rejection_Records Purpose: SWC_Rejection_Records<br>
 * Description: SWC_Rejection_Records <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class SWC_Rejection_Records implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(motech_db_Port != null){
				
					this.setProperty("motech_db_Port", motech_db_Port.toString());
				
			}
			
			if(motech_db_Database != null){
				
					this.setProperty("motech_db_Database", motech_db_Database.toString());
				
			}
			
			if(motech_db_Password != null){
				
					this.setProperty("motech_db_Password", motech_db_Password.toString());
				
			}
			
			if(motech_db_Login != null){
				
					this.setProperty("motech_db_Login", motech_db_Login.toString());
				
			}
			
			if(motech_db_Server != null){
				
					this.setProperty("motech_db_Server", motech_db_Server.toString());
				
			}
			
			if(motech_db_AdditionalParams != null){
				
					this.setProperty("motech_db_AdditionalParams", motech_db_AdditionalParams.toString());
				
			}
			
			if(reporting_db_Port != null){
				
					this.setProperty("reporting_db_Port", reporting_db_Port.toString());
				
			}
			
			if(reporting_db_Database != null){
				
					this.setProperty("reporting_db_Database", reporting_db_Database.toString());
				
			}
			
			if(reporting_db_Password != null){
				
					this.setProperty("reporting_db_Password", reporting_db_Password.toString());
				
			}
			
			if(reporting_db_Server != null){
				
					this.setProperty("reporting_db_Server", reporting_db_Server.toString());
				
			}
			
			if(reporting_db_Login != null){
				
					this.setProperty("reporting_db_Login", reporting_db_Login.toString());
				
			}
			
			if(reporting_db_AdditionalParams != null){
				
					this.setProperty("reporting_db_AdditionalParams", reporting_db_AdditionalParams.toString());
				
			}
			
		}

public String motech_db_Port;
public String getMotech_db_Port(){
	return this.motech_db_Port;
}
public String motech_db_Database;
public String getMotech_db_Database(){
	return this.motech_db_Database;
}
public java.lang.String motech_db_Password;
public java.lang.String getMotech_db_Password(){
	return this.motech_db_Password;
}
public String motech_db_Login;
public String getMotech_db_Login(){
	return this.motech_db_Login;
}
public String motech_db_Server;
public String getMotech_db_Server(){
	return this.motech_db_Server;
}
public String motech_db_AdditionalParams;
public String getMotech_db_AdditionalParams(){
	return this.motech_db_AdditionalParams;
}
public String reporting_db_Port;
public String getReporting_db_Port(){
	return this.reporting_db_Port;
}
public String reporting_db_Database;
public String getReporting_db_Database(){
	return this.reporting_db_Database;
}
public java.lang.String reporting_db_Password;
public java.lang.String getReporting_db_Password(){
	return this.reporting_db_Password;
}
public String reporting_db_Server;
public String getReporting_db_Server(){
	return this.reporting_db_Server;
}
public String reporting_db_Login;
public String getReporting_db_Login(){
	return this.reporting_db_Login;
}
public String reporting_db_AdditionalParams;
public String getReporting_db_AdditionalParams(){
	return this.reporting_db_AdditionalParams;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SWC_Rejection_Records";
	private final String projectName = "WASH_ODF_UPDATED";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SWC_Rejection_Records.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SWC_Rejection_Records.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row1.key != null){
                          tmp_key_tContextLoad_1 = row1.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row1.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row1.key != null) {
                    key_tContextLoad_1 =
                        row1.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row1.value != null) {
                    value_tContextLoad_1 =
                        row1.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ((key_tContextLoad_1 != null) && ("motech_db_Password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ((key_tContextLoad_1 != null) && ("reporting_db_Password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "motech_db_Port".equals(key_tContextLoad_1))
        {
           context.motech_db_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Database".equals(key_tContextLoad_1))
        {
           context.motech_db_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Password".equals(key_tContextLoad_1))
        {
           context.motech_db_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Login".equals(key_tContextLoad_1))
        {
           context.motech_db_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Server".equals(key_tContextLoad_1))
        {
           context.motech_db_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.motech_db_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Port".equals(key_tContextLoad_1))
        {
           context.reporting_db_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Database".equals(key_tContextLoad_1))
        {
           context.reporting_db_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Password".equals(key_tContextLoad_1))
        {
           context.reporting_db_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Server".equals(key_tContextLoad_1))
        {
           context.reporting_db_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Login".equals(key_tContextLoad_1))
        {
           context.reporting_db_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.reporting_db_AdditionalParams=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("motech_db_Password");
		
		parametersToEncrypt_tContextLoad_1.add("reporting_db_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMysqlInput_2Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tMysqlInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public String last_etl_time;

				public String getLast_etl_time () {
					return this.last_etl_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
					this.last_etl_time = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.last_etl_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("last_etl_time="+last_etl_time);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_2 = java.lang.Class.forName(driverClass_tMysqlInput_2);
					String dbUser_tMysqlInput_2 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[g6xWslElFyiNXdrf7KBHQl2fE9PS0lYEfDKceAgMglJ2vFx3]");
					
					String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=9";
			

            	globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);
		    java.sql.ResultSet rs_tMysqlInput_2 = null;

		    try {
		    	rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    	int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								row2.last_etl_time = null;
							} else {
	                         		
        	row2.last_etl_time = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */
	
	/**
	 * [tMysqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

    //Code generated according to input schema and output schema

globalMap.put("lastEtlTime",row2.last_etl_time!=null ?row2.last_etl_time:"");
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if (rs_tMysqlInput_2 != null) {
		rs_tMysqlInput_2.close();
	}
	if (stmt_tMysqlInput_2 != null) {
		stmt_tMysqlInput_2.close();
	}
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class Flw_RejectionsStruct implements routines.system.IPersistableRow<Flw_RejectionsStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public Long state_id;

				public Long getState_id () {
					return this.state_id;
				}
				
			    public Long district_id;

				public Long getDistrict_id () {
					return this.district_id;
				}
				
			    public String district_name;

				public String getDistrict_name () {
					return this.district_name;
				}
				
			    public String panchayat_id;

				public String getPanchayat_id () {
					return this.panchayat_id;
				}
				
			    public String panchayat_name;

				public String getPanchayat_name () {
					return this.panchayat_name;
				}
				
			    public Long block_id;

				public Long getBlock_id () {
					return this.block_id;
				}
				
			    public String block_name;

				public String getBlock_name () {
					return this.block_name;
				}
				
			    public Long swc_id;

				public Long getSwc_id () {
					return this.swc_id;
				}
				
			    public String mobile_number;

				public String getMobile_number () {
					return this.mobile_number;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public Boolean accepted;

				public Boolean getAccepted () {
					return this.accepted;
				}
				
			    public String rejection_reason;

				public String getRejection_reason () {
					return this.rejection_reason;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public java.util.Date modification_date;

				public java.util.Date getModification_date () {
					return this.modification_date;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String job_status;

				public String getJob_status () {
					return this.job_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Flw_RejectionsStruct other = (Flw_RejectionsStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(Flw_RejectionsStruct other) {

		other.id = this.id;
	            other.state_id = this.state_id;
	            other.district_id = this.district_id;
	            other.district_name = this.district_name;
	            other.panchayat_id = this.panchayat_id;
	            other.panchayat_name = this.panchayat_name;
	            other.block_id = this.block_id;
	            other.block_name = this.block_name;
	            other.swc_id = this.swc_id;
	            other.mobile_number = this.mobile_number;
	            other.gender = this.gender;
	            other.accepted = this.accepted;
	            other.rejection_reason = this.rejection_reason;
	            other.creation_date = this.creation_date;
	            other.modification_date = this.modification_date;
	            other.name = this.name;
	            other.job_status = this.job_status;
	            
	}

	public void copyKeysDataTo(Flw_RejectionsStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.state_id = null;
           				} else {
           			    	this.state_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.district_id = null;
           				} else {
           			    	this.district_id = dis.readLong();
           				}
					
					this.district_name = readString(dis);
					
					this.panchayat_id = readString(dis);
					
					this.panchayat_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.block_id = null;
           				} else {
           			    	this.block_id = dis.readLong();
           				}
					
					this.block_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.swc_id = null;
           				} else {
           			    	this.swc_id = dis.readLong();
           				}
					
					this.mobile_number = readString(dis);
					
					this.gender = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.accepted = null;
           				} else {
           			    	this.accepted = dis.readBoolean();
           				}
					
					this.rejection_reason = readString(dis);
					
					this.creation_date = readDate(dis);
					
					this.modification_date = readDate(dis);
					
					this.name = readString(dis);
					
					this.job_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// Long
				
						if(this.state_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.state_id);
		            	}
					
					// Long
				
						if(this.district_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.district_id);
		            	}
					
					// String
				
						writeString(this.district_name,dos);
					
					// String
				
						writeString(this.panchayat_id,dos);
					
					// String
				
						writeString(this.panchayat_name,dos);
					
					// Long
				
						if(this.block_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.block_id);
		            	}
					
					// String
				
						writeString(this.block_name,dos);
					
					// Long
				
						if(this.swc_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.swc_id);
		            	}
					
					// String
				
						writeString(this.mobile_number,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// Boolean
				
						if(this.accepted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.accepted);
		            	}
					
					// String
				
						writeString(this.rejection_reason,dos);
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// java.util.Date
				
						writeDate(this.modification_date,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.job_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",district_name="+district_name);
		sb.append(",panchayat_id="+panchayat_id);
		sb.append(",panchayat_name="+panchayat_name);
		sb.append(",block_id="+String.valueOf(block_id));
		sb.append(",block_name="+block_name);
		sb.append(",swc_id="+String.valueOf(swc_id));
		sb.append(",mobile_number="+mobile_number);
		sb.append(",gender="+gender);
		sb.append(",accepted="+String.valueOf(accepted));
		sb.append(",rejection_reason="+rejection_reason);
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",modification_date="+String.valueOf(modification_date));
		sb.append(",name="+name);
		sb.append(",job_status="+job_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Flw_RejectionsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public Boolean accepted;

				public Boolean getAccepted () {
					return this.accepted;
				}
				
			    public java.util.Date creationDate;

				public java.util.Date getCreationDate () {
					return this.creationDate;
				}
				
			    public Long districtId;

				public Long getDistrictId () {
					return this.districtId;
				}
				
			    public String districtName;

				public String getDistrictName () {
					return this.districtName;
				}
				
			    public Long swcID;

				public Long getSwcID () {
					return this.swcID;
				}
				
			    public Long blockId;

				public Long getBlockId () {
					return this.blockId;
				}
				
			    public String blockName;

				public String getBlockName () {
					return this.blockName;
				}
				
			    public java.util.Date modificationDate;

				public java.util.Date getModificationDate () {
					return this.modificationDate;
				}
				
			    public String msisdn;

				public String getMsisdn () {
					return this.msisdn;
				}
				
			    public String rejectionReason;

				public String getRejectionReason () {
					return this.rejectionReason;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public Long stateId;

				public Long getStateId () {
					return this.stateId;
				}
				
			    public String panchayatId;

				public String getPanchayatId () {
					return this.panchayatId;
				}
				
			    public String panchayatName;

				public String getPanchayatName () {
					return this.panchayatName;
				}
				
			    public String swcName;

				public String getSwcName () {
					return this.swcName;
				}
				
			    public String swcStatus;

				public String getSwcStatus () {
					return this.swcStatus;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.accepted = null;
           				} else {
           			    	this.accepted = dis.readBoolean();
           				}
					
					this.creationDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.districtId = null;
           				} else {
           			    	this.districtId = dis.readLong();
           				}
					
					this.districtName = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.swcID = null;
           				} else {
           			    	this.swcID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.blockId = null;
           				} else {
           			    	this.blockId = dis.readLong();
           				}
					
					this.blockName = readString(dis);
					
					this.modificationDate = readDate(dis);
					
					this.msisdn = readString(dis);
					
					this.rejectionReason = readString(dis);
					
					this.sex = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.stateId = null;
           				} else {
           			    	this.stateId = dis.readLong();
           				}
					
					this.panchayatId = readString(dis);
					
					this.panchayatName = readString(dis);
					
					this.swcName = readString(dis);
					
					this.swcStatus = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// Boolean
				
						if(this.accepted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.accepted);
		            	}
					
					// java.util.Date
				
						writeDate(this.creationDate,dos);
					
					// Long
				
						if(this.districtId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.districtId);
		            	}
					
					// String
				
						writeString(this.districtName,dos);
					
					// Long
				
						if(this.swcID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.swcID);
		            	}
					
					// Long
				
						if(this.blockId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.blockId);
		            	}
					
					// String
				
						writeString(this.blockName,dos);
					
					// java.util.Date
				
						writeDate(this.modificationDate,dos);
					
					// String
				
						writeString(this.msisdn,dos);
					
					// String
				
						writeString(this.rejectionReason,dos);
					
					// String
				
						writeString(this.sex,dos);
					
					// Long
				
						if(this.stateId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.stateId);
		            	}
					
					// String
				
						writeString(this.panchayatId,dos);
					
					// String
				
						writeString(this.panchayatName,dos);
					
					// String
				
						writeString(this.swcName,dos);
					
					// String
				
						writeString(this.swcStatus,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",accepted="+String.valueOf(accepted));
		sb.append(",creationDate="+String.valueOf(creationDate));
		sb.append(",districtId="+String.valueOf(districtId));
		sb.append(",districtName="+districtName);
		sb.append(",swcID="+String.valueOf(swcID));
		sb.append(",blockId="+String.valueOf(blockId));
		sb.append(",blockName="+blockName);
		sb.append(",modificationDate="+String.valueOf(modificationDate));
		sb.append(",msisdn="+msisdn);
		sb.append(",rejectionReason="+rejectionReason);
		sb.append(",sex="+sex);
		sb.append(",stateId="+String.valueOf(stateId));
		sb.append(",panchayatId="+panchayatId);
		sb.append(",panchayatName="+panchayatName);
		sb.append(",swcName="+swcName);
		sb.append(",swcStatus="+swcStatus);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
Flw_RejectionsStruct Flw_Rejections = new Flw_RejectionsStruct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Flw_Rejections");
					}
				
		int tos_count_tMysqlOutput_1 = 0;
		





        int updateKeyCount_tMysqlOutput_1 = 1;
        if(updateKeyCount_tMysqlOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_1 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[bFihUilXgRmVgCee2FB20iknOxJyM80AxAbpsjTcRqAGk53F]");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
	    String update_tMysqlOutput_1 = "UPDATE `" + "swc_import_rejection" + "` SET `state_id` = ?,`district_id` = ?,`district_name` = ?,`panchayat_id` = ?,`panchayat_name` = ?,`block_id` = ?,`block_name` = ?,`swc_id` = ?,`mobile_number` = ?,`gender` = ?,`accepted` = ?,`rejection_reason` = ?,`creation_date` = ?,`modification_date` = ?,`name` = ?,`job_status` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(update_tMysqlOutput_1);
	    resourceMap.put("pstmtUpdate_tMysqlOutput_1", pstmtUpdate_tMysqlOutput_1);
	    String insert_tMysqlOutput_1 = "INSERT INTO `" + "swc_import_rejection" + "` (`id`,`state_id`,`district_id`,`district_name`,`panchayat_id`,`panchayat_name`,`block_id`,`block_name`,`swc_id`,`mobile_number`,`gender`,`accepted`,`rejection_reason`,`creation_date`,`modification_date`,`name`,`job_status`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	         
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);
	    resourceMap.put("pstmtInsert_tMysqlOutput_1", pstmtInsert_tMysqlOutput_1);
	    

 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Flw_RejectionsStruct Flw_Rejections_tmp = new Flw_RejectionsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_1 = java.lang.Class.forName(driverClass_tMysqlInput_1);
					String dbUser_tMysqlInput_1 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[o4p2ibK+V2MzEWXLVQnlZVy/BftLKOzM+pXcUGgUSIYA+4vR]");
					
					String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services" + "?" + context.motech_db_AdditionalParams;
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "select r.id,r.accepted,r.creationDate,dd.district_id,r.districtName,r.swcID,\ndb.block_id,r.blockName,r.modificationDate"
+",r.msisdn,r.rejectionReason,r.sex,\nds.id,dp.id,r.panchayatName,r.swcName,r.swcStatus\n from wash_swachgrahi_rejects r \nle"
+"ft join WAReporting.dim_district dd on dd.code = r.districtId\nleft join WAReporting.dim_block db on db.code = r.blockId\n"
+"left join WAReporting.dim_panchayat dp on dp.code = r.panchayatId\nleft joiN WAReporting.dim_state ds on ds.code = r.stat"
+"eId\nwhere r.modificationDate>'"+(String)globalMap.get("lastEtlTime")+"'\nORDER BY r.modificationDate ASC";
			

            	globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);
		    java.sql.ResultSet rs_tMysqlInput_1 = null;

		    try {
		    	rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    	int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row3.id = 0;
							} else {
		                          
            row3.id = rs_tMysqlInput_1.getLong(1);
            if(rs_tMysqlInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row3.accepted = null;
							} else {
	                         		
            row3.accepted = rs_tMysqlInput_1.getBoolean(2);
            if(rs_tMysqlInput_1.wasNull()){
                    row3.accepted = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row3.creationDate = null;
							} else {
										
				if(rs_tMysqlInput_1.getString(3) != null) {
					String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(3);
					if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
						row3.creationDate = rs_tMysqlInput_1.getTimestamp(3);
					} else {
						row3.creationDate = (java.util.Date) year0_tMysqlInput_1.clone();
					}
				} else {
					row3.creationDate =  null;
				}
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row3.districtId = null;
							} else {
		                          
            row3.districtId = rs_tMysqlInput_1.getLong(4);
            if(rs_tMysqlInput_1.wasNull()){
                    row3.districtId = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row3.districtName = null;
							} else {
	                         		
        	row3.districtName = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row3.swcID = null;
							} else {
		                          
            row3.swcID = rs_tMysqlInput_1.getLong(6);
            if(rs_tMysqlInput_1.wasNull()){
                    row3.swcID = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row3.blockId = null;
							} else {
		                          
            row3.blockId = rs_tMysqlInput_1.getLong(7);
            if(rs_tMysqlInput_1.wasNull()){
                    row3.blockId = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row3.blockName = null;
							} else {
	                         		
        	row3.blockName = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row3.modificationDate = null;
							} else {
										
				if(rs_tMysqlInput_1.getString(9) != null) {
					String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(9);
					if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
						row3.modificationDate = rs_tMysqlInput_1.getTimestamp(9);
					} else {
						row3.modificationDate = (java.util.Date) year0_tMysqlInput_1.clone();
					}
				} else {
					row3.modificationDate =  null;
				}
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row3.msisdn = null;
							} else {
	                         		
        	row3.msisdn = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 11) {
								row3.rejectionReason = null;
							} else {
	                         		
        	row3.rejectionReason = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 12) {
								row3.sex = null;
							} else {
	                         		
        	row3.sex = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 12, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 13) {
								row3.stateId = null;
							} else {
		                          
            row3.stateId = rs_tMysqlInput_1.getLong(13);
            if(rs_tMysqlInput_1.wasNull()){
                    row3.stateId = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 14) {
								row3.panchayatId = null;
							} else {
	                         		
        	row3.panchayatId = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 14, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 15) {
								row3.panchayatName = null;
							} else {
	                         		
        	row3.panchayatName = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 15, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 16) {
								row3.swcName = null;
							} else {
	                         		
        	row3.swcName = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 16, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 17) {
								row3.swcStatus = null;
							} else {
	                         		
        	row3.swcStatus = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 17, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */
	
	/**
	 * [tMysqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Flw_Rejections = null;


// # Output table : 'Flw_Rejections'
Flw_Rejections_tmp.id = row3.id ;
Flw_Rejections_tmp.state_id = row3.stateId ;
Flw_Rejections_tmp.district_id = row3.districtId ;
Flw_Rejections_tmp.district_name = row3.districtName ;
Flw_Rejections_tmp.panchayat_id = row3.panchayatId ;
Flw_Rejections_tmp.panchayat_name = row3.panchayatName ;
Flw_Rejections_tmp.block_id = row3.blockId ;
Flw_Rejections_tmp.block_name = row3.blockName ;
Flw_Rejections_tmp.swc_id = row3.swcID ;
Flw_Rejections_tmp.mobile_number = row3.msisdn ;
Flw_Rejections_tmp.gender = row3.sex ;
Flw_Rejections_tmp.accepted = row3.accepted ;
Flw_Rejections_tmp.rejection_reason = row3.rejectionReason ;
Flw_Rejections_tmp.creation_date = row3.creationDate ;
Flw_Rejections_tmp.modification_date = row3.modificationDate ;
Flw_Rejections_tmp.name = row3.swcName ;
Flw_Rejections_tmp.job_status = row3.swcStatus ;
Flw_Rejections = Flw_Rejections_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Flw_Rejections"
if(Flw_Rejections != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Flw_Rejections");
					}
					



        whetherReject_tMysqlOutput_1 = false;
            int updateFlag_tMysqlOutput_1=0;
                    if(Flw_Rejections.state_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(1, Flw_Rejections.state_id);
}

                    if(Flw_Rejections.district_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(2, Flw_Rejections.district_id);
}

                    if(Flw_Rejections.district_name == null) {
pstmtUpdate_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(3, Flw_Rejections.district_name);
}

                    if(Flw_Rejections.panchayat_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(4, Flw_Rejections.panchayat_id);
}

                    if(Flw_Rejections.panchayat_name == null) {
pstmtUpdate_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(5, Flw_Rejections.panchayat_name);
}

                    if(Flw_Rejections.block_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(6, Flw_Rejections.block_id);
}

                    if(Flw_Rejections.block_name == null) {
pstmtUpdate_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(7, Flw_Rejections.block_name);
}

                    if(Flw_Rejections.swc_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(8, Flw_Rejections.swc_id);
}

                    if(Flw_Rejections.mobile_number == null) {
pstmtUpdate_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(9, Flw_Rejections.mobile_number);
}

                    if(Flw_Rejections.gender == null) {
pstmtUpdate_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(10, Flw_Rejections.gender);
}

                    if(Flw_Rejections.accepted == null) {
pstmtUpdate_tMysqlOutput_1.setNull(11, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tMysqlOutput_1.setBoolean(11, Flw_Rejections.accepted);
}

                    if(Flw_Rejections.rejection_reason == null) {
pstmtUpdate_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(12, Flw_Rejections.rejection_reason);
}

                    if(Flw_Rejections.creation_date != null) {
date_tMysqlOutput_1 = Flw_Rejections.creation_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmtUpdate_tMysqlOutput_1.setString(13, "0000-00-00 00:00:00");
} else {pstmtUpdate_tMysqlOutput_1.setTimestamp(13, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmtUpdate_tMysqlOutput_1.setNull(13, java.sql.Types.DATE);
}

                    if(Flw_Rejections.modification_date != null) {
date_tMysqlOutput_1 = Flw_Rejections.modification_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmtUpdate_tMysqlOutput_1.setString(14, "0000-00-00 00:00:00");
} else {pstmtUpdate_tMysqlOutput_1.setTimestamp(14, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmtUpdate_tMysqlOutput_1.setNull(14, java.sql.Types.DATE);
}

                    if(Flw_Rejections.name == null) {
pstmtUpdate_tMysqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(15, Flw_Rejections.name);
}

                    if(Flw_Rejections.job_status == null) {
pstmtUpdate_tMysqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(16, Flw_Rejections.job_status);
}


                    pstmtUpdate_tMysqlOutput_1.setLong(17 + count_tMysqlOutput_1, Flw_Rejections.id);


            try {
                updateFlag_tMysqlOutput_1=pstmtUpdate_tMysqlOutput_1.executeUpdate();
                updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1+updateFlag_tMysqlOutput_1;

            if(updateFlag_tMysqlOutput_1 == 0) {

                        pstmtInsert_tMysqlOutput_1.setLong(1, Flw_Rejections.id);

                        if(Flw_Rejections.state_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(2, Flw_Rejections.state_id);
}

                        if(Flw_Rejections.district_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(3, Flw_Rejections.district_id);
}

                        if(Flw_Rejections.district_name == null) {
pstmtInsert_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(4, Flw_Rejections.district_name);
}

                        if(Flw_Rejections.panchayat_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(5, Flw_Rejections.panchayat_id);
}

                        if(Flw_Rejections.panchayat_name == null) {
pstmtInsert_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(6, Flw_Rejections.panchayat_name);
}

                        if(Flw_Rejections.block_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(7, Flw_Rejections.block_id);
}

                        if(Flw_Rejections.block_name == null) {
pstmtInsert_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(8, Flw_Rejections.block_name);
}

                        if(Flw_Rejections.swc_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(9, Flw_Rejections.swc_id);
}

                        if(Flw_Rejections.mobile_number == null) {
pstmtInsert_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(10, Flw_Rejections.mobile_number);
}

                        if(Flw_Rejections.gender == null) {
pstmtInsert_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(11, Flw_Rejections.gender);
}

                        if(Flw_Rejections.accepted == null) {
pstmtInsert_tMysqlOutput_1.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tMysqlOutput_1.setBoolean(12, Flw_Rejections.accepted);
}

                        if(Flw_Rejections.rejection_reason == null) {
pstmtInsert_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(13, Flw_Rejections.rejection_reason);
}

                        if(Flw_Rejections.creation_date != null) {
date_tMysqlOutput_1 = Flw_Rejections.creation_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmtInsert_tMysqlOutput_1.setString(14, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_1.setTimestamp(14, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmtInsert_tMysqlOutput_1.setNull(14, java.sql.Types.DATE);
}

                        if(Flw_Rejections.modification_date != null) {
date_tMysqlOutput_1 = Flw_Rejections.modification_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmtInsert_tMysqlOutput_1.setString(15, "0000-00-00 00:00:00");
} else {pstmtInsert_tMysqlOutput_1.setTimestamp(15, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmtInsert_tMysqlOutput_1.setNull(15, java.sql.Types.DATE);
}

                        if(Flw_Rejections.name == null) {
pstmtInsert_tMysqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(16, Flw_Rejections.name);
}

                        if(Flw_Rejections.job_status == null) {
pstmtInsert_tMysqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(17, Flw_Rejections.job_status);
}

                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1 + pstmtInsert_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                }else{
                    nb_line_tMysqlOutput_1++;
             }
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                        nb_line_tMysqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            if(!whetherReject_tMysqlOutput_1) {
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "Flw_Rejections"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if (rs_tMysqlInput_1 != null) {
		rs_tMysqlInput_1.close();
	}
	if (stmt_tMysqlInput_1 != null) {
		stmt_tMysqlInput_1.close();
	}
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



        if(pstmtUpdate_tMysqlOutput_1 != null){
            pstmtUpdate_tMysqlOutput_1.close();
            resourceMap.remove("pstmtUpdate_tMysqlOutput_1");
        }
        if(pstmtInsert_tMysqlOutput_1 != null){
            pstmtInsert_tMysqlOutput_1.close();
            resourceMap.remove("pstmtInsert_tMysqlOutput_1");
        }
    resourceMap.put("statementClosed_tMysqlOutput_1", true);
    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Flw_Rejections");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMysqlInput_4Process(globalMap);



/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tMysqlOutput_1 = null;
                if ((pstmtUpdateToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tMysqlOutput_1")) != null) {
                    pstmtUpdateToClose_tMysqlOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tMysqlOutput_1 = null;
                if ((pstmtInsertToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tMysqlOutput_1")) != null) {
                    pstmtInsertToClose_tMysqlOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_1") == null){
            java.sql.Connection ctn_tMysqlOutput_1 = null;
            if((ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1")) != null){
                try {
                    ctn_tMysqlOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
                    String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_1);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOflocation_ids_updateStruct implements routines.system.IPersistableRow<copyOflocation_ids_updateStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOflocation_ids_updateStruct other = (copyOflocation_ids_updateStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            other.state_id = this.state_id;
	            other.state_name = this.state_name;
	            
	}

	public void copyKeysDataTo(copyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.state_id = readInteger(dis);
					
					this.state_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
					// String
				
						writeString(this.state_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",state_name="+state_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOflocation_ids_updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer state_id;

				public Integer getState_id () {
					return this.state_id;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.state_id = readInteger(dis);
					
					this.state_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.state_id,dos);
					
					// String
				
						writeString(this.state_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",state_name="+state_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
copyOflocation_ids_updateStruct copyOflocation_ids_update = new copyOflocation_ids_updateStruct();





	
	/**
	 * [tMysqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_3", false);
		start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOflocation_ids_update");
					}
				
		int tos_count_tMysqlOutput_3 = 0;
		





        int updateKeyCount_tMysqlOutput_3 = 1;
        if(updateKeyCount_tMysqlOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_3 = 0;
int nb_line_update_tMysqlOutput_3 = 0;
int nb_line_inserted_tMysqlOutput_3 = 0;
int nb_line_deleted_tMysqlOutput_3 = 0;
int nb_line_rejected_tMysqlOutput_3 = 0;

int deletedCount_tMysqlOutput_3=0;
int updatedCount_tMysqlOutput_3=0;
int insertedCount_tMysqlOutput_3=0;

int rejectedCount_tMysqlOutput_3=0;

String tableName_tMysqlOutput_3 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_3 = false;

java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
long date_tMysqlOutput_3;

java.sql.Connection conn_tMysqlOutput_3 = null;
		String dbProperties_tMysqlOutput_3 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_3 = null;
		if(dbProperties_tMysqlOutput_3 == null || dbProperties_tMysqlOutput_3.trim().length() == 0) {
			url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_3 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_3.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_3;
		}
		String driverClass_tMysqlOutput_3 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_3 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[V6bUSqvaHwyKKqA3cRfdQk/FVxicc66dY0QbJb1w13LKuf22]");

		String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;
		java.lang.Class.forName(driverClass_tMysqlOutput_3);
		
		conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(url_tMysqlOutput_3, dbUser_tMysqlOutput_3, dbPwd_tMysqlOutput_3);
		
	
	resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
        conn_tMysqlOutput_3.setAutoCommit(false);
        int commitEvery_tMysqlOutput_3 = 10000;
        int commitCounter_tMysqlOutput_3 = 0;
   int batchSize_tMysqlOutput_3 = 10000;
   int batchSizeCounter_tMysqlOutput_3=0;

int count_tMysqlOutput_3=0;
    	
	    String update_tMysqlOutput_3 = "UPDATE `" + "swc_import_rejection" + "` SET `state_id` = ?,`state_name` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3.prepareStatement(update_tMysqlOutput_3);
	    resourceMap.put("pstmt_tMysqlOutput_3", pstmt_tMysqlOutput_3);
	    

 



/**
 * [tMysqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOflocation_ids_updateStruct copyOflocation_ids_update_tmp = new copyOflocation_ids_updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMysqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_4", false);
		start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_4";

	
		int tos_count_tMysqlInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4.getTime();
		    int nb_line_tMysqlInput_4 = 0;
		    java.sql.Connection conn_tMysqlInput_4 = null;
				String driverClass_tMysqlInput_4 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_4 = java.lang.Class.forName(driverClass_tMysqlInput_4);
					String dbUser_tMysqlInput_4 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[GYgbDU3rNgsayOxLcV5d6XI6g3RqowYFKpwxCvo8Dz6Rcji4]");
					
					String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;
				
				String url_tMysqlInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(url_tMysqlInput_4,dbUser_tMysqlInput_4,dbPwd_tMysqlInput_4);
		        
		    
			java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4.createStatement();

		    String dbquery_tMysqlInput_4 = "select b.id, s.id as 'state_id',s.state_name\nfrom swc_import_rejection b\nleft join dim_state s on s.id = b.state_id\nwhe"
+"re b.modification_date > '"+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_4_QUERY",dbquery_tMysqlInput_4);
		    java.sql.ResultSet rs_tMysqlInput_4 = null;

		    try {
		    	rs_tMysqlInput_4 = stmt_tMysqlInput_4.executeQuery(dbquery_tMysqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4.getMetaData();
		    	int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

		    String tmpContent_tMysqlInput_4 = null;
		    
		    
		    while (rs_tMysqlInput_4.next()) {
		        nb_line_tMysqlInput_4++;
		        
							if(colQtyInRs_tMysqlInput_4 < 1) {
								row5.id = 0;
							} else {
		                          
            row5.id = rs_tMysqlInput_4.getInt(1);
            if(rs_tMysqlInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_4 < 2) {
								row5.state_id = null;
							} else {
		                          
            row5.state_id = rs_tMysqlInput_4.getInt(2);
            if(rs_tMysqlInput_4.wasNull()){
                    row5.state_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_4 < 3) {
								row5.state_name = null;
							} else {
	                         		
        	row5.state_name = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_4 begin ] stop
 */
	
	/**
	 * [tMysqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 


	tos_count_tMysqlInput_4++;

/**
 * [tMysqlInput_4 main ] stop
 */
	
	/**
	 * [tMysqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOflocation_ids_update = null;


// # Output table : 'copyOflocation_ids_update'
copyOflocation_ids_update_tmp.id = row5.id ;
copyOflocation_ids_update_tmp.state_id = row5.state_id ;
copyOflocation_ids_update_tmp.state_name = row5.state_name;
copyOflocation_ids_update = copyOflocation_ids_update_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOflocation_ids_update"
if(copyOflocation_ids_update != null) { 



	
	/**
	 * [tMysqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOflocation_ids_update");
					}
					



        whetherReject_tMysqlOutput_3 = false;
                    if(copyOflocation_ids_update.state_id == null) {
pstmt_tMysqlOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_3.setInt(1, copyOflocation_ids_update.state_id);
}

                    if(copyOflocation_ids_update.state_name == null) {
pstmt_tMysqlOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_3.setString(2, copyOflocation_ids_update.state_name);
}


                    pstmt_tMysqlOutput_3.setInt(3 + count_tMysqlOutput_3, copyOflocation_ids_update.id);


            pstmt_tMysqlOutput_3.addBatch();
            nb_line_tMysqlOutput_3++;

              batchSizeCounter_tMysqlOutput_3++;
            if(!whetherReject_tMysqlOutput_3) {
            }
                if ( batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
                try {
                        int countSum_tMysqlOutput_3 = 0;
                        for(int countEach_tMysqlOutput_3: pstmt_tMysqlOutput_3.executeBatch()) {
                            countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
                        }
                        updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                        batchSizeCounter_tMysqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_3 = 0;
                    for(int countEach_tMysqlOutput_3: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
                    }
                    updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                    System.err.println(e.getMessage());
                }



                }
                commitCounter_tMysqlOutput_3++;

                if(commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

                try {
                        int countSum_tMysqlOutput_3 = 0;
                        for(int countEach_tMysqlOutput_3: pstmt_tMysqlOutput_3.executeBatch()) {
                            countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
                        }
                        updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_3 = 0;
                    for(int countEach_tMysqlOutput_3: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
                    }
                    updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_3.commit();
                    commitCounter_tMysqlOutput_3=0;

                }


 


	tos_count_tMysqlOutput_3++;

/**
 * [tMysqlOutput_3 main ] stop
 */
	
	/**
	 * [tMysqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	

 



/**
 * [tMysqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	

 



/**
 * [tMysqlOutput_3 process_data_end ] stop
 */

} // End of branch "copyOflocation_ids_update"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

	}
}finally{
	if (rs_tMysqlInput_4 != null) {
		rs_tMysqlInput_4.close();
	}
	if (stmt_tMysqlInput_4 != null) {
		stmt_tMysqlInput_4.close();
	}
		if(conn_tMysqlInput_4 != null && !conn_tMysqlInput_4.isClosed()) {
			
			conn_tMysqlInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_4_NB_LINE",nb_line_tMysqlInput_4);
		


 

ok_Hash.put("tMysqlInput_4", true);
end_Hash.put("tMysqlInput_4", System.currentTimeMillis());




/**
 * [tMysqlInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMysqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	



	
    try {
    	if(pstmt_tMysqlOutput_3 != null){
			int countSum_tMysqlOutput_3 = 0;
			
			for(int countEach_tMysqlOutput_3: pstmt_tMysqlOutput_3.executeBatch()) {
				countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
			}
			
	    	
	    		updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_3 = 0;
		for(int countEach_tMysqlOutput_3: e.getUpdateCounts()) {
			countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0 : countEach_tMysqlOutput_3);
		}
		
    	updatedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_3 != null) {
			
				pstmt_tMysqlOutput_3.close();
				resourceMap.remove("pstmt_tMysqlOutput_3");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_3", true);
    	if (commitCounter_tMysqlOutput_3 > 0) {
    		
    		conn_tMysqlOutput_3.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_3 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_3", true);
    	

	nb_line_deleted_tMysqlOutput_3=nb_line_deleted_tMysqlOutput_3+ deletedCount_tMysqlOutput_3;
	nb_line_update_tMysqlOutput_3=nb_line_update_tMysqlOutput_3 + updatedCount_tMysqlOutput_3;
	nb_line_inserted_tMysqlOutput_3=nb_line_inserted_tMysqlOutput_3 + insertedCount_tMysqlOutput_3;
	nb_line_rejected_tMysqlOutput_3=nb_line_rejected_tMysqlOutput_3 + rejectedCount_tMysqlOutput_3;
	
        globalMap.put("tMysqlOutput_3_NB_LINE",nb_line_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_3);
        globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_3);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOflocation_ids_update");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_3", true);
end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMysqlInput_5Process(globalMap);



/**
 * [tMysqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_3 = null;
                if ((pstmtToClose_tMysqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_3")) != null) {
                    pstmtToClose_tMysqlOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_3") == null){
            java.sql.Connection ctn_tMysqlOutput_3 = null;
            if((ctn_tMysqlOutput_3 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_3")) != null){
                try {
                    ctn_tMysqlOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
                    String errorMessage_tMysqlOutput_3 = "failed to close the connection in tMysqlOutput_3 :" + sqlEx_tMysqlOutput_3.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_3);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOflocation_ids_update_0Struct implements routines.system.IPersistableRow<copyOfcopyOflocation_ids_update_0Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String district_name;

				public String getDistrict_name () {
					return this.district_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOflocation_ids_update_0Struct other = (copyOfcopyOflocation_ids_update_0Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOflocation_ids_update_0Struct other) {

		other.id = this.id;
	            other.district_id = this.district_id;
	            other.district_name = this.district_name;
	            
	}

	public void copyKeysDataTo(copyOfcopyOflocation_ids_update_0Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.district_id = readInteger(dis);
					
					this.district_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.district_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",district_name="+district_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOflocation_ids_update_0Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer district_id;

				public Integer getDistrict_id () {
					return this.district_id;
				}
				
			    public String district_name;

				public String getDistrict_name () {
					return this.district_name;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
						this.district_id = readInteger(dis);
					
					this.district_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// Integer
				
						writeInteger(this.district_id,dos);
					
					// String
				
						writeString(this.district_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",district_name="+district_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
copyOfcopyOflocation_ids_update_0Struct copyOfcopyOflocation_ids_update_0 = new copyOfcopyOflocation_ids_update_0Struct();





	
	/**
	 * [tMysqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_4", false);
		start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOflocation_ids_update_0");
					}
				
		int tos_count_tMysqlOutput_4 = 0;
		





        int updateKeyCount_tMysqlOutput_4 = 1;
        if(updateKeyCount_tMysqlOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_4 = 0;
int nb_line_update_tMysqlOutput_4 = 0;
int nb_line_inserted_tMysqlOutput_4 = 0;
int nb_line_deleted_tMysqlOutput_4 = 0;
int nb_line_rejected_tMysqlOutput_4 = 0;

int deletedCount_tMysqlOutput_4=0;
int updatedCount_tMysqlOutput_4=0;
int insertedCount_tMysqlOutput_4=0;

int rejectedCount_tMysqlOutput_4=0;

String tableName_tMysqlOutput_4 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_4 = false;

java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
long date_tMysqlOutput_4;

java.sql.Connection conn_tMysqlOutput_4 = null;
		String dbProperties_tMysqlOutput_4 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_4 = null;
		if(dbProperties_tMysqlOutput_4 == null || dbProperties_tMysqlOutput_4.trim().length() == 0) {
			url_tMysqlOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_4 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_4.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_4;
		}
		String driverClass_tMysqlOutput_4 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_4 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[YrsgDG3KnRpRH9RSYu+GWcFefDdXrOJ/Hax+uR8ZH3U28+xS]");

		String dbPwd_tMysqlOutput_4 = decryptedPassword_tMysqlOutput_4;
		java.lang.Class.forName(driverClass_tMysqlOutput_4);
		
		conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(url_tMysqlOutput_4, dbUser_tMysqlOutput_4, dbPwd_tMysqlOutput_4);
		
	
	resourceMap.put("conn_tMysqlOutput_4", conn_tMysqlOutput_4);
        conn_tMysqlOutput_4.setAutoCommit(false);
        int commitEvery_tMysqlOutput_4 = 10000;
        int commitCounter_tMysqlOutput_4 = 0;
   int batchSize_tMysqlOutput_4 = 10000;
   int batchSizeCounter_tMysqlOutput_4=0;

int count_tMysqlOutput_4=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_4 = conn_tMysqlOutput_4.getMetaData();
                                boolean whetherExist_tMysqlOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tMysqlOutput_4 = dbMetaData_tMysqlOutput_4.getTables("WAReporting", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tMysqlOutput_4.next()) {
                                        String table_tMysqlOutput_4 = rsTable_tMysqlOutput_4.getString("TABLE_NAME");
                                        if(table_tMysqlOutput_4.equalsIgnoreCase("swc_import_rejection")) {
                                            whetherExist_tMysqlOutput_4 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tMysqlOutput_4) {
                                    try (java.sql.Statement stmtCreate_tMysqlOutput_4 = conn_tMysqlOutput_4.createStatement()) {
                                        stmtCreate_tMysqlOutput_4.execute("CREATE TABLE `" + tableName_tMysqlOutput_4 + "`(`id` INT(0)   not null ,`district_id` INT(0)  ,`district_name` VARCHAR(0)  ,primary key(`id`))");
                                    }
                                }
	    String update_tMysqlOutput_4 = "UPDATE `" + "swc_import_rejection" + "` SET `district_id` = ?,`district_name` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4.prepareStatement(update_tMysqlOutput_4);
	    resourceMap.put("pstmt_tMysqlOutput_4", pstmt_tMysqlOutput_4);
	    

 



/**
 * [tMysqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOflocation_ids_update_0Struct copyOfcopyOflocation_ids_update_0_tmp = new copyOfcopyOflocation_ids_update_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMysqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_5", false);
		start_Hash.put("tMysqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_5";

	
		int tos_count_tMysqlInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5.getTime();
		    int nb_line_tMysqlInput_5 = 0;
		    java.sql.Connection conn_tMysqlInput_5 = null;
				String driverClass_tMysqlInput_5 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_5 = java.lang.Class.forName(driverClass_tMysqlInput_5);
					String dbUser_tMysqlInput_5 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[ex3nV8yzP8R4fqst4kj4CxCMKfm8HWhZx8QGcWeQvdY08FVy]");
					
					String dbPwd_tMysqlInput_5 = decryptedPassword_tMysqlInput_5;
				
				String url_tMysqlInput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(url_tMysqlInput_5,dbUser_tMysqlInput_5,dbPwd_tMysqlInput_5);
		        
		    
			java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5.createStatement();

		    String dbquery_tMysqlInput_5 = "select b.id,\nd.district_id as 'district_id',d.district_name\nfrom swc_import_rejection b\nleft join dim_district d on d.d"
+"istrict_id = b.district_id\nwhere b.modification_date > '"+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_5_QUERY",dbquery_tMysqlInput_5);
		    java.sql.ResultSet rs_tMysqlInput_5 = null;

		    try {
		    	rs_tMysqlInput_5 = stmt_tMysqlInput_5.executeQuery(dbquery_tMysqlInput_5);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5.getMetaData();
		    	int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5.getColumnCount();

		    String tmpContent_tMysqlInput_5 = null;
		    
		    
		    while (rs_tMysqlInput_5.next()) {
		        nb_line_tMysqlInput_5++;
		        
							if(colQtyInRs_tMysqlInput_5 < 1) {
								row6.id = 0;
							} else {
		                          
            row6.id = rs_tMysqlInput_5.getInt(1);
            if(rs_tMysqlInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_5 < 2) {
								row6.district_id = null;
							} else {
		                          
            row6.district_id = rs_tMysqlInput_5.getInt(2);
            if(rs_tMysqlInput_5.wasNull()){
                    row6.district_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_5 < 3) {
								row6.district_name = null;
							} else {
	                         		
        	row6.district_name = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 3, false);
		                    }
					

 



/**
 * [tMysqlInput_5 begin ] stop
 */
	
	/**
	 * [tMysqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 


	tos_count_tMysqlInput_5++;

/**
 * [tMysqlInput_5 main ] stop
 */
	
	/**
	 * [tMysqlInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOflocation_ids_update_0 = null;


// # Output table : 'copyOfcopyOflocation_ids_update_0'
copyOfcopyOflocation_ids_update_0_tmp.id = row6.id ;
copyOfcopyOflocation_ids_update_0_tmp.district_id = row6.district_id ;
copyOfcopyOflocation_ids_update_0_tmp.district_name = row6.district_name;
copyOfcopyOflocation_ids_update_0 = copyOfcopyOflocation_ids_update_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOflocation_ids_update_0"
if(copyOfcopyOflocation_ids_update_0 != null) { 



	
	/**
	 * [tMysqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOflocation_ids_update_0");
					}
					



        whetherReject_tMysqlOutput_4 = false;
                    if(copyOfcopyOflocation_ids_update_0.district_id == null) {
pstmt_tMysqlOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_4.setInt(1, copyOfcopyOflocation_ids_update_0.district_id);
}

                    if(copyOfcopyOflocation_ids_update_0.district_name == null) {
pstmt_tMysqlOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_4.setString(2, copyOfcopyOflocation_ids_update_0.district_name);
}


                    pstmt_tMysqlOutput_4.setInt(3 + count_tMysqlOutput_4, copyOfcopyOflocation_ids_update_0.id);


            pstmt_tMysqlOutput_4.addBatch();
            nb_line_tMysqlOutput_4++;

              batchSizeCounter_tMysqlOutput_4++;
            if(!whetherReject_tMysqlOutput_4) {
            }
                if ( batchSize_tMysqlOutput_4 <= batchSizeCounter_tMysqlOutput_4) {
                try {
                        int countSum_tMysqlOutput_4 = 0;
                        for(int countEach_tMysqlOutput_4: pstmt_tMysqlOutput_4.executeBatch()) {
                            countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
                        }
                        updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                        batchSizeCounter_tMysqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_4 = 0;
                    for(int countEach_tMysqlOutput_4: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
                    }
                    updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                    System.err.println(e.getMessage());
                }



                }
                commitCounter_tMysqlOutput_4++;

                if(commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

                try {
                        int countSum_tMysqlOutput_4 = 0;
                        for(int countEach_tMysqlOutput_4: pstmt_tMysqlOutput_4.executeBatch()) {
                            countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
                        }
                        updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_4 = 0;
                    for(int countEach_tMysqlOutput_4: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
                    }
                    updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_4.commit();
                    commitCounter_tMysqlOutput_4=0;

                }


 


	tos_count_tMysqlOutput_4++;

/**
 * [tMysqlOutput_4 main ] stop
 */
	
	/**
	 * [tMysqlOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

 



/**
 * [tMysqlOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	

 



/**
 * [tMysqlOutput_4 process_data_end ] stop
 */

} // End of branch "copyOfcopyOflocation_ids_update_0"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

	}
}finally{
	if (rs_tMysqlInput_5 != null) {
		rs_tMysqlInput_5.close();
	}
	if (stmt_tMysqlInput_5 != null) {
		stmt_tMysqlInput_5.close();
	}
		if(conn_tMysqlInput_5 != null && !conn_tMysqlInput_5.isClosed()) {
			
			conn_tMysqlInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_5_NB_LINE",nb_line_tMysqlInput_5);
		


 

ok_Hash.put("tMysqlInput_5", true);
end_Hash.put("tMysqlInput_5", System.currentTimeMillis());




/**
 * [tMysqlInput_5 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMysqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



	
    try {
    	if(pstmt_tMysqlOutput_4 != null){
			int countSum_tMysqlOutput_4 = 0;
			
			for(int countEach_tMysqlOutput_4: pstmt_tMysqlOutput_4.executeBatch()) {
				countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
			}
			
	    	
	    		updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_4 = 0;
		for(int countEach_tMysqlOutput_4: e.getUpdateCounts()) {
			countSum_tMysqlOutput_4 += (countEach_tMysqlOutput_4 < 0 ? 0 : countEach_tMysqlOutput_4);
		}
		
    	updatedCount_tMysqlOutput_4 += countSum_tMysqlOutput_4;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_4 != null) {
			
				pstmt_tMysqlOutput_4.close();
				resourceMap.remove("pstmt_tMysqlOutput_4");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_4", true);
    	if (commitCounter_tMysqlOutput_4 > 0) {
    		
    		conn_tMysqlOutput_4.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_4 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_4", true);
    	

	nb_line_deleted_tMysqlOutput_4=nb_line_deleted_tMysqlOutput_4+ deletedCount_tMysqlOutput_4;
	nb_line_update_tMysqlOutput_4=nb_line_update_tMysqlOutput_4 + updatedCount_tMysqlOutput_4;
	nb_line_inserted_tMysqlOutput_4=nb_line_inserted_tMysqlOutput_4 + insertedCount_tMysqlOutput_4;
	nb_line_rejected_tMysqlOutput_4=nb_line_rejected_tMysqlOutput_4 + rejectedCount_tMysqlOutput_4;
	
        globalMap.put("tMysqlOutput_4_NB_LINE",nb_line_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_4);
        globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_4);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOflocation_ids_update_0");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_4", true);
end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tMysqlInput_6Process(globalMap);



/**
 * [tMysqlOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_5";

	

 



/**
 * [tMysqlInput_5 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_4 = null;
                if ((pstmtToClose_tMysqlOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_4")) != null) {
                    pstmtToClose_tMysqlOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_4") == null){
            java.sql.Connection ctn_tMysqlOutput_4 = null;
            if((ctn_tMysqlOutput_4 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_4")) != null){
                try {
                    ctn_tMysqlOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_4) {
                    String errorMessage_tMysqlOutput_4 = "failed to close the connection in tMysqlOutput_4 :" + sqlEx_tMysqlOutput_4.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_4);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOflocation_ids_update_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOflocation_ids_update_0Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String panchayat_id;

				public String getPanchayat_id () {
					return this.panchayat_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOflocation_ids_update_0Struct other = (copyOfcopyOfcopyOflocation_ids_update_0Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOflocation_ids_update_0Struct other) {

		other.id = this.id;
	            other.panchayat_id = this.panchayat_id;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOflocation_ids_update_0Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.panchayat_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.panchayat_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",panchayat_id="+panchayat_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOflocation_ids_update_0Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String panchayat_id;

				public String getPanchayat_id () {
					return this.panchayat_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.panchayat_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.panchayat_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",panchayat_id="+panchayat_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
copyOfcopyOfcopyOflocation_ids_update_0Struct copyOfcopyOfcopyOflocation_ids_update_0 = new copyOfcopyOfcopyOflocation_ids_update_0Struct();





	
	/**
	 * [tMysqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_5", false);
		start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOflocation_ids_update_0");
					}
				
		int tos_count_tMysqlOutput_5 = 0;
		





        int updateKeyCount_tMysqlOutput_5 = 1;
        if(updateKeyCount_tMysqlOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_5 = 0;
int nb_line_update_tMysqlOutput_5 = 0;
int nb_line_inserted_tMysqlOutput_5 = 0;
int nb_line_deleted_tMysqlOutput_5 = 0;
int nb_line_rejected_tMysqlOutput_5 = 0;

int deletedCount_tMysqlOutput_5=0;
int updatedCount_tMysqlOutput_5=0;
int insertedCount_tMysqlOutput_5=0;

int rejectedCount_tMysqlOutput_5=0;

String tableName_tMysqlOutput_5 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_5 = false;

java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime().getTime();
calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime().getTime();
long date_tMysqlOutput_5;

java.sql.Connection conn_tMysqlOutput_5 = null;
		String dbProperties_tMysqlOutput_5 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_5 = null;
		if(dbProperties_tMysqlOutput_5 == null || dbProperties_tMysqlOutput_5.trim().length() == 0) {
			url_tMysqlOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_5 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_5.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_5 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_5;
		}
		String driverClass_tMysqlOutput_5 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_5 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[hBN6mAGbjTCM+9/wY9f3cn4rKnyW6YuiZvqnFN9oG59eZWBk]");

		String dbPwd_tMysqlOutput_5 = decryptedPassword_tMysqlOutput_5;
		java.lang.Class.forName(driverClass_tMysqlOutput_5);
		
		conn_tMysqlOutput_5 = java.sql.DriverManager.getConnection(url_tMysqlOutput_5, dbUser_tMysqlOutput_5, dbPwd_tMysqlOutput_5);
		
	
	resourceMap.put("conn_tMysqlOutput_5", conn_tMysqlOutput_5);
        conn_tMysqlOutput_5.setAutoCommit(false);
        int commitEvery_tMysqlOutput_5 = 10000;
        int commitCounter_tMysqlOutput_5 = 0;
   int batchSize_tMysqlOutput_5 = 10000;
   int batchSizeCounter_tMysqlOutput_5=0;

int count_tMysqlOutput_5=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_5 = conn_tMysqlOutput_5.getMetaData();
                                boolean whetherExist_tMysqlOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tMysqlOutput_5 = dbMetaData_tMysqlOutput_5.getTables("WAReporting", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tMysqlOutput_5.next()) {
                                        String table_tMysqlOutput_5 = rsTable_tMysqlOutput_5.getString("TABLE_NAME");
                                        if(table_tMysqlOutput_5.equalsIgnoreCase("swc_import_rejection")) {
                                            whetherExist_tMysqlOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tMysqlOutput_5) {
                                    try (java.sql.Statement stmtCreate_tMysqlOutput_5 = conn_tMysqlOutput_5.createStatement()) {
                                        stmtCreate_tMysqlOutput_5.execute("CREATE TABLE `" + tableName_tMysqlOutput_5 + "`(`id` INT(0)  ,`panchayat_id` VARCHAR(0)  ,primary key(`id`))");
                                    }
                                }
	    String update_tMysqlOutput_5 = "UPDATE `" + "swc_import_rejection" + "` SET `panchayat_id` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5.prepareStatement(update_tMysqlOutput_5);
	    resourceMap.put("pstmt_tMysqlOutput_5", pstmt_tMysqlOutput_5);
	    

 



/**
 * [tMysqlOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOflocation_ids_update_0Struct copyOfcopyOfcopyOflocation_ids_update_0_tmp = new copyOfcopyOfcopyOflocation_ids_update_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMysqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_6", false);
		start_Hash.put("tMysqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_6";

	
		int tos_count_tMysqlInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6.getTime();
		    int nb_line_tMysqlInput_6 = 0;
		    java.sql.Connection conn_tMysqlInput_6 = null;
				String driverClass_tMysqlInput_6 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_6 = java.lang.Class.forName(driverClass_tMysqlInput_6);
					String dbUser_tMysqlInput_6 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[8IzcIIGDLV4nIcU+cgDT+aBK0Jv+AYt58RbxYjG7g9JOEpUv]");
					
					String dbPwd_tMysqlInput_6 = decryptedPassword_tMysqlInput_6;
				
				String url_tMysqlInput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(url_tMysqlInput_6,dbUser_tMysqlInput_6,dbPwd_tMysqlInput_6);
		        
		    
			java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6.createStatement();

		    String dbquery_tMysqlInput_6 = "select b.id,\ncase when b.panchayat_id is null then null else p.id end as 'panchayat_id'\nfrom swc_import_rejection b\nlef"
+"t join dim_panchayat p on p.id = b.panchayat_id\nleft join dim_state s on s.id = b.state_id\nwhere b.modification_date > '"
+""+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_6_QUERY",dbquery_tMysqlInput_6);
		    java.sql.ResultSet rs_tMysqlInput_6 = null;

		    try {
		    	rs_tMysqlInput_6 = stmt_tMysqlInput_6.executeQuery(dbquery_tMysqlInput_6);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6.getMetaData();
		    	int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6.getColumnCount();

		    String tmpContent_tMysqlInput_6 = null;
		    
		    
		    while (rs_tMysqlInput_6.next()) {
		        nb_line_tMysqlInput_6++;
		        
							if(colQtyInRs_tMysqlInput_6 < 1) {
								row7.id = null;
							} else {
		                          
            row7.id = rs_tMysqlInput_6.getInt(1);
            if(rs_tMysqlInput_6.wasNull()){
                    row7.id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_6 < 2) {
								row7.panchayat_id = null;
							} else {
	                         		
        	row7.panchayat_id = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 2, false);
		                    }
					

 



/**
 * [tMysqlInput_6 begin ] stop
 */
	
	/**
	 * [tMysqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 


	tos_count_tMysqlInput_6++;

/**
 * [tMysqlInput_6 main ] stop
 */
	
	/**
	 * [tMysqlInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOflocation_ids_update_0 = null;


// # Output table : 'copyOfcopyOfcopyOflocation_ids_update_0'
copyOfcopyOfcopyOflocation_ids_update_0_tmp.id = row7.id ;
copyOfcopyOfcopyOflocation_ids_update_0_tmp.panchayat_id = row7.panchayat_id ;
copyOfcopyOfcopyOflocation_ids_update_0 = copyOfcopyOfcopyOflocation_ids_update_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOflocation_ids_update_0"
if(copyOfcopyOfcopyOflocation_ids_update_0 != null) { 



	
	/**
	 * [tMysqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOflocation_ids_update_0");
					}
					



        whetherReject_tMysqlOutput_5 = false;
                    if(copyOfcopyOfcopyOflocation_ids_update_0.panchayat_id == null) {
pstmt_tMysqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_5.setString(1, copyOfcopyOfcopyOflocation_ids_update_0.panchayat_id);
}


                    if(copyOfcopyOfcopyOflocation_ids_update_0.id == null) {
pstmt_tMysqlOutput_5.setNull(2 + count_tMysqlOutput_5, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_5.setInt(2 + count_tMysqlOutput_5, copyOfcopyOfcopyOflocation_ids_update_0.id);
}


            pstmt_tMysqlOutput_5.addBatch();
            nb_line_tMysqlOutput_5++;

              batchSizeCounter_tMysqlOutput_5++;
            if(!whetherReject_tMysqlOutput_5) {
            }
                if ( batchSize_tMysqlOutput_5 <= batchSizeCounter_tMysqlOutput_5) {
                try {
                        int countSum_tMysqlOutput_5 = 0;
                        for(int countEach_tMysqlOutput_5: pstmt_tMysqlOutput_5.executeBatch()) {
                            countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0 : countEach_tMysqlOutput_5);
                        }
                        updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;
                        batchSizeCounter_tMysqlOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_5 = 0;
                    for(int countEach_tMysqlOutput_5: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0 : countEach_tMysqlOutput_5);
                    }
                    updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;
                    System.err.println(e.getMessage());
                }



                }
                commitCounter_tMysqlOutput_5++;

                if(commitEvery_tMysqlOutput_5 <= commitCounter_tMysqlOutput_5) {

                try {
                        int countSum_tMysqlOutput_5 = 0;
                        for(int countEach_tMysqlOutput_5: pstmt_tMysqlOutput_5.executeBatch()) {
                            countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0 : countEach_tMysqlOutput_5);
                        }
                        updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_5 = 0;
                    for(int countEach_tMysqlOutput_5: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0 : countEach_tMysqlOutput_5);
                    }
                    updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_5.commit();
                    commitCounter_tMysqlOutput_5=0;

                }


 


	tos_count_tMysqlOutput_5++;

/**
 * [tMysqlOutput_5 main ] stop
 */
	
	/**
	 * [tMysqlOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	

 



/**
 * [tMysqlOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	

 



/**
 * [tMysqlOutput_5 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOflocation_ids_update_0"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

	}
}finally{
	if (rs_tMysqlInput_6 != null) {
		rs_tMysqlInput_6.close();
	}
	if (stmt_tMysqlInput_6 != null) {
		stmt_tMysqlInput_6.close();
	}
		if(conn_tMysqlInput_6 != null && !conn_tMysqlInput_6.isClosed()) {
			
			conn_tMysqlInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_6_NB_LINE",nb_line_tMysqlInput_6);
		


 

ok_Hash.put("tMysqlInput_6", true);
end_Hash.put("tMysqlInput_6", System.currentTimeMillis());




/**
 * [tMysqlInput_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMysqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	



	
    try {
    	if(pstmt_tMysqlOutput_5 != null){
			int countSum_tMysqlOutput_5 = 0;
			
			for(int countEach_tMysqlOutput_5: pstmt_tMysqlOutput_5.executeBatch()) {
				countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0 : countEach_tMysqlOutput_5);
			}
			
	    	
	    		updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_5 = 0;
		for(int countEach_tMysqlOutput_5: e.getUpdateCounts()) {
			countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0 : countEach_tMysqlOutput_5);
		}
		
    	updatedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_5 != null) {
			
				pstmt_tMysqlOutput_5.close();
				resourceMap.remove("pstmt_tMysqlOutput_5");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_5", true);
    	if (commitCounter_tMysqlOutput_5 > 0) {
    		
    		conn_tMysqlOutput_5.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_5 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_5", true);
    	

	nb_line_deleted_tMysqlOutput_5=nb_line_deleted_tMysqlOutput_5+ deletedCount_tMysqlOutput_5;
	nb_line_update_tMysqlOutput_5=nb_line_update_tMysqlOutput_5 + updatedCount_tMysqlOutput_5;
	nb_line_inserted_tMysqlOutput_5=nb_line_inserted_tMysqlOutput_5 + insertedCount_tMysqlOutput_5;
	nb_line_rejected_tMysqlOutput_5=nb_line_rejected_tMysqlOutput_5 + rejectedCount_tMysqlOutput_5;
	
        globalMap.put("tMysqlOutput_5_NB_LINE",nb_line_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_5);
        globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_5);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOflocation_ids_update_0");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_5", true);
end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tMysqlInput_3Process(globalMap);



/**
 * [tMysqlOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_6";

	

 



/**
 * [tMysqlInput_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_5 = null;
                if ((pstmtToClose_tMysqlOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_5")) != null) {
                    pstmtToClose_tMysqlOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_5") == null){
            java.sql.Connection ctn_tMysqlOutput_5 = null;
            if((ctn_tMysqlOutput_5 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_5")) != null){
                try {
                    ctn_tMysqlOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_5) {
                    String errorMessage_tMysqlOutput_5 = "failed to close the connection in tMysqlOutput_5 :" + sqlEx_tMysqlOutput_5.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_5);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOflocation_ids_updateStruct implements routines.system.IPersistableRow<copyOfcopyOflocation_ids_updateStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Long block_id;

				public Long getBlock_id () {
					return this.block_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOflocation_ids_updateStruct other = (copyOfcopyOflocation_ids_updateStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            other.block_id = this.block_id;
	            
	}

	public void copyKeysDataTo(copyOfcopyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.block_id = null;
           				} else {
           			    	this.block_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Long
				
						if(this.block_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.block_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",block_id="+String.valueOf(block_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOflocation_ids_updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Long block_id;

				public Long getBlock_id () {
					return this.block_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.block_id = null;
           				} else {
           			    	this.block_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Long
				
						if(this.block_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.block_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",block_id="+String.valueOf(block_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
copyOfcopyOflocation_ids_updateStruct copyOfcopyOflocation_ids_update = new copyOfcopyOflocation_ids_updateStruct();





	
	/**
	 * [tMysqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_2", false);
		start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOflocation_ids_update");
					}
				
		int tos_count_tMysqlOutput_2 = 0;
		





        int updateKeyCount_tMysqlOutput_2 = 1;
        if(updateKeyCount_tMysqlOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_2 = 0;
int nb_line_update_tMysqlOutput_2 = 0;
int nb_line_inserted_tMysqlOutput_2 = 0;
int nb_line_deleted_tMysqlOutput_2 = 0;
int nb_line_rejected_tMysqlOutput_2 = 0;

int deletedCount_tMysqlOutput_2=0;
int updatedCount_tMysqlOutput_2=0;
int insertedCount_tMysqlOutput_2=0;

int rejectedCount_tMysqlOutput_2=0;

String tableName_tMysqlOutput_2 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_2 = false;

java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
long date_tMysqlOutput_2;

java.sql.Connection conn_tMysqlOutput_2 = null;
		String dbProperties_tMysqlOutput_2 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_2 = null;
		if(dbProperties_tMysqlOutput_2 == null || dbProperties_tMysqlOutput_2.trim().length() == 0) {
			url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_2 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_2.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_2;
		}
		String driverClass_tMysqlOutput_2 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_2 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[eIvRPg4rin/6ugko5Gbpc1oiM0LUnrpyj6t/PxAGuIl/KmOY]");

		String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
		java.lang.Class.forName(driverClass_tMysqlOutput_2);
		
		conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(url_tMysqlOutput_2, dbUser_tMysqlOutput_2, dbPwd_tMysqlOutput_2);
		
	
	resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
        conn_tMysqlOutput_2.setAutoCommit(false);
        int commitEvery_tMysqlOutput_2 = 10000;
        int commitCounter_tMysqlOutput_2 = 0;
   int batchSize_tMysqlOutput_2 = 10000;
   int batchSizeCounter_tMysqlOutput_2=0;

int count_tMysqlOutput_2=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_2 = conn_tMysqlOutput_2.getMetaData();
                                boolean whetherExist_tMysqlOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tMysqlOutput_2 = dbMetaData_tMysqlOutput_2.getTables("WAReporting", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tMysqlOutput_2.next()) {
                                        String table_tMysqlOutput_2 = rsTable_tMysqlOutput_2.getString("TABLE_NAME");
                                        if(table_tMysqlOutput_2.equalsIgnoreCase("swc_import_rejection")) {
                                            whetherExist_tMysqlOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tMysqlOutput_2) {
                                    try (java.sql.Statement stmtCreate_tMysqlOutput_2 = conn_tMysqlOutput_2.createStatement()) {
                                        stmtCreate_tMysqlOutput_2.execute("CREATE TABLE `" + tableName_tMysqlOutput_2 + "`(`id` INT(0)  ,`block_id` BIGINT(0)  ,primary key(`id`))");
                                    }
                                }
	    String update_tMysqlOutput_2 = "UPDATE `" + "swc_import_rejection" + "` SET `block_id` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2.prepareStatement(update_tMysqlOutput_2);
	    resourceMap.put("pstmt_tMysqlOutput_2", pstmt_tMysqlOutput_2);
	    

 



/**
 * [tMysqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOflocation_ids_updateStruct copyOfcopyOflocation_ids_update_tmp = new copyOfcopyOflocation_ids_updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_3 = java.lang.Class.forName(driverClass_tMysqlInput_3);
					String dbUser_tMysqlInput_3 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[z37GzsDV9DS3ojgqwY92aTqUU5h/gCV+xqKdrXH1e5wkWCuQ]");
					
					String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;
				
				String url_tMysqlInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3,dbUser_tMysqlInput_3,dbPwd_tMysqlInput_3);
		        
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "select sir.id,\ncase when sir.block_id is null then null else b.block_id end as 'block_id'\nfrom swc_import_rejection sir"
+"\nleft join dim_block b on b.block_id = sir.block_id\nwhere sir.modification_date > '"+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);
		    java.sql.ResultSet rs_tMysqlInput_3 = null;

		    try {
		    	rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    	int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								row4.id = null;
							} else {
		                          
            row4.id = rs_tMysqlInput_3.getInt(1);
            if(rs_tMysqlInput_3.wasNull()){
                    row4.id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 2) {
								row4.block_id = null;
							} else {
		                          
            row4.block_id = rs_tMysqlInput_3.getLong(2);
            if(rs_tMysqlInput_3.wasNull()){
                    row4.block_id = null;
            }
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */
	
	/**
	 * [tMysqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOflocation_ids_update = null;


// # Output table : 'copyOfcopyOflocation_ids_update'
copyOfcopyOflocation_ids_update_tmp.id = row4.id ;
copyOfcopyOflocation_ids_update_tmp.block_id = row4.block_id ;
copyOfcopyOflocation_ids_update = copyOfcopyOflocation_ids_update_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOflocation_ids_update"
if(copyOfcopyOflocation_ids_update != null) { 



	
	/**
	 * [tMysqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOflocation_ids_update");
					}
					



        whetherReject_tMysqlOutput_2 = false;
                    if(copyOfcopyOflocation_ids_update.block_id == null) {
pstmt_tMysqlOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_2.setLong(1, copyOfcopyOflocation_ids_update.block_id);
}


                    if(copyOfcopyOflocation_ids_update.id == null) {
pstmt_tMysqlOutput_2.setNull(2 + count_tMysqlOutput_2, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_2.setInt(2 + count_tMysqlOutput_2, copyOfcopyOflocation_ids_update.id);
}


            pstmt_tMysqlOutput_2.addBatch();
            nb_line_tMysqlOutput_2++;

              batchSizeCounter_tMysqlOutput_2++;
            if(!whetherReject_tMysqlOutput_2) {
            }
                if ( batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                        }
                        updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                        batchSizeCounter_tMysqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());
                }



                }
                commitCounter_tMysqlOutput_2++;

                if(commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                        }
                        updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_2.commit();
                    commitCounter_tMysqlOutput_2=0;

                }


 


	tos_count_tMysqlOutput_2++;

/**
 * [tMysqlOutput_2 main ] stop
 */
	
	/**
	 * [tMysqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

 



/**
 * [tMysqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

 



/**
 * [tMysqlOutput_2 process_data_end ] stop
 */

} // End of branch "copyOfcopyOflocation_ids_update"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if (rs_tMysqlInput_3 != null) {
		rs_tMysqlInput_3.close();
	}
	if (stmt_tMysqlInput_3 != null) {
		stmt_tMysqlInput_3.close();
	}
		if(conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {
			
			conn_tMysqlInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMysqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



	
    try {
    	if(pstmt_tMysqlOutput_2 != null){
			int countSum_tMysqlOutput_2 = 0;
			
			for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
				countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
			}
			
	    	
	    		updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_2 = 0;
		for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
			countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
		}
		
    	updatedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_2 != null) {
			
				pstmt_tMysqlOutput_2.close();
				resourceMap.remove("pstmt_tMysqlOutput_2");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_2", true);
    	if (commitCounter_tMysqlOutput_2 > 0) {
    		
    		conn_tMysqlOutput_2.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_2 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_2", true);
    	

	nb_line_deleted_tMysqlOutput_2=nb_line_deleted_tMysqlOutput_2+ deletedCount_tMysqlOutput_2;
	nb_line_update_tMysqlOutput_2=nb_line_update_tMysqlOutput_2 + updatedCount_tMysqlOutput_2;
	nb_line_inserted_tMysqlOutput_2=nb_line_inserted_tMysqlOutput_2 + insertedCount_tMysqlOutput_2;
	nb_line_rejected_tMysqlOutput_2=nb_line_rejected_tMysqlOutput_2 + rejectedCount_tMysqlOutput_2;
	
        globalMap.put("tMysqlOutput_2_NB_LINE",nb_line_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_2);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOflocation_ids_update");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_2", true);
end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tMysqlInput_7Process(globalMap);



/**
 * [tMysqlOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_2 = null;
                if ((pstmtToClose_tMysqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_2")) != null) {
                    pstmtToClose_tMysqlOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_2") == null){
            java.sql.Connection ctn_tMysqlOutput_2 = null;
            if((ctn_tMysqlOutput_2 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_2")) != null){
                try {
                    ctn_tMysqlOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
                    String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :" + sqlEx_tMysqlOutput_2.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_2);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOflocation_ids_updateStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOflocation_ids_updateStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOflocation_ids_updateStruct other = (copyOfcopyOfcopyOflocation_ids_updateStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOflocation_ids_updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
copyOfcopyOfcopyOflocation_ids_updateStruct copyOfcopyOfcopyOflocation_ids_update = new copyOfcopyOfcopyOflocation_ids_updateStruct();





	
	/**
	 * [tMysqlOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_6", false);
		start_Hash.put("tMysqlOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOflocation_ids_update");
					}
				
		int tos_count_tMysqlOutput_6 = 0;
		





        int updateKeyCount_tMysqlOutput_6 = 1;
        if(updateKeyCount_tMysqlOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_6 = 0;
int nb_line_update_tMysqlOutput_6 = 0;
int nb_line_inserted_tMysqlOutput_6 = 0;
int nb_line_deleted_tMysqlOutput_6 = 0;
int nb_line_rejected_tMysqlOutput_6 = 0;

int deletedCount_tMysqlOutput_6=0;
int updatedCount_tMysqlOutput_6=0;
int insertedCount_tMysqlOutput_6=0;

int rejectedCount_tMysqlOutput_6=0;

String tableName_tMysqlOutput_6 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_6 = false;

java.util.Calendar calendar_tMysqlOutput_6 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_6.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime().getTime();
calendar_tMysqlOutput_6.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime().getTime();
long date_tMysqlOutput_6;

java.sql.Connection conn_tMysqlOutput_6 = null;
		String dbProperties_tMysqlOutput_6 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_6 = null;
		if(dbProperties_tMysqlOutput_6 == null || dbProperties_tMysqlOutput_6.trim().length() == 0) {
			url_tMysqlOutput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_6 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_6.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_6 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_6;
		}
		String driverClass_tMysqlOutput_6 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_6 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[9i4LhxulOgWZkyRTDLGUbvB/GPK0sYgIDHeFC7p5EQQmWvQU]");

		String dbPwd_tMysqlOutput_6 = decryptedPassword_tMysqlOutput_6;
		java.lang.Class.forName(driverClass_tMysqlOutput_6);
		
		conn_tMysqlOutput_6 = java.sql.DriverManager.getConnection(url_tMysqlOutput_6, dbUser_tMysqlOutput_6, dbPwd_tMysqlOutput_6);
		
	
	resourceMap.put("conn_tMysqlOutput_6", conn_tMysqlOutput_6);
        conn_tMysqlOutput_6.setAutoCommit(false);
        int commitEvery_tMysqlOutput_6 = 10000;
        int commitCounter_tMysqlOutput_6 = 0;
   int batchSize_tMysqlOutput_6 = 10000;
   int batchSizeCounter_tMysqlOutput_6=0;

int count_tMysqlOutput_6=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_6 = conn_tMysqlOutput_6.getMetaData();
                                boolean whetherExist_tMysqlOutput_6 = false;
                                try (java.sql.ResultSet rsTable_tMysqlOutput_6 = dbMetaData_tMysqlOutput_6.getTables("WAReporting", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tMysqlOutput_6.next()) {
                                        String table_tMysqlOutput_6 = rsTable_tMysqlOutput_6.getString("TABLE_NAME");
                                        if(table_tMysqlOutput_6.equalsIgnoreCase("swc_import_rejection")) {
                                            whetherExist_tMysqlOutput_6 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tMysqlOutput_6) {
                                    try (java.sql.Statement stmtCreate_tMysqlOutput_6 = conn_tMysqlOutput_6.createStatement()) {
                                        stmtCreate_tMysqlOutput_6.execute("CREATE TABLE `" + tableName_tMysqlOutput_6 + "`(`id` INT(0)  ,primary key(`id`))");
                                    }
                                }
	    String update_tMysqlOutput_6 = "UPDATE `" + "swc_import_rejection" + "` SET  WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_6 = conn_tMysqlOutput_6.prepareStatement(update_tMysqlOutput_6);
	    resourceMap.put("pstmt_tMysqlOutput_6", pstmt_tMysqlOutput_6);
	    

 



/**
 * [tMysqlOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOflocation_ids_updateStruct copyOfcopyOfcopyOflocation_ids_update_tmp = new copyOfcopyOfcopyOflocation_ids_updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMysqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_7", false);
		start_Hash.put("tMysqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_7";

	
		int tos_count_tMysqlInput_7 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7.getTime();
		    int nb_line_tMysqlInput_7 = 0;
		    java.sql.Connection conn_tMysqlInput_7 = null;
				String driverClass_tMysqlInput_7 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_7 = java.lang.Class.forName(driverClass_tMysqlInput_7);
					String dbUser_tMysqlInput_7 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[kt0mxoBXJ+XmmVcSbjSOU0ztRF6Ga9gofHC9HM/skK9CA16M]");
					
					String dbPwd_tMysqlInput_7 = decryptedPassword_tMysqlInput_7;
				
				String url_tMysqlInput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(url_tMysqlInput_7,dbUser_tMysqlInput_7,dbPwd_tMysqlInput_7);
		        
		    
			java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7.createStatement();

		    String dbquery_tMysqlInput_7 = "select sir.id\nfrom swc_import_rejection sir\nleft join dim_block b on b.block_id = sir.block_id\nwhere sir.modification_d"
+"ate > '"+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_7_QUERY",dbquery_tMysqlInput_7);
		    java.sql.ResultSet rs_tMysqlInput_7 = null;

		    try {
		    	rs_tMysqlInput_7 = stmt_tMysqlInput_7.executeQuery(dbquery_tMysqlInput_7);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7.getMetaData();
		    	int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7.getColumnCount();

		    String tmpContent_tMysqlInput_7 = null;
		    
		    
		    while (rs_tMysqlInput_7.next()) {
		        nb_line_tMysqlInput_7++;
		        
							if(colQtyInRs_tMysqlInput_7 < 1) {
								row8.id = null;
							} else {
		                          
            row8.id = rs_tMysqlInput_7.getInt(1);
            if(rs_tMysqlInput_7.wasNull()){
                    row8.id = null;
            }
		                    }
					

 



/**
 * [tMysqlInput_7 begin ] stop
 */
	
	/**
	 * [tMysqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 


	tos_count_tMysqlInput_7++;

/**
 * [tMysqlInput_7 main ] stop
 */
	
	/**
	 * [tMysqlInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOflocation_ids_update = null;


// # Output table : 'copyOfcopyOfcopyOflocation_ids_update'
copyOfcopyOfcopyOflocation_ids_update_tmp.id = row8.id ;
copyOfcopyOfcopyOflocation_ids_update = copyOfcopyOfcopyOflocation_ids_update_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOflocation_ids_update"
if(copyOfcopyOfcopyOflocation_ids_update != null) { 



	
	/**
	 * [tMysqlOutput_6 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOflocation_ids_update");
					}
					



        whetherReject_tMysqlOutput_6 = false;

                    if(copyOfcopyOfcopyOflocation_ids_update.id == null) {
pstmt_tMysqlOutput_6.setNull(1 + count_tMysqlOutput_6, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_6.setInt(1 + count_tMysqlOutput_6, copyOfcopyOfcopyOflocation_ids_update.id);
}


            pstmt_tMysqlOutput_6.addBatch();
            nb_line_tMysqlOutput_6++;

              batchSizeCounter_tMysqlOutput_6++;
            if(!whetherReject_tMysqlOutput_6) {
            }
                if ( batchSize_tMysqlOutput_6 <= batchSizeCounter_tMysqlOutput_6) {
                try {
                        int countSum_tMysqlOutput_6 = 0;
                        for(int countEach_tMysqlOutput_6: pstmt_tMysqlOutput_6.executeBatch()) {
                            countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0 : countEach_tMysqlOutput_6);
                        }
                        updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;
                        batchSizeCounter_tMysqlOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_6 = 0;
                    for(int countEach_tMysqlOutput_6: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0 : countEach_tMysqlOutput_6);
                    }
                    updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;
                    System.err.println(e.getMessage());
                }



                }
                commitCounter_tMysqlOutput_6++;

                if(commitEvery_tMysqlOutput_6 <= commitCounter_tMysqlOutput_6) {

                try {
                        int countSum_tMysqlOutput_6 = 0;
                        for(int countEach_tMysqlOutput_6: pstmt_tMysqlOutput_6.executeBatch()) {
                            countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0 : countEach_tMysqlOutput_6);
                        }
                        updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_6 = 0;
                    for(int countEach_tMysqlOutput_6: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0 : countEach_tMysqlOutput_6);
                    }
                    updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_6.commit();
                    commitCounter_tMysqlOutput_6=0;

                }


 


	tos_count_tMysqlOutput_6++;

/**
 * [tMysqlOutput_6 main ] stop
 */
	
	/**
	 * [tMysqlOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	

 



/**
 * [tMysqlOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	

 



/**
 * [tMysqlOutput_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOflocation_ids_update"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

	}
}finally{
	if (rs_tMysqlInput_7 != null) {
		rs_tMysqlInput_7.close();
	}
	if (stmt_tMysqlInput_7 != null) {
		stmt_tMysqlInput_7.close();
	}
		if(conn_tMysqlInput_7 != null && !conn_tMysqlInput_7.isClosed()) {
			
			conn_tMysqlInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_7_NB_LINE",nb_line_tMysqlInput_7);
		


 

ok_Hash.put("tMysqlInput_7", true);
end_Hash.put("tMysqlInput_7", System.currentTimeMillis());




/**
 * [tMysqlInput_7 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMysqlOutput_6 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	



	
    try {
    	if(pstmt_tMysqlOutput_6 != null){
			int countSum_tMysqlOutput_6 = 0;
			
			for(int countEach_tMysqlOutput_6: pstmt_tMysqlOutput_6.executeBatch()) {
				countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0 : countEach_tMysqlOutput_6);
			}
			
	    	
	    		updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_6 = 0;
		for(int countEach_tMysqlOutput_6: e.getUpdateCounts()) {
			countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0 : countEach_tMysqlOutput_6);
		}
		
    	updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_6 != null) {
			
				pstmt_tMysqlOutput_6.close();
				resourceMap.remove("pstmt_tMysqlOutput_6");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_6", true);
    	if (commitCounter_tMysqlOutput_6 > 0) {
    		
    		conn_tMysqlOutput_6.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_6 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_6", true);
    	

	nb_line_deleted_tMysqlOutput_6=nb_line_deleted_tMysqlOutput_6+ deletedCount_tMysqlOutput_6;
	nb_line_update_tMysqlOutput_6=nb_line_update_tMysqlOutput_6 + updatedCount_tMysqlOutput_6;
	nb_line_inserted_tMysqlOutput_6=nb_line_inserted_tMysqlOutput_6 + insertedCount_tMysqlOutput_6;
	nb_line_rejected_tMysqlOutput_6=nb_line_rejected_tMysqlOutput_6 + rejectedCount_tMysqlOutput_6;
	
        globalMap.put("tMysqlOutput_6_NB_LINE",nb_line_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_6);
        globalMap.put("tMysqlOutput_6_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_6);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOflocation_ids_update");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_6", true);
end_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tMysqlInput_8Process(globalMap);



/**
 * [tMysqlOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_7";

	

 



/**
 * [tMysqlInput_7 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_6 = null;
                if ((pstmtToClose_tMysqlOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_6")) != null) {
                    pstmtToClose_tMysqlOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_6") == null){
            java.sql.Connection ctn_tMysqlOutput_6 = null;
            if((ctn_tMysqlOutput_6 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_6")) != null){
                try {
                    ctn_tMysqlOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_6) {
                    String errorMessage_tMysqlOutput_6 = "failed to close the connection in tMysqlOutput_6 :" + sqlEx_tMysqlOutput_6.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_6);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct other = (copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_SWC_Rejection_Records = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_SWC_Rejection_Records) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct copyOfcopyOfcopyOfcopyOflocation_ids_update = new copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct();





	
	/**
	 * [tMysqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_7", false);
		start_Hash.put("tMysqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOflocation_ids_update");
					}
				
		int tos_count_tMysqlOutput_7 = 0;
		





        int updateKeyCount_tMysqlOutput_7 = 1;
        if(updateKeyCount_tMysqlOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_7 = 0;
int nb_line_update_tMysqlOutput_7 = 0;
int nb_line_inserted_tMysqlOutput_7 = 0;
int nb_line_deleted_tMysqlOutput_7 = 0;
int nb_line_rejected_tMysqlOutput_7 = 0;

int deletedCount_tMysqlOutput_7=0;
int updatedCount_tMysqlOutput_7=0;
int insertedCount_tMysqlOutput_7=0;

int rejectedCount_tMysqlOutput_7=0;

String tableName_tMysqlOutput_7 = "swc_import_rejection";
boolean whetherReject_tMysqlOutput_7 = false;

java.util.Calendar calendar_tMysqlOutput_7 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime().getTime();
calendar_tMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime().getTime();
long date_tMysqlOutput_7;

java.sql.Connection conn_tMysqlOutput_7 = null;
		String dbProperties_tMysqlOutput_7 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_7 = null;
		if(dbProperties_tMysqlOutput_7 == null || dbProperties_tMysqlOutput_7.trim().length() == 0) {
			url_tMysqlOutput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_7 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_7.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_7 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_7;
		}
		String driverClass_tMysqlOutput_7 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_7 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[KaTPUTP2OQE+ZqpaYngdETh9W6qaVMYYW59vevk/LJxMRdrc]");

		String dbPwd_tMysqlOutput_7 = decryptedPassword_tMysqlOutput_7;
		java.lang.Class.forName(driverClass_tMysqlOutput_7);
		
		conn_tMysqlOutput_7 = java.sql.DriverManager.getConnection(url_tMysqlOutput_7, dbUser_tMysqlOutput_7, dbPwd_tMysqlOutput_7);
		
	
	resourceMap.put("conn_tMysqlOutput_7", conn_tMysqlOutput_7);
        conn_tMysqlOutput_7.setAutoCommit(false);
        int commitEvery_tMysqlOutput_7 = 10000;
        int commitCounter_tMysqlOutput_7 = 0;
   int batchSize_tMysqlOutput_7 = 10000;
   int batchSizeCounter_tMysqlOutput_7=0;

int count_tMysqlOutput_7=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_7 = conn_tMysqlOutput_7.getMetaData();
                                boolean whetherExist_tMysqlOutput_7 = false;
                                try (java.sql.ResultSet rsTable_tMysqlOutput_7 = dbMetaData_tMysqlOutput_7.getTables("WAReporting", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tMysqlOutput_7.next()) {
                                        String table_tMysqlOutput_7 = rsTable_tMysqlOutput_7.getString("TABLE_NAME");
                                        if(table_tMysqlOutput_7.equalsIgnoreCase("swc_import_rejection")) {
                                            whetherExist_tMysqlOutput_7 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tMysqlOutput_7) {
                                    try (java.sql.Statement stmtCreate_tMysqlOutput_7 = conn_tMysqlOutput_7.createStatement()) {
                                        stmtCreate_tMysqlOutput_7.execute("CREATE TABLE `" + tableName_tMysqlOutput_7 + "`(`id` INT(0)  ,primary key(`id`))");
                                    }
                                }
	    String update_tMysqlOutput_7 = "UPDATE `" + "swc_import_rejection" + "` SET  WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tMysqlOutput_7 = conn_tMysqlOutput_7.prepareStatement(update_tMysqlOutput_7);
	    resourceMap.put("pstmt_tMysqlOutput_7", pstmt_tMysqlOutput_7);
	    

 



/**
 * [tMysqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct copyOfcopyOfcopyOfcopyOflocation_ids_update_tmp = new copyOfcopyOfcopyOfcopyOflocation_ids_updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMysqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_8", false);
		start_Hash.put("tMysqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_8";

	
		int tos_count_tMysqlInput_8 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_8 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_8.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_8 = calendar_tMysqlInput_8.getTime();
		    int nb_line_tMysqlInput_8 = 0;
		    java.sql.Connection conn_tMysqlInput_8 = null;
				String driverClass_tMysqlInput_8 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_8 = java.lang.Class.forName(driverClass_tMysqlInput_8);
					String dbUser_tMysqlInput_8 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[K8g1b+C6eAQM0tZlnSLs8gcrwUBkA1vinRoibxypSIEIqAmX]");
					
					String dbPwd_tMysqlInput_8 = decryptedPassword_tMysqlInput_8;
				
				String url_tMysqlInput_8 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_8 = java.sql.DriverManager.getConnection(url_tMysqlInput_8,dbUser_tMysqlInput_8,dbPwd_tMysqlInput_8);
		        
		    
			java.sql.Statement stmt_tMysqlInput_8 = conn_tMysqlInput_8.createStatement();

		    String dbquery_tMysqlInput_8 = "select b.id\nfrom swc_import_rejection b\nwhere b.modification_date > '"+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_8_QUERY",dbquery_tMysqlInput_8);
		    java.sql.ResultSet rs_tMysqlInput_8 = null;

		    try {
		    	rs_tMysqlInput_8 = stmt_tMysqlInput_8.executeQuery(dbquery_tMysqlInput_8);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_8 = rs_tMysqlInput_8.getMetaData();
		    	int colQtyInRs_tMysqlInput_8 = rsmd_tMysqlInput_8.getColumnCount();

		    String tmpContent_tMysqlInput_8 = null;
		    
		    
		    while (rs_tMysqlInput_8.next()) {
		        nb_line_tMysqlInput_8++;
		        
							if(colQtyInRs_tMysqlInput_8 < 1) {
								row9.id = null;
							} else {
		                          
            row9.id = rs_tMysqlInput_8.getInt(1);
            if(rs_tMysqlInput_8.wasNull()){
                    row9.id = null;
            }
		                    }
					

 



/**
 * [tMysqlInput_8 begin ] stop
 */
	
	/**
	 * [tMysqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 


	tos_count_tMysqlInput_8++;

/**
 * [tMysqlInput_8 main ] stop
 */
	
	/**
	 * [tMysqlInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOflocation_ids_update = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOflocation_ids_update'
copyOfcopyOfcopyOfcopyOflocation_ids_update_tmp.id = row9.id ;
copyOfcopyOfcopyOfcopyOflocation_ids_update = copyOfcopyOfcopyOfcopyOflocation_ids_update_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOflocation_ids_update"
if(copyOfcopyOfcopyOfcopyOflocation_ids_update != null) { 



	
	/**
	 * [tMysqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOflocation_ids_update");
					}
					



        whetherReject_tMysqlOutput_7 = false;

                    if(copyOfcopyOfcopyOfcopyOflocation_ids_update.id == null) {
pstmt_tMysqlOutput_7.setNull(1 + count_tMysqlOutput_7, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_7.setInt(1 + count_tMysqlOutput_7, copyOfcopyOfcopyOfcopyOflocation_ids_update.id);
}


            pstmt_tMysqlOutput_7.addBatch();
            nb_line_tMysqlOutput_7++;

              batchSizeCounter_tMysqlOutput_7++;
            if(!whetherReject_tMysqlOutput_7) {
            }
                if ( batchSize_tMysqlOutput_7 <= batchSizeCounter_tMysqlOutput_7) {
                try {
                        int countSum_tMysqlOutput_7 = 0;
                        for(int countEach_tMysqlOutput_7: pstmt_tMysqlOutput_7.executeBatch()) {
                            countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0 : countEach_tMysqlOutput_7);
                        }
                        updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;
                        batchSizeCounter_tMysqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_7 = 0;
                    for(int countEach_tMysqlOutput_7: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0 : countEach_tMysqlOutput_7);
                    }
                    updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;
                    System.err.println(e.getMessage());
                }



                }
                commitCounter_tMysqlOutput_7++;

                if(commitEvery_tMysqlOutput_7 <= commitCounter_tMysqlOutput_7) {

                try {
                        int countSum_tMysqlOutput_7 = 0;
                        for(int countEach_tMysqlOutput_7: pstmt_tMysqlOutput_7.executeBatch()) {
                            countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0 : countEach_tMysqlOutput_7);
                        }
                        updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_7 = 0;
                    for(int countEach_tMysqlOutput_7: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0 : countEach_tMysqlOutput_7);
                    }
                    updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_7.commit();
                    commitCounter_tMysqlOutput_7=0;

                }


 


	tos_count_tMysqlOutput_7++;

/**
 * [tMysqlOutput_7 main ] stop
 */
	
	/**
	 * [tMysqlOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	

 



/**
 * [tMysqlOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	

 



/**
 * [tMysqlOutput_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOflocation_ids_update"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

	}
}finally{
	if (rs_tMysqlInput_8 != null) {
		rs_tMysqlInput_8.close();
	}
	if (stmt_tMysqlInput_8 != null) {
		stmt_tMysqlInput_8.close();
	}
		if(conn_tMysqlInput_8 != null && !conn_tMysqlInput_8.isClosed()) {
			
			conn_tMysqlInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_8_NB_LINE",nb_line_tMysqlInput_8);
		


 

ok_Hash.put("tMysqlInput_8", true);
end_Hash.put("tMysqlInput_8", System.currentTimeMillis());




/**
 * [tMysqlInput_8 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMysqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	



	
    try {
    	if(pstmt_tMysqlOutput_7 != null){
			int countSum_tMysqlOutput_7 = 0;
			
			for(int countEach_tMysqlOutput_7: pstmt_tMysqlOutput_7.executeBatch()) {
				countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0 : countEach_tMysqlOutput_7);
			}
			
	    	
	    		updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tMysqlOutput_7 = 0;
		for(int countEach_tMysqlOutput_7: e.getUpdateCounts()) {
			countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0 : countEach_tMysqlOutput_7);
		}
		
    	updatedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tMysqlOutput_7 != null) {
			
				pstmt_tMysqlOutput_7.close();
				resourceMap.remove("pstmt_tMysqlOutput_7");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_7", true);
    	if (commitCounter_tMysqlOutput_7 > 0) {
    		
    		conn_tMysqlOutput_7.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_7 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_7", true);
    	

	nb_line_deleted_tMysqlOutput_7=nb_line_deleted_tMysqlOutput_7+ deletedCount_tMysqlOutput_7;
	nb_line_update_tMysqlOutput_7=nb_line_update_tMysqlOutput_7 + updatedCount_tMysqlOutput_7;
	nb_line_inserted_tMysqlOutput_7=nb_line_inserted_tMysqlOutput_7 + insertedCount_tMysqlOutput_7;
	nb_line_rejected_tMysqlOutput_7=nb_line_rejected_tMysqlOutput_7 + rejectedCount_tMysqlOutput_7;
	
        globalMap.put("tMysqlOutput_7_NB_LINE",nb_line_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_7);
        globalMap.put("tMysqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_7);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOflocation_ids_update");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_7", true);
end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tMysqlRow_1Process(globalMap);



/**
 * [tMysqlOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_8";

	

 



/**
 * [tMysqlInput_8 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_7";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_7 = null;
                if ((pstmtToClose_tMysqlOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_7")) != null) {
                    pstmtToClose_tMysqlOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_7") == null){
            java.sql.Connection ctn_tMysqlOutput_7 = null;
            if((ctn_tMysqlOutput_7 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_7")) != null){
                try {
                    ctn_tMysqlOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_7) {
                    String errorMessage_tMysqlOutput_7 = "failed to close the connection in tMysqlOutput_7 :" + sqlEx_tMysqlOutput_7.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_7);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlRow_1", false);
		start_Hash.put("tMysqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlRow_1";

	
		int tos_count_tMysqlRow_1 = 0;
		

	java.sql.Connection conn_tMysqlRow_1 = null;
	String query_tMysqlRow_1 = "";
	boolean whetherReject_tMysqlRow_1 = false;
			String driverClass_tMysqlRow_1 = "com.mysql.jdbc.Driver";
		    java.lang.Class jdbcclazz_tMysqlRow_1 = java.lang.Class.forName(driverClass_tMysqlRow_1);
		
				String url_tMysqlRow_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
					String dbUser_tMysqlRow_1 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tMysqlRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[RzHZlYcxQtXc+G7cgUTm/BU9Wi+XguBcwS57Fe47O50grCDC]");
        		   	
        	        String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;
	        
					
			conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(url_tMysqlRow_1,dbUser_tMysqlRow_1,dbPwd_tMysqlRow_1);
		
    resourceMap.put("conn_tMysqlRow_1", conn_tMysqlRow_1);
					if(conn_tMysqlRow_1.getAutoCommit()) {
						
				conn_tMysqlRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tMysqlRow_1 = 10000;
					int commitCounter_tMysqlRow_1 = 0;
				
        java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1.createStatement();
        resourceMap.put("stmt_tMysqlRow_1", stmt_tMysqlRow_1);

 



/**
 * [tMysqlRow_1 begin ] stop
 */
	
	/**
	 * [tMysqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

query_tMysqlRow_1 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT MAX(modification_date) FROM swc_import_rejection),\nETL"
+"_info_table.record_count= (select count(*) from swc_import_rejection)\nWHERE ETL_info_table.table_id = 9";
whetherReject_tMysqlRow_1 = false;
globalMap.put("tMysqlRow_1_QUERY",query_tMysqlRow_1);
try {
		stmt_tMysqlRow_1.execute(query_tMysqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMysqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tMysqlRow_1++;
		if(commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {
			
			conn_tMysqlRow_1.commit();
			
			commitCounter_tMysqlRow_1=0;
		}
		

 


	tos_count_tMysqlRow_1++;

/**
 * [tMysqlRow_1 main ] stop
 */
	
	/**
	 * [tMysqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

 



/**
 * [tMysqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

 



/**
 * [tMysqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

	
        stmt_tMysqlRow_1.close();
        resourceMap.remove("stmt_tMysqlRow_1");
    resourceMap.put("statementClosed_tMysqlRow_1", true);
		if(commitEvery_tMysqlRow_1>commitCounter_tMysqlRow_1){

			
			conn_tMysqlRow_1.commit();
			
	
			commitCounter_tMysqlRow_1=0;
	
		}
			conn_tMysqlRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tMysqlRow_1", true);
 

ok_Hash.put("tMysqlRow_1", true);
end_Hash.put("tMysqlRow_1", System.currentTimeMillis());




/**
 * [tMysqlRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

try {
    if (resourceMap.get("statementClosed_tMysqlRow_1") == null) {
            java.sql.Statement stmtToClose_tMysqlRow_1 = null;
            if ((stmtToClose_tMysqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tMysqlRow_1")) != null) {
                stmtToClose_tMysqlRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tMysqlRow_1") == null){
            java.sql.Connection ctn_tMysqlRow_1 = null;
            if((ctn_tMysqlRow_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlRow_1")) != null){
                try {
                    ctn_tMysqlRow_1.close();
                } catch (java.sql.SQLException sqlEx_tMysqlRow_1) {
                    String errorMessage_tMysqlRow_1 = "failed to close the connection in tMysqlRow_1 :" + sqlEx_tMysqlRow_1.getMessage();
                    System.err.println(errorMessage_tMysqlRow_1);
                }
            }
        }
    }
 



/**
 * [tMysqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final SWC_Rejection_Records SWC_Rejection_RecordsClass = new SWC_Rejection_Records();

        int exitCode = SWC_Rejection_RecordsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SWC_Rejection_Records.class.getClassLoader().getResourceAsStream("wash_odf_updated/swc_rejection_records_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SWC_Rejection_Records.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("motech_db_Port", "id_String");
                            context.motech_db_Port=(String) context.getProperty("motech_db_Port");
                        context.setContextType("motech_db_Database", "id_String");
                            context.motech_db_Database=(String) context.getProperty("motech_db_Database");
                        context.setContextType("motech_db_Password", "id_Password");
                            String pwd_motech_db_Password_value = context.getProperty("motech_db_Password");
                            context.motech_db_Password = null;
                            if(pwd_motech_db_Password_value!=null) {
                                if(context_param.containsKey("motech_db_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.motech_db_Password = pwd_motech_db_Password_value;
                                } else if (!pwd_motech_db_Password_value.isEmpty()) {
                                    try {
                                        context.motech_db_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_motech_db_Password_value);
                                        context.put("motech_db_Password",context.motech_db_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("motech_db_Login", "id_String");
                            context.motech_db_Login=(String) context.getProperty("motech_db_Login");
                        context.setContextType("motech_db_Server", "id_String");
                            context.motech_db_Server=(String) context.getProperty("motech_db_Server");
                        context.setContextType("motech_db_AdditionalParams", "id_String");
                            context.motech_db_AdditionalParams=(String) context.getProperty("motech_db_AdditionalParams");
                        context.setContextType("reporting_db_Port", "id_String");
                            context.reporting_db_Port=(String) context.getProperty("reporting_db_Port");
                        context.setContextType("reporting_db_Database", "id_String");
                            context.reporting_db_Database=(String) context.getProperty("reporting_db_Database");
                        context.setContextType("reporting_db_Password", "id_Password");
                            String pwd_reporting_db_Password_value = context.getProperty("reporting_db_Password");
                            context.reporting_db_Password = null;
                            if(pwd_reporting_db_Password_value!=null) {
                                if(context_param.containsKey("reporting_db_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.reporting_db_Password = pwd_reporting_db_Password_value;
                                } else if (!pwd_reporting_db_Password_value.isEmpty()) {
                                    try {
                                        context.reporting_db_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_reporting_db_Password_value);
                                        context.put("reporting_db_Password",context.reporting_db_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("reporting_db_Server", "id_String");
                            context.reporting_db_Server=(String) context.getProperty("reporting_db_Server");
                        context.setContextType("reporting_db_Login", "id_String");
                            context.reporting_db_Login=(String) context.getProperty("reporting_db_Login");
                        context.setContextType("reporting_db_AdditionalParams", "id_String");
                            context.reporting_db_AdditionalParams=(String) context.getProperty("reporting_db_AdditionalParams");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("motech_db_Port")) {
                context.motech_db_Port = (String) parentContextMap.get("motech_db_Port");
            }if (parentContextMap.containsKey("motech_db_Database")) {
                context.motech_db_Database = (String) parentContextMap.get("motech_db_Database");
            }if (parentContextMap.containsKey("motech_db_Password")) {
                context.motech_db_Password = (java.lang.String) parentContextMap.get("motech_db_Password");
            }if (parentContextMap.containsKey("motech_db_Login")) {
                context.motech_db_Login = (String) parentContextMap.get("motech_db_Login");
            }if (parentContextMap.containsKey("motech_db_Server")) {
                context.motech_db_Server = (String) parentContextMap.get("motech_db_Server");
            }if (parentContextMap.containsKey("motech_db_AdditionalParams")) {
                context.motech_db_AdditionalParams = (String) parentContextMap.get("motech_db_AdditionalParams");
            }if (parentContextMap.containsKey("reporting_db_Port")) {
                context.reporting_db_Port = (String) parentContextMap.get("reporting_db_Port");
            }if (parentContextMap.containsKey("reporting_db_Database")) {
                context.reporting_db_Database = (String) parentContextMap.get("reporting_db_Database");
            }if (parentContextMap.containsKey("reporting_db_Password")) {
                context.reporting_db_Password = (java.lang.String) parentContextMap.get("reporting_db_Password");
            }if (parentContextMap.containsKey("reporting_db_Server")) {
                context.reporting_db_Server = (String) parentContextMap.get("reporting_db_Server");
            }if (parentContextMap.containsKey("reporting_db_Login")) {
                context.reporting_db_Login = (String) parentContextMap.get("reporting_db_Login");
            }if (parentContextMap.containsKey("reporting_db_AdditionalParams")) {
                context.reporting_db_AdditionalParams = (String) parentContextMap.get("reporting_db_AdditionalParams");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("motech_db_Password");
			parametersToEncrypt.add("reporting_db_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SWC_Rejection_Records");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     299747 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 December, 2019 7:51:20 PM IST
 ************************************************************************************************/