// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_wash_new.wa_call_detail_test_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendStringUtil;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.ReportingHelper;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: WA_Call_Detail_test Purpose: WA_Call_Detail<br>
 * Description: WA_Call_Detail job insert WA cdr data. <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status
 */
public class WA_Call_Detail_test implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (motech_login != null) {

				this.setProperty("motech_login", motech_login.toString());

			}

			if (motech_database != null) {

				this.setProperty("motech_database", motech_database.toString());

			}

			if (motech_port != null) {

				this.setProperty("motech_port", motech_port.toString());

			}

			if (motech_password != null) {

				this.setProperty("motech_password", motech_password.toString());

			}

			if (motech_additionalParams != null) {

				this.setProperty("motech_additionalParams", motech_additionalParams.toString());

			}

			if (motech_server != null) {

				this.setProperty("motech_server", motech_server.toString());

			}

			if (report_port != null) {

				this.setProperty("report_port", report_port.toString());

			}

			if (report_server != null) {

				this.setProperty("report_server", report_server.toString());

			}

			if (report_database != null) {

				this.setProperty("report_database", report_database.toString());

			}

			if (report_login != null) {

				this.setProperty("report_login", report_login.toString());

			}

			if (report_password != null) {

				this.setProperty("report_password", report_password.toString());

			}

			if (report_AdditionalParams != null) {

				this.setProperty("report_AdditionalParams", report_AdditionalParams.toString());

			}

			if (reporting_db_Password != null) {

				this.setProperty("reporting_db_Password", reporting_db_Password.toString());

			}

			if (reporting_db_Server != null) {

				this.setProperty("reporting_db_Server", reporting_db_Server.toString());

			}

			if (reporting_db_Login != null) {

				this.setProperty("reporting_db_Login", reporting_db_Login.toString());

			}

			if (reporting_db_Database != null) {

				this.setProperty("reporting_db_Database", reporting_db_Database.toString());

			}

			if (reporting_db_AdditionalParams != null) {

				this.setProperty("reporting_db_AdditionalParams", reporting_db_AdditionalParams.toString());

			}

			if (reporting_db_Port != null) {

				this.setProperty("reporting_db_Port", reporting_db_Port.toString());

			}

			if (motech_db_Port != null) {

				this.setProperty("motech_db_Port", motech_db_Port.toString());

			}

			if (motech_db_Login != null) {

				this.setProperty("motech_db_Login", motech_db_Login.toString());

			}

			if (motech_db_Password != null) {

				this.setProperty("motech_db_Password", motech_db_Password.toString());

			}

			if (motech_db_Database != null) {

				this.setProperty("motech_db_Database", motech_db_Database.toString());

			}

			if (motech_db_AdditionalParams != null) {

				this.setProperty("motech_db_AdditionalParams", motech_db_AdditionalParams.toString());

			}

			if (motech_db_Server != null) {

				this.setProperty("motech_db_Server", motech_db_Server.toString());

			}

		}

		public String motech_login;

		public String getMotech_login() {
			return this.motech_login;
		}

		public String motech_database;

		public String getMotech_database() {
			return this.motech_database;
		}

		public String motech_port;

		public String getMotech_port() {
			return this.motech_port;
		}

		public java.lang.String motech_password;

		public java.lang.String getMotech_password() {
			return this.motech_password;
		}

		public String motech_additionalParams;

		public String getMotech_additionalParams() {
			return this.motech_additionalParams;
		}

		public String motech_server;

		public String getMotech_server() {
			return this.motech_server;
		}

		public String report_port;

		public String getReport_port() {
			return this.report_port;
		}

		public String report_server;

		public String getReport_server() {
			return this.report_server;
		}

		public String report_database;

		public String getReport_database() {
			return this.report_database;
		}

		public String report_login;

		public String getReport_login() {
			return this.report_login;
		}

		public java.lang.String report_password;

		public java.lang.String getReport_password() {
			return this.report_password;
		}

		public String report_AdditionalParams;

		public String getReport_AdditionalParams() {
			return this.report_AdditionalParams;
		}

		public java.lang.String reporting_db_Password;

		public java.lang.String getReporting_db_Password() {
			return this.reporting_db_Password;
		}

		public String reporting_db_Server;

		public String getReporting_db_Server() {
			return this.reporting_db_Server;
		}

		public String reporting_db_Login;

		public String getReporting_db_Login() {
			return this.reporting_db_Login;
		}

		public String reporting_db_Database;

		public String getReporting_db_Database() {
			return this.reporting_db_Database;
		}

		public String reporting_db_AdditionalParams;

		public String getReporting_db_AdditionalParams() {
			return this.reporting_db_AdditionalParams;
		}

		public String reporting_db_Port;

		public String getReporting_db_Port() {
			return this.reporting_db_Port;
		}

		public String motech_db_Port;

		public String getMotech_db_Port() {
			return this.motech_db_Port;
		}

		public String motech_db_Login;

		public String getMotech_db_Login() {
			return this.motech_db_Login;
		}

		public java.lang.String motech_db_Password;

		public java.lang.String getMotech_db_Password() {
			return this.motech_db_Password;
		}

		public String motech_db_Database;

		public String getMotech_db_Database() {
			return this.motech_db_Database;
		}

		public String motech_db_AdditionalParams;

		public String getMotech_db_AdditionalParams() {
			return this.motech_db_AdditionalParams;
		}

		public String motech_db_Server;

		public String getMotech_db_Server() {
			return this.motech_db_Server;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "WA_Call_Detail_test";
	private final String projectName = "LOCAL_WASH_NEW";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					WA_Call_Detail_test.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(WA_Call_Detail_test.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt",
								"ISO-8859-15", ";", "\n", true, 0, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row5.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row5.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							//////////////////////////
							String tmp_key_tContextLoad_1 = null;
							String key_tContextLoad_1 = null;
							if (row5.key != null) {
								tmp_key_tContextLoad_1 = row5.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#")
										|| tmp_key_tContextLoad_1.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row5.key = tmp_key_tContextLoad_1;
								}
							}
							if (row5.key != null) {
								key_tContextLoad_1 = row5.key;
							}
							String value_tContextLoad_1 = null;
							if (row5.value != null) {
								value_tContextLoad_1 = row5.value;
							}

							String currentValue_tContextLoad_1 = value_tContextLoad_1;

							if ((key_tContextLoad_1 != null) && ("motech_password".equals(key_tContextLoad_1)))
								currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");
							if ((key_tContextLoad_1 != null) && ("report_password".equals(key_tContextLoad_1)))
								currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");
							if ((key_tContextLoad_1 != null) && ("reporting_db_Password".equals(key_tContextLoad_1)))
								currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");
							if ((key_tContextLoad_1 != null) && ("motech_db_Password".equals(key_tContextLoad_1)))
								currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null && "motech_login".equals(key_tContextLoad_1)) {
										context.motech_login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_database".equals(key_tContextLoad_1)) {
										context.motech_database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_port".equals(key_tContextLoad_1)) {
										context.motech_port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_password".equals(key_tContextLoad_1)) {
										context.motech_password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_additionalParams".equals(key_tContextLoad_1)) {
										context.motech_additionalParams = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_server".equals(key_tContextLoad_1)) {
										context.motech_server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "report_port".equals(key_tContextLoad_1)) {
										context.report_port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "report_server".equals(key_tContextLoad_1)) {
										context.report_server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "report_database".equals(key_tContextLoad_1)) {
										context.report_database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "report_login".equals(key_tContextLoad_1)) {
										context.report_login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "report_password".equals(key_tContextLoad_1)) {
										context.report_password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_AdditionalParams".equals(key_tContextLoad_1)) {
										context.report_AdditionalParams = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "reporting_db_Password".equals(key_tContextLoad_1)) {
										context.reporting_db_Password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "reporting_db_Server".equals(key_tContextLoad_1)) {
										context.reporting_db_Server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "reporting_db_Login".equals(key_tContextLoad_1)) {
										context.reporting_db_Login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "reporting_db_Database".equals(key_tContextLoad_1)) {
										context.reporting_db_Database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "reporting_db_AdditionalParams".equals(key_tContextLoad_1)) {
										context.reporting_db_AdditionalParams = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "reporting_db_Port".equals(key_tContextLoad_1)) {
										context.reporting_db_Port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_db_Port".equals(key_tContextLoad_1)) {
										context.motech_db_Port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_db_Login".equals(key_tContextLoad_1)) {
										context.motech_db_Login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_db_Password".equals(key_tContextLoad_1)) {
										context.motech_db_Password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_db_Database".equals(key_tContextLoad_1)) {
										context.motech_db_Database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_db_AdditionalParams".equals(key_tContextLoad_1)) {
										context.motech_db_AdditionalParams = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null && "motech_db_Server".equals(key_tContextLoad_1)) {
										context.motech_db_Server = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
									}
									if (value_tContextLoad_1 == null) {
										context.setProperty(key_tContextLoad_1, "");
									} else {
										context.setProperty(key_tContextLoad_1, value_tContextLoad_1);
									}
								} catch (java.lang.Exception e) {
									System.err.println("Setting a value for the key \"" + key_tContextLoad_1
											+ "\" has failed. Error message: " + e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							//////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

							/**
							 * [tContextLoad_1 process_data_begin ] start
							 */

							currentComponent = "tContextLoad_1";

							/**
							 * [tContextLoad_1 process_data_begin ] stop
							 */

							/**
							 * [tContextLoad_1 process_data_end ] start
							 */

							currentComponent = "tContextLoad_1";

							/**
							 * [tContextLoad_1 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1,
						newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1,
						noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				parametersToEncrypt_tContextLoad_1.add("motech_password");

				parametersToEncrypt_tContextLoad_1.add("report_password");

				parametersToEncrypt_tContextLoad_1.add("reporting_db_Password");

				parametersToEncrypt_tContextLoad_1.add("motech_db_Password");

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "", "", "",
						"", resumeUtil.convertToJsonText(context, parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMysqlInput_5Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tMysqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public String last_etl_time;

		public String getLast_etl_time() {
			return this.last_etl_time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.last_etl_time = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.last_etl_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("last_etl_time=" + last_etl_time);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_5 begin ] start
				 */

				ok_Hash.put("tMysqlInput_5", false);
				start_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				currentComponent = "tMysqlInput_5";

				int tos_count_tMysqlInput_5 = 0;

				java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5.getTime();
				int nb_line_tMysqlInput_5 = 0;
				java.sql.Connection conn_tMysqlInput_5 = null;
				String driverClass_tMysqlInput_5 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_5 = java.lang.Class.forName(driverClass_tMysqlInput_5);
				String dbUser_tMysqlInput_5 = "root";

				final String decryptedPassword_tMysqlInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[FEoCY2F6y7wflZgyJ9cupp+vfumNftQWtIEIPL/57olq5Nul]");

				String dbPwd_tMysqlInput_5 = decryptedPassword_tMysqlInput_5;

				String url_tMysqlInput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
						+ context.reporting_db_AdditionalParams;

				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(url_tMysqlInput_5, dbUser_tMysqlInput_5,
						dbPwd_tMysqlInput_5);

				java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5.createStatement();

				String dbquery_tMysqlInput_5 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=13";

				globalMap.put("tMysqlInput_5_QUERY", dbquery_tMysqlInput_5);
				java.sql.ResultSet rs_tMysqlInput_5 = null;

				try {
					rs_tMysqlInput_5 = stmt_tMysqlInput_5.executeQuery(dbquery_tMysqlInput_5);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5.getMetaData();
					int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5.getColumnCount();

					String tmpContent_tMysqlInput_5 = null;

					while (rs_tMysqlInput_5.next()) {
						nb_line_tMysqlInput_5++;

						if (colQtyInRs_tMysqlInput_5 < 1) {
							row6.last_etl_time = null;
						} else {

							row6.last_etl_time = routines.system.JDBCUtil.getString(rs_tMysqlInput_5, 1, false);
						}

						/**
						 * [tMysqlInput_5 begin ] stop
						 */

						/**
						 * [tMysqlInput_5 main ] start
						 */

						currentComponent = "tMysqlInput_5";

						tos_count_tMysqlInput_5++;

						/**
						 * [tMysqlInput_5 main ] stop
						 */

						/**
						 * [tMysqlInput_5 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_5";

						/**
						 * [tMysqlInput_5 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

						// Code generated according to input schema and output schema

						globalMap.put("lastEtlTime", row6.last_etl_time != null ? row6.last_etl_time : "");
						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_5 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_5";

						/**
						 * [tMysqlInput_5 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_5 end ] start
						 */

						currentComponent = "tMysqlInput_5";

					}
				} finally {
					if (rs_tMysqlInput_5 != null) {
						rs_tMysqlInput_5.close();
					}
					if (stmt_tMysqlInput_5 != null) {
						stmt_tMysqlInput_5.close();
					}
					if (conn_tMysqlInput_5 != null && !conn_tMysqlInput_5.isClosed()) {

						conn_tMysqlInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_5_NB_LINE", nb_line_tMysqlInput_5);

				ok_Hash.put("tMysqlInput_5", true);
				end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				/**
				 * [tMysqlInput_5 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_5 finally ] start
				 */

				currentComponent = "tMysqlInput_5";

				/**
				 * [tMysqlInput_5 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class insert_ma_flw_cdrStruct implements routines.system.IPersistableRow<insert_ma_flw_cdrStruct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Long flw_id;

		public Long getFlw_id() {
			return this.flw_id;
		}

		public Long calling_msisdn;

		public Long getCalling_msisdn() {
			return this.calling_msisdn;
		}

		public Long operator_id;

		public Long getOperator_id() {
			return this.operator_id;
		}

		public Long circle_id;

		public Long getCircle_id() {
			return this.circle_id;
		}

		public java.util.Date start_time;

		public java.util.Date getStart_time() {
			return this.start_time;
		}

		public java.util.Date end_time;

		public java.util.Date getEnd_time() {
			return this.end_time;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public Integer duration_in_pulse;

		public Integer getDuration_in_pulse() {
			return this.duration_in_pulse;
		}

		public String call_id;

		public String getCall_id() {
			return this.call_id;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_ma_flw_cdrStruct other = (insert_ma_flw_cdrStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(insert_ma_flw_cdrStruct other) {

			other.id = this.id;
			other.flw_id = this.flw_id;
			other.calling_msisdn = this.calling_msisdn;
			other.operator_id = this.operator_id;
			other.circle_id = this.circle_id;
			other.start_time = this.start_time;
			other.end_time = this.end_time;
			other.duration = this.duration;
			other.duration_in_pulse = this.duration_in_pulse;
			other.call_id = this.call_id;
			other.modificationDate = this.modificationDate;

		}

		public void copyKeysDataTo(insert_ma_flw_cdrStruct other) {

			other.id = this.id;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.flw_id = null;
					} else {
						this.flw_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.calling_msisdn = null;
					} else {
						this.calling_msisdn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.operator_id = null;
					} else {
						this.operator_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.circle_id = null;
					} else {
						this.circle_id = dis.readLong();
					}

					this.start_time = readDate(dis);

					this.end_time = readDate(dis);

					this.duration = readInteger(dis);

					this.duration_in_pulse = readInteger(dis);

					this.call_id = readString(dis);

					this.modificationDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Long

				if (this.flw_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flw_id);
				}

				// Long

				if (this.calling_msisdn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.calling_msisdn);
				}

				// Long

				if (this.operator_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.operator_id);
				}

				// Long

				if (this.circle_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.circle_id);
				}

				// java.util.Date

				writeDate(this.start_time, dos);

				// java.util.Date

				writeDate(this.end_time, dos);

				// Integer

				writeInteger(this.duration, dos);

				// Integer

				writeInteger(this.duration_in_pulse, dos);

				// String

				writeString(this.call_id, dos);

				// String

				writeString(this.modificationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",flw_id=" + String.valueOf(flw_id));
			sb.append(",calling_msisdn=" + String.valueOf(calling_msisdn));
			sb.append(",operator_id=" + String.valueOf(operator_id));
			sb.append(",circle_id=" + String.valueOf(circle_id));
			sb.append(",start_time=" + String.valueOf(start_time));
			sb.append(",end_time=" + String.valueOf(end_time));
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",duration_in_pulse=" + String.valueOf(duration_in_pulse));
			sb.append(",call_id=" + call_id);
			sb.append(",modificationDate=" + modificationDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_ma_flw_cdrStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public Long flw_id;

		public Long getFlw_id() {
			return this.flw_id;
		}

		public Long callingNumber;

		public Long getCallingNumber() {
			return this.callingNumber;
		}

		public String operator;

		public String getOperator() {
			return this.operator;
		}

		public Long circle_id;

		public Long getCircle_id() {
			return this.circle_id;
		}

		public java.util.Date callStartTime;

		public java.util.Date getCallStartTime() {
			return this.callStartTime;
		}

		public java.util.Date callEndTime;

		public java.util.Date getCallEndTime() {
			return this.callEndTime;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public Integer callDurationInPulses;

		public Integer getCallDurationInPulses() {
			return this.callDurationInPulses;
		}

		public String callId;

		public String getCallId() {
			return this.callId;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.flw_id = null;
					} else {
						this.flw_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.callingNumber = null;
					} else {
						this.callingNumber = dis.readLong();
					}

					this.operator = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.circle_id = null;
					} else {
						this.circle_id = dis.readLong();
					}

					this.callStartTime = readDate(dis);

					this.callEndTime = readDate(dis);

					this.duration = readInteger(dis);

					this.callDurationInPulses = readInteger(dis);

					this.callId = readString(dis);

					this.modificationDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Long

				if (this.flw_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flw_id);
				}

				// Long

				if (this.callingNumber == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.callingNumber);
				}

				// String

				writeString(this.operator, dos);

				// Long

				if (this.circle_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.circle_id);
				}

				// java.util.Date

				writeDate(this.callStartTime, dos);

				// java.util.Date

				writeDate(this.callEndTime, dos);

				// Integer

				writeInteger(this.duration, dos);

				// Integer

				writeInteger(this.callDurationInPulses, dos);

				// String

				writeString(this.callId, dos);

				// String

				writeString(this.modificationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",flw_id=" + String.valueOf(flw_id));
			sb.append(",callingNumber=" + String.valueOf(callingNumber));
			sb.append(",operator=" + operator);
			sb.append(",circle_id=" + String.valueOf(circle_id));
			sb.append(",callStartTime=" + String.valueOf(callStartTime));
			sb.append(",callEndTime=" + String.valueOf(callEndTime));
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",callDurationInPulses=" + String.valueOf(callDurationInPulses));
			sb.append(",callId=" + callId);
			sb.append(",modificationDate=" + modificationDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				insert_ma_flw_cdrStruct insert_ma_flw_cdr = new insert_ma_flw_cdrStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "insert_ma_flw_cdr");
				}

				int tos_count_tMysqlOutput_1 = 0;

				int updateKeyCount_tMysqlOutput_1 = 1;
				if (updateKeyCount_tMysqlOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "WA_call_detail_measure";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
					if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ properties_tMysqlOutput_1;
				}
				String driverClass_tMysqlOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[WBifVoTkt6CmtIXctUgq4RiesXWVqqjr31hfMm67a7iBMV2B]");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
				java.lang.Class.forName(driverClass_tMysqlOutput_1);

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "WA_call_detail_measure" + "` WHERE `id` = ?");
				resourceMap.put("pstmt_tMysqlOutput_1", pstmt_tMysqlOutput_1);
				String insert_tMysqlOutput_1 = "INSERT INTO `" + "WA_call_detail_measure"
						+ "` (`id`,`flw_id`,`calling_msisdn`,`operator_id`,`circle_id`,`start_time`,`end_time`,`duration`,`duration_in_pulse`,`call_id`,`modificationDate`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);
				resourceMap.put("pstmtInsert_tMysqlOutput_1", pstmtInsert_tMysqlOutput_1);
				String update_tMysqlOutput_1 = "UPDATE `" + "WA_call_detail_measure"
						+ "` SET `flw_id` = ?,`calling_msisdn` = ?,`operator_id` = ?,`circle_id` = ?,`start_time` = ?,`end_time` = ?,`duration` = ?,`duration_in_pulse` = ?,`call_id` = ?,`modificationDate` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(update_tMysqlOutput_1);
				resourceMap.put("pstmtUpdate_tMysqlOutput_1", pstmtUpdate_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				insert_ma_flw_cdrStruct insert_ma_flw_cdr_tmp = new insert_ma_flw_cdrStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_1 = java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[eMoZx3CoYywLUVL42TvxFRmScQ9AIYTO9zQvU/WD8R+/YQfs]");

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services"
						+ "?" + context.motech_db_AdditionalParams;

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT cdr.id,cdr.swachchagrahi_id_OID as 'flw_id',cdr.callingNumber,\ncdr.operator,cir.id as circle_id,cdr.callStartTim"
						+ "e,cdr.callEndTime,\nTIMESTAMPDIFF(SECOND,cdr.callStartTime, cdr.callEndTime) as 'duration',\ncdr.callDurationInPulses,cdr."
						+ "callId,\ncdr.modificationDate\nFROM wash_swachgrahi_cdrs cdr\nJOIN wash_circles cir on cdr.circle=cir.name\nWHERE cdr.servic"
						+ "e='WASH_ACADEMY' \nAND cdr.creationDate>'" + (String) globalMap.get("lastEtlTime")
						+ "'\nORDER BY cdr.creationDate ASC";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;

				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.id = 0;
						} else {

							row1.id = rs_tMysqlInput_1.getLong(1);
							if (rs_tMysqlInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.flw_id = null;
						} else {

							row1.flw_id = rs_tMysqlInput_1.getLong(2);
							if (rs_tMysqlInput_1.wasNull()) {
								row1.flw_id = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.callingNumber = null;
						} else {

							row1.callingNumber = rs_tMysqlInput_1.getLong(3);
							if (rs_tMysqlInput_1.wasNull()) {
								row1.callingNumber = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.operator = null;
						} else {

							row1.operator = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 4, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.circle_id = null;
						} else {

							row1.circle_id = rs_tMysqlInput_1.getLong(5);
							if (rs_tMysqlInput_1.wasNull()) {
								row1.circle_id = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 6) {
							row1.callStartTime = null;
						} else {

							if (rs_tMysqlInput_1.getString(6) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(6);
								if (!("0000-00-00").equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
									row1.callStartTime = rs_tMysqlInput_1.getTimestamp(6);
								} else {
									row1.callStartTime = (java.util.Date) year0_tMysqlInput_1.clone();
								}
							} else {
								row1.callStartTime = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 7) {
							row1.callEndTime = null;
						} else {

							if (rs_tMysqlInput_1.getString(7) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(7);
								if (!("0000-00-00").equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
									row1.callEndTime = rs_tMysqlInput_1.getTimestamp(7);
								} else {
									row1.callEndTime = (java.util.Date) year0_tMysqlInput_1.clone();
								}
							} else {
								row1.callEndTime = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 8) {
							row1.duration = null;
						} else {

							row1.duration = rs_tMysqlInput_1.getInt(8);
							if (rs_tMysqlInput_1.wasNull()) {
								row1.duration = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 9) {
							row1.callDurationInPulses = null;
						} else {

							row1.callDurationInPulses = rs_tMysqlInput_1.getInt(9);
							if (rs_tMysqlInput_1.wasNull()) {
								row1.callDurationInPulses = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 10) {
							row1.callId = null;
						} else {

							row1.callId = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 10, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 11) {
							row1.modificationDate = null;
						} else {

							row1.modificationDate = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMysqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_1";

						/**
						 * [tMysqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							insert_ma_flw_cdr = null;

// # Output table : 'insert_ma_flw_cdr'
							insert_ma_flw_cdr_tmp.id = row1.id;
							insert_ma_flw_cdr_tmp.flw_id = row1.flw_id;
							insert_ma_flw_cdr_tmp.calling_msisdn = row1.callingNumber;
							insert_ma_flw_cdr_tmp.operator_id = ReportingHelper.getOperator(row1.operator,
									(java.sql.Connection) resourceMap.get("conn_tMysqlOutput_1"), globalMap);
							insert_ma_flw_cdr_tmp.circle_id = row1.circle_id;
							insert_ma_flw_cdr_tmp.start_time = row1.callStartTime;
							insert_ma_flw_cdr_tmp.end_time = row1.callEndTime;
							insert_ma_flw_cdr_tmp.duration = row1.duration;
							insert_ma_flw_cdr_tmp.duration_in_pulse = row1.callDurationInPulses;
							insert_ma_flw_cdr_tmp.call_id = row1.callId;
							insert_ma_flw_cdr_tmp.modificationDate = row1.modificationDate;
							insert_ma_flw_cdr = insert_ma_flw_cdr_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "insert_ma_flw_cdr"
						if (insert_ma_flw_cdr != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "insert_ma_flw_cdr");
							}

							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setLong(1, insert_ma_flw_cdr.id);

							int checkCount_tMysqlOutput_1 = -1;
							try (java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1.executeQuery()) {
								while (rs_tMysqlOutput_1.next()) {
									checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1.getInt(1);
								}
							}
							if (checkCount_tMysqlOutput_1 > 0) {
								if (insert_ma_flw_cdr.flw_id == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_1.setLong(1, insert_ma_flw_cdr.flw_id);
								}

								if (insert_ma_flw_cdr.calling_msisdn == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_1.setLong(2, insert_ma_flw_cdr.calling_msisdn);
								}

								if (insert_ma_flw_cdr.operator_id == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_1.setLong(3, insert_ma_flw_cdr.operator_id);
								}

								if (insert_ma_flw_cdr.circle_id == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_1.setLong(4, insert_ma_flw_cdr.circle_id);
								}

								if (insert_ma_flw_cdr.start_time != null) {
									date_tMysqlOutput_1 = insert_ma_flw_cdr.start_time.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmtUpdate_tMysqlOutput_1.setString(5, "0000-00-00 00:00:00");
									} else {
										pstmtUpdate_tMysqlOutput_1.setTimestamp(5,
												new java.sql.Timestamp(date_tMysqlOutput_1));
									}
								} else {
									pstmtUpdate_tMysqlOutput_1.setNull(5, java.sql.Types.DATE);
								}

								if (insert_ma_flw_cdr.end_time != null) {
									date_tMysqlOutput_1 = insert_ma_flw_cdr.end_time.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmtUpdate_tMysqlOutput_1.setString(6, "0000-00-00 00:00:00");
									} else {
										pstmtUpdate_tMysqlOutput_1.setTimestamp(6,
												new java.sql.Timestamp(date_tMysqlOutput_1));
									}
								} else {
									pstmtUpdate_tMysqlOutput_1.setNull(6, java.sql.Types.DATE);
								}

								if (insert_ma_flw_cdr.duration == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(7, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_1.setInt(7, insert_ma_flw_cdr.duration);
								}

								if (insert_ma_flw_cdr.duration_in_pulse == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_1.setInt(8, insert_ma_flw_cdr.duration_in_pulse);
								}

								if (insert_ma_flw_cdr.call_id == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tMysqlOutput_1.setString(9, insert_ma_flw_cdr.call_id);
								}

								if (insert_ma_flw_cdr.modificationDate == null) {
									pstmtUpdate_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tMysqlOutput_1.setString(10, insert_ma_flw_cdr.modificationDate);
								}

								pstmtUpdate_tMysqlOutput_1.setLong(11 + count_tMysqlOutput_1, insert_ma_flw_cdr.id);

								try {
									updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
											+ pstmtUpdate_tMysqlOutput_1.executeUpdate();
									nb_line_tMysqlOutput_1++;
								} catch (java.lang.Exception e) {
									whetherReject_tMysqlOutput_1 = true;
									nb_line_tMysqlOutput_1++;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tMysqlOutput_1.setLong(1, insert_ma_flw_cdr.id);

								if (insert_ma_flw_cdr.flw_id == null) {
									pstmtInsert_tMysqlOutput_1.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_1.setLong(2, insert_ma_flw_cdr.flw_id);
								}

								if (insert_ma_flw_cdr.calling_msisdn == null) {
									pstmtInsert_tMysqlOutput_1.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_1.setLong(3, insert_ma_flw_cdr.calling_msisdn);
								}

								if (insert_ma_flw_cdr.operator_id == null) {
									pstmtInsert_tMysqlOutput_1.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_1.setLong(4, insert_ma_flw_cdr.operator_id);
								}

								if (insert_ma_flw_cdr.circle_id == null) {
									pstmtInsert_tMysqlOutput_1.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_1.setLong(5, insert_ma_flw_cdr.circle_id);
								}

								if (insert_ma_flw_cdr.start_time != null) {
									date_tMysqlOutput_1 = insert_ma_flw_cdr.start_time.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmtInsert_tMysqlOutput_1.setString(6, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tMysqlOutput_1.setTimestamp(6,
												new java.sql.Timestamp(date_tMysqlOutput_1));
									}
								} else {
									pstmtInsert_tMysqlOutput_1.setNull(6, java.sql.Types.DATE);
								}

								if (insert_ma_flw_cdr.end_time != null) {
									date_tMysqlOutput_1 = insert_ma_flw_cdr.end_time.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmtInsert_tMysqlOutput_1.setString(7, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tMysqlOutput_1.setTimestamp(7,
												new java.sql.Timestamp(date_tMysqlOutput_1));
									}
								} else {
									pstmtInsert_tMysqlOutput_1.setNull(7, java.sql.Types.DATE);
								}

								if (insert_ma_flw_cdr.duration == null) {
									pstmtInsert_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_1.setInt(8, insert_ma_flw_cdr.duration);
								}

								if (insert_ma_flw_cdr.duration_in_pulse == null) {
									pstmtInsert_tMysqlOutput_1.setNull(9, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_1.setInt(9, insert_ma_flw_cdr.duration_in_pulse);
								}

								if (insert_ma_flw_cdr.call_id == null) {
									pstmtInsert_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tMysqlOutput_1.setString(10, insert_ma_flw_cdr.call_id);
								}

								if (insert_ma_flw_cdr.modificationDate == null) {
									pstmtInsert_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tMysqlOutput_1.setString(11, insert_ma_flw_cdr.modificationDate);
								}

								try {
									insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
											+ pstmtInsert_tMysqlOutput_1.executeUpdate();
									nb_line_tMysqlOutput_1++;
								} catch (java.lang.Exception e) {
									whetherReject_tMysqlOutput_1 = true;
									nb_line_tMysqlOutput_1++;
									System.err.print(e.getMessage());
								}
							}
							if (!whetherReject_tMysqlOutput_1) {
							}
							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								conn_tMysqlOutput_1.commit();
								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

							/**
							 * [tMysqlOutput_1 process_data_begin ] start
							 */

							currentComponent = "tMysqlOutput_1";

							/**
							 * [tMysqlOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tMysqlOutput_1 process_data_end ] start
							 */

							currentComponent = "tMysqlOutput_1";

							/**
							 * [tMysqlOutput_1 process_data_end ] stop
							 */

						} // End of branch "insert_ma_flw_cdr"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_1 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_1";

						/**
						 * [tMysqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					if (stmt_tMysqlInput_1 != null) {
						stmt_tMysqlInput_1.close();
					}
					if (conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmtUpdate_tMysqlOutput_1 != null) {
					pstmtUpdate_tMysqlOutput_1.close();
					resourceMap.remove("pstmtUpdate_tMysqlOutput_1");
				}
				if (pstmtInsert_tMysqlOutput_1 != null) {
					pstmtInsert_tMysqlOutput_1.close();
					resourceMap.remove("pstmtInsert_tMysqlOutput_1");
				}
				if (pstmt_tMysqlOutput_1 != null) {
					pstmt_tMysqlOutput_1.close();
					resourceMap.remove("pstmt_tMysqlOutput_1");
				}
				resourceMap.put("statementClosed_tMysqlOutput_1", true);
				if (commitCounter_tMysqlOutput_1 > 0) {

					conn_tMysqlOutput_1.commit();

				}

				conn_tMysqlOutput_1.close();

				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1 + deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED", nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED", nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED", nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "insert_ma_flw_cdr");
				}

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMysqlRow_1Process(globalMap);

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (resourceMap.get("statementClosed_tMysqlOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tMysqlOutput_1 = null;
						if ((pstmtUpdateToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tMysqlOutput_1")) != null) {
							pstmtUpdateToClose_tMysqlOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tMysqlOutput_1 = null;
						if ((pstmtInsertToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tMysqlOutput_1")) != null) {
							pstmtInsertToClose_tMysqlOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tMysqlOutput_1 = null;
						if ((pstmtToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tMysqlOutput_1")) != null) {
							pstmtToClose_tMysqlOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMysqlOutput_1") == null) {
						java.sql.Connection ctn_tMysqlOutput_1 = null;
						if ((ctn_tMysqlOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tMysqlOutput_1")) != null) {
							try {
								ctn_tMysqlOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
								String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
										+ sqlEx_tMysqlOutput_1.getMessage();
								System.err.println(errorMessage_tMysqlOutput_1);
							}
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_1 begin ] start
				 */

				ok_Hash.put("tMysqlRow_1", false);
				start_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				currentComponent = "tMysqlRow_1";

				int tos_count_tMysqlRow_1 = 0;

				java.sql.Connection conn_tMysqlRow_1 = null;
				String query_tMysqlRow_1 = "";
				boolean whetherReject_tMysqlRow_1 = false;
				String driverClass_tMysqlRow_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlRow_1 = java.lang.Class.forName(driverClass_tMysqlRow_1);

				String url_tMysqlRow_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
						+ context.reporting_db_AdditionalParams;
				String dbUser_tMysqlRow_1 = "root";

				final String decryptedPassword_tMysqlRow_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3DeZ2D6HDzwyiNHiHuHmrT4C5KUp6VIxN62XcPG3cQcSQenS]");

				String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;

				conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(url_tMysqlRow_1, dbUser_tMysqlRow_1,
						dbPwd_tMysqlRow_1);

				resourceMap.put("conn_tMysqlRow_1", conn_tMysqlRow_1);
				if (conn_tMysqlRow_1.getAutoCommit()) {

					conn_tMysqlRow_1.setAutoCommit(false);

				}
				int commitEvery_tMysqlRow_1 = 10000;
				int commitCounter_tMysqlRow_1 = 0;

				java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1.createStatement();
				resourceMap.put("stmt_tMysqlRow_1", stmt_tMysqlRow_1);

				/**
				 * [tMysqlRow_1 begin ] stop
				 */

				/**
				 * [tMysqlRow_1 main ] start
				 */

				currentComponent = "tMysqlRow_1";

				query_tMysqlRow_1 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT max(modificationDate) from \n WA_call_detail_measure),\n"
						+ "ETL_info_table.record_count=(SELECT COUNT(*) from WA_call_detail_measure)\nWHERE ETL_info_table.table_id = 13";
				whetherReject_tMysqlRow_1 = false;
				globalMap.put("tMysqlRow_1_QUERY", query_tMysqlRow_1);
				try {
					stmt_tMysqlRow_1.execute(query_tMysqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tMysqlRow_1) {

				}

				commitCounter_tMysqlRow_1++;
				if (commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;
				}

				tos_count_tMysqlRow_1++;

				/**
				 * [tMysqlRow_1 main ] stop
				 */

				/**
				 * [tMysqlRow_1 process_data_begin ] start
				 */

				currentComponent = "tMysqlRow_1";

				/**
				 * [tMysqlRow_1 process_data_begin ] stop
				 */

				/**
				 * [tMysqlRow_1 process_data_end ] start
				 */

				currentComponent = "tMysqlRow_1";

				/**
				 * [tMysqlRow_1 process_data_end ] stop
				 */

				/**
				 * [tMysqlRow_1 end ] start
				 */

				currentComponent = "tMysqlRow_1";

				stmt_tMysqlRow_1.close();
				resourceMap.remove("stmt_tMysqlRow_1");
				resourceMap.put("statementClosed_tMysqlRow_1", true);
				if (commitEvery_tMysqlRow_1 > commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;

				}
				conn_tMysqlRow_1.close();

				if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
						&& routines.system.BundleUtils.inOSGi()) {
					Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
							.invoke(null, (Object[]) null);
				}

				resourceMap.put("finish_tMysqlRow_1", true);

				ok_Hash.put("tMysqlRow_1", true);
				end_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tMysqlInput_6Process(globalMap);

				/**
				 * [tMysqlRow_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_1 finally ] start
				 */

				currentComponent = "tMysqlRow_1";

				try {
					if (resourceMap.get("statementClosed_tMysqlRow_1") == null) {
						java.sql.Statement stmtToClose_tMysqlRow_1 = null;
						if ((stmtToClose_tMysqlRow_1 = (java.sql.Statement) resourceMap
								.remove("stmt_tMysqlRow_1")) != null) {
							stmtToClose_tMysqlRow_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMysqlRow_1") == null) {
						java.sql.Connection ctn_tMysqlRow_1 = null;
						if ((ctn_tMysqlRow_1 = (java.sql.Connection) resourceMap.get("conn_tMysqlRow_1")) != null) {
							try {
								ctn_tMysqlRow_1.close();
							} catch (java.sql.SQLException sqlEx_tMysqlRow_1) {
								String errorMessage_tMysqlRow_1 = "failed to close the connection in tMysqlRow_1 :"
										+ sqlEx_tMysqlRow_1.getMessage();
								System.err.println(errorMessage_tMysqlRow_1);
							}
						}
					}
				}

				/**
				 * [tMysqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public String last_etl_time;

		public String getLast_etl_time() {
			return this.last_etl_time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.last_etl_time = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.last_etl_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("last_etl_time=" + last_etl_time);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_6 begin ] start
				 */

				ok_Hash.put("tMysqlInput_6", false);
				start_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				currentComponent = "tMysqlInput_6";

				int tos_count_tMysqlInput_6 = 0;

				java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6.getTime();
				int nb_line_tMysqlInput_6 = 0;
				java.sql.Connection conn_tMysqlInput_6 = null;
				String driverClass_tMysqlInput_6 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_6 = java.lang.Class.forName(driverClass_tMysqlInput_6);
				String dbUser_tMysqlInput_6 = "root";

				final String decryptedPassword_tMysqlInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[pa6rrPYAx0OpOmJFrWN2q/P/qq6NT/nYovWgokgniUpG2TOI]");

				String dbPwd_tMysqlInput_6 = decryptedPassword_tMysqlInput_6;

				String url_tMysqlInput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
						+ context.reporting_db_AdditionalParams;

				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(url_tMysqlInput_6, dbUser_tMysqlInput_6,
						dbPwd_tMysqlInput_6);

				java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6.createStatement();

				String dbquery_tMysqlInput_6 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=12";

				globalMap.put("tMysqlInput_6_QUERY", dbquery_tMysqlInput_6);
				java.sql.ResultSet rs_tMysqlInput_6 = null;

				try {
					rs_tMysqlInput_6 = stmt_tMysqlInput_6.executeQuery(dbquery_tMysqlInput_6);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6.getMetaData();
					int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6.getColumnCount();

					String tmpContent_tMysqlInput_6 = null;

					while (rs_tMysqlInput_6.next()) {
						nb_line_tMysqlInput_6++;

						if (colQtyInRs_tMysqlInput_6 < 1) {
							row7.last_etl_time = null;
						} else {

							row7.last_etl_time = routines.system.JDBCUtil.getString(rs_tMysqlInput_6, 1, false);
						}

						/**
						 * [tMysqlInput_6 begin ] stop
						 */

						/**
						 * [tMysqlInput_6 main ] start
						 */

						currentComponent = "tMysqlInput_6";

						tos_count_tMysqlInput_6++;

						/**
						 * [tMysqlInput_6 main ] stop
						 */

						/**
						 * [tMysqlInput_6 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_6";

						/**
						 * [tMysqlInput_6 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						// Code generated according to input schema and output schema

						globalMap.put("lastEtlTime", row7.last_etl_time != null ? row7.last_etl_time : "");
						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_6 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_6";

						/**
						 * [tMysqlInput_6 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_6 end ] start
						 */

						currentComponent = "tMysqlInput_6";

					}
				} finally {
					if (rs_tMysqlInput_6 != null) {
						rs_tMysqlInput_6.close();
					}
					if (stmt_tMysqlInput_6 != null) {
						stmt_tMysqlInput_6.close();
					}
					if (conn_tMysqlInput_6 != null && !conn_tMysqlInput_6.isClosed()) {

						conn_tMysqlInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_6_NB_LINE", nb_line_tMysqlInput_6);

				ok_Hash.put("tMysqlInput_6", true);
				end_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				/**
				 * [tMysqlInput_6 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tMysqlInput_2Process(globalMap);

				/**
				 * [tJavaRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_6 finally ] start
				 */

				currentComponent = "tMysqlInput_6";

				/**
				 * [tMysqlInput_6 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}

	public static class insert_ma_call_contentStruct
			implements routines.system.IPersistableRow<insert_ma_call_contentStruct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public long call_detail_id;

		public long getCall_detail_id() {
			return this.call_detail_id;
		}

		public Integer percentage_listened;

		public Integer getPercentage_listened() {
			return this.percentage_listened;
		}

		public Long content_id;

		public Long getContent_id() {
			return this.content_id;
		}

		public Boolean completion_flag;

		public Boolean getCompletion_flag() {
			return this.completion_flag;
		}

		public Boolean correct_answer_entered;

		public Boolean getCorrect_answer_entered() {
			return this.correct_answer_entered;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public java.util.Date start_time;

		public java.util.Date getStart_time() {
			return this.start_time;
		}

		public java.util.Date end_time;

		public java.util.Date getEnd_time() {
			return this.end_time;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_ma_call_contentStruct other = (insert_ma_call_contentStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(insert_ma_call_contentStruct other) {

			other.id = this.id;
			other.call_detail_id = this.call_detail_id;
			other.percentage_listened = this.percentage_listened;
			other.content_id = this.content_id;
			other.completion_flag = this.completion_flag;
			other.correct_answer_entered = this.correct_answer_entered;
			other.duration = this.duration;
			other.start_time = this.start_time;
			other.end_time = this.end_time;
			other.type = this.type;
			other.modificationDate = this.modificationDate;

		}

		public void copyKeysDataTo(insert_ma_call_contentStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.call_detail_id = dis.readLong();

					this.percentage_listened = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.content_id = null;
					} else {
						this.content_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.completion_flag = null;
					} else {
						this.completion_flag = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.correct_answer_entered = null;
					} else {
						this.correct_answer_entered = dis.readBoolean();
					}

					this.duration = readInteger(dis);

					this.start_time = readDate(dis);

					this.end_time = readDate(dis);

					this.type = readString(dis);

					this.modificationDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// long

				dos.writeLong(this.call_detail_id);

				// Integer

				writeInteger(this.percentage_listened, dos);

				// Long

				if (this.content_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.content_id);
				}

				// Boolean

				if (this.completion_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.completion_flag);
				}

				// Boolean

				if (this.correct_answer_entered == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.correct_answer_entered);
				}

				// Integer

				writeInteger(this.duration, dos);

				// java.util.Date

				writeDate(this.start_time, dos);

				// java.util.Date

				writeDate(this.end_time, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.modificationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",call_detail_id=" + String.valueOf(call_detail_id));
			sb.append(",percentage_listened=" + String.valueOf(percentage_listened));
			sb.append(",content_id=" + String.valueOf(content_id));
			sb.append(",completion_flag=" + String.valueOf(completion_flag));
			sb.append(",correct_answer_entered=" + String.valueOf(correct_answer_entered));
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",start_time=" + String.valueOf(start_time));
			sb.append(",end_time=" + String.valueOf(end_time));
			sb.append(",type=" + type);
			sb.append(",modificationDate=" + modificationDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_ma_call_contentStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public long callDetailRecord_id_OID;

		public long getCallDetailRecord_id_OID() {
			return this.callDetailRecord_id_OID;
		}

		public Boolean completionFlag;

		public Boolean getCompletionFlag() {
			return this.completionFlag;
		}

		public Boolean correctAnswerEntered;

		public Boolean getCorrectAnswerEntered() {
			return this.correctAnswerEntered;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public java.util.Date startTime;

		public java.util.Date getStartTime() {
			return this.startTime;
		}

		public String contentName;

		public String getContentName() {
			return this.contentName;
		}

		public String contentFile;

		public String getContentFile() {
			return this.contentFile;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date endTime;

		public java.util.Date getEndTime() {
			return this.endTime;
		}

		public Long flw_id;

		public Long getFlw_id() {
			return this.flw_id;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.callDetailRecord_id_OID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.completionFlag = null;
					} else {
						this.completionFlag = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.correctAnswerEntered = null;
					} else {
						this.correctAnswerEntered = dis.readBoolean();
					}

					this.duration = readInteger(dis);

					this.startTime = readDate(dis);

					this.contentName = readString(dis);

					this.contentFile = readString(dis);

					this.type = readString(dis);

					this.endTime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.flw_id = null;
					} else {
						this.flw_id = dis.readLong();
					}

					this.modificationDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// long

				dos.writeLong(this.callDetailRecord_id_OID);

				// Boolean

				if (this.completionFlag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.completionFlag);
				}

				// Boolean

				if (this.correctAnswerEntered == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.correctAnswerEntered);
				}

				// Integer

				writeInteger(this.duration, dos);

				// java.util.Date

				writeDate(this.startTime, dos);

				// String

				writeString(this.contentName, dos);

				// String

				writeString(this.contentFile, dos);

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.endTime, dos);

				// Long

				if (this.flw_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flw_id);
				}

				// String

				writeString(this.modificationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",callDetailRecord_id_OID=" + String.valueOf(callDetailRecord_id_OID));
			sb.append(",completionFlag=" + String.valueOf(completionFlag));
			sb.append(",correctAnswerEntered=" + String.valueOf(correctAnswerEntered));
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",startTime=" + String.valueOf(startTime));
			sb.append(",contentName=" + contentName);
			sb.append(",contentFile=" + contentFile);
			sb.append(",type=" + type);
			sb.append(",endTime=" + String.valueOf(endTime));
			sb.append(",flw_id=" + String.valueOf(flw_id));
			sb.append(",modificationDate=" + modificationDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				insert_ma_call_contentStruct insert_ma_call_content = new insert_ma_call_contentStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "insert_ma_call_content");
				}

				int tos_count_tMysqlOutput_2 = 0;

				int updateKeyCount_tMysqlOutput_2 = 1;
				if (updateKeyCount_tMysqlOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "WA_call_content_measure";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = context.reporting_db_AdditionalParams;
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null || dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = context.reporting_db_AdditionalParams;
					if (!properties_tMysqlOutput_2.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ properties_tMysqlOutput_2;
				}
				String driverClass_tMysqlOutput_2 = "com.mysql.jdbc.Driver";

				String dbUser_tMysqlOutput_2 = "root";

				final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[04sZeftkMSqslj4M1pGTYmXX2p02a1cRgZQPDzaWyFBnguPH]");

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
				java.lang.Class.forName(driverClass_tMysqlOutput_2);

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `" + "WA_call_content_measure" + "` WHERE `id` = ?");
				resourceMap.put("pstmt_tMysqlOutput_2", pstmt_tMysqlOutput_2);
				String insert_tMysqlOutput_2 = "INSERT INTO `" + "WA_call_content_measure"
						+ "` (`id`,`call_detail_id`,`percentage_listened`,`content_id`,`completion_flag`,`correct_answer_entered`,`duration`,`start_time`,`end_time`,`type`,`modificationDate`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);
				resourceMap.put("pstmtInsert_tMysqlOutput_2", pstmtInsert_tMysqlOutput_2);
				String update_tMysqlOutput_2 = "UPDATE `" + "WA_call_content_measure"
						+ "` SET `call_detail_id` = ?,`percentage_listened` = ?,`content_id` = ?,`completion_flag` = ?,`correct_answer_entered` = ?,`duration` = ?,`start_time` = ?,`end_time` = ?,`type` = ?,`modificationDate` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(update_tMysqlOutput_2);
				resourceMap.put("pstmtUpdate_tMysqlOutput_2", pstmtUpdate_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
					Object contentMap;
					boolean var1;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				insert_ma_call_contentStruct insert_ma_call_content_tmp = new insert_ma_call_contentStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_2 = java.lang.Class.forName(driverClass_tMysqlInput_2);
				String dbUser_tMysqlInput_2 = "root";

				final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[F4EYmEPF41BGMOgB2YusW54StDbwVGd4ps0m4beEPw9LQMD2]");

				String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;

				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services"
						+ "?" + context.motech_db_AdditionalParams;

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT cc.id,cc.callDetailRecord_id_OID,cc.completionFlag,cc.correctAnswerEntered, \nTIMESTAMPDIFF(SECOND,cc.startTime, "
						+ "cc.endTime) as 'duration',\ncc.startTime,cc.contentName,cc.contentFile,cc.type,cc.endTime,\ncdr.swachchagrahi_id_OID as 'f"
						+ "lw_id',\ncc.modificationDate\nFROM wash_call_content cc\nLEFT OUTER JOIN wash_swachgrahi_cdrs cdr on cc.callDetailRecord_id"
						+ "_OID=cdr.id\nWHERE cc.washAcademyCardCode IS NULL\nAND cc.creationDate>'"
						+ (String) globalMap.get("lastEtlTime") + "'\nORDER BY cc.creationDate ASC";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);
				java.sql.ResultSet rs_tMysqlInput_2 = null;

				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						if (colQtyInRs_tMysqlInput_2 < 1) {
							row2.id = 0;
						} else {

							row2.id = rs_tMysqlInput_2.getLong(1);
							if (rs_tMysqlInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 2) {
							row2.callDetailRecord_id_OID = 0;
						} else {

							row2.callDetailRecord_id_OID = rs_tMysqlInput_2.getLong(2);
							if (rs_tMysqlInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 3) {
							row2.completionFlag = null;
						} else {

							row2.completionFlag = rs_tMysqlInput_2.getBoolean(3);
							if (rs_tMysqlInput_2.wasNull()) {
								row2.completionFlag = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 4) {
							row2.correctAnswerEntered = null;
						} else {

							row2.correctAnswerEntered = rs_tMysqlInput_2.getBoolean(4);
							if (rs_tMysqlInput_2.wasNull()) {
								row2.correctAnswerEntered = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 5) {
							row2.duration = null;
						} else {

							row2.duration = rs_tMysqlInput_2.getInt(5);
							if (rs_tMysqlInput_2.wasNull()) {
								row2.duration = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 6) {
							row2.startTime = null;
						} else {

							if (rs_tMysqlInput_2.getString(6) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(6);
								if (!("0000-00-00").equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
									row2.startTime = rs_tMysqlInput_2.getTimestamp(6);
								} else {
									row2.startTime = (java.util.Date) year0_tMysqlInput_2.clone();
								}
							} else {
								row2.startTime = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 7) {
							row2.contentName = null;
						} else {

							row2.contentName = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 7, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 8) {
							row2.contentFile = null;
						} else {

							row2.contentFile = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 8, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 9) {
							row2.type = null;
						} else {

							row2.type = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 9, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 10) {
							row2.endTime = null;
						} else {

							if (rs_tMysqlInput_2.getString(10) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(10);
								if (!("0000-00-00").equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
									row2.endTime = rs_tMysqlInput_2.getTimestamp(10);
								} else {
									row2.endTime = (java.util.Date) year0_tMysqlInput_2.clone();
								}
							} else {
								row2.endTime = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 11) {
							row2.flw_id = null;
						} else {

							row2.flw_id = rs_tMysqlInput_2.getLong(11);
							if (rs_tMysqlInput_2.wasNull()) {
								row2.flw_id = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 12) {
							row2.modificationDate = null;
						} else {

							row2.modificationDate = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 12, false);
						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */

						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tMysqlInput_2 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_2";

						/**
						 * [tMysqlInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;
							Var.contentMap = ReportingHelper.getMAContent(row2.contentName, row2.contentFile, row2.type,
									(java.sql.Connection) resourceMap.get("conn_tMysqlOutput_2"), row2.duration);
							Var.var1 = ReportingHelper.setCourseStatus(row2.flw_id, row2.contentName, row2.startTime,
									row2.endTime, row2.correctAnswerEntered, row2.contentFile,
									(java.sql.Connection) resourceMap.get("conn_tMysqlOutput_2"));// ###############################
							// ###############################
							// # Output tables

							insert_ma_call_content = null;

// # Output table : 'insert_ma_call_content'
							insert_ma_call_content_tmp.id = row2.id;
							insert_ma_call_content_tmp.call_detail_id = row2.callDetailRecord_id_OID;
							insert_ma_call_content_tmp.percentage_listened = (Integer) ((java.util.Map<String, Object>) Var.contentMap)
									.get("percentageListened");
							insert_ma_call_content_tmp.content_id = (Long) ((java.util.Map<String, Object>) Var.contentMap)
									.get("contentId");
							insert_ma_call_content_tmp.completion_flag = row2.completionFlag;
							insert_ma_call_content_tmp.correct_answer_entered = row2.correctAnswerEntered;
							insert_ma_call_content_tmp.duration = row2.duration;
							insert_ma_call_content_tmp.start_time = row2.startTime;
							insert_ma_call_content_tmp.end_time = row2.endTime;
							insert_ma_call_content_tmp.type = row2.type;
							insert_ma_call_content_tmp.modificationDate = row2.modificationDate;
							insert_ma_call_content = insert_ma_call_content_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "insert_ma_call_content"
						if (insert_ma_call_content != null) {

							/**
							 * [tMysqlOutput_2 main ] start
							 */

							currentComponent = "tMysqlOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "insert_ma_call_content");
							}

							whetherReject_tMysqlOutput_2 = false;
							pstmt_tMysqlOutput_2.setLong(1, insert_ma_call_content.id);

							int checkCount_tMysqlOutput_2 = -1;
							try (java.sql.ResultSet rs_tMysqlOutput_2 = pstmt_tMysqlOutput_2.executeQuery()) {
								while (rs_tMysqlOutput_2.next()) {
									checkCount_tMysqlOutput_2 = rs_tMysqlOutput_2.getInt(1);
								}
							}
							if (checkCount_tMysqlOutput_2 > 0) {
								pstmtUpdate_tMysqlOutput_2.setLong(1, insert_ma_call_content.call_detail_id);

								if (insert_ma_call_content.percentage_listened == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(2, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_2.setInt(2, insert_ma_call_content.percentage_listened);
								}

								if (insert_ma_call_content.content_id == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_2.setLong(3, insert_ma_call_content.content_id);
								}

								if (insert_ma_call_content.completion_flag == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(4, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tMysqlOutput_2.setBoolean(4, insert_ma_call_content.completion_flag);
								}

								if (insert_ma_call_content.correct_answer_entered == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tMysqlOutput_2.setBoolean(5,
											insert_ma_call_content.correct_answer_entered);
								}

								if (insert_ma_call_content.duration == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(6, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tMysqlOutput_2.setInt(6, insert_ma_call_content.duration);
								}

								if (insert_ma_call_content.start_time != null) {
									date_tMysqlOutput_2 = insert_ma_call_content.start_time.getTime();
									if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
											|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
										pstmtUpdate_tMysqlOutput_2.setString(7, "0000-00-00 00:00:00");
									} else {
										pstmtUpdate_tMysqlOutput_2.setTimestamp(7,
												new java.sql.Timestamp(date_tMysqlOutput_2));
									}
								} else {
									pstmtUpdate_tMysqlOutput_2.setNull(7, java.sql.Types.DATE);
								}

								if (insert_ma_call_content.end_time != null) {
									date_tMysqlOutput_2 = insert_ma_call_content.end_time.getTime();
									if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
											|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
										pstmtUpdate_tMysqlOutput_2.setString(8, "0000-00-00 00:00:00");
									} else {
										pstmtUpdate_tMysqlOutput_2.setTimestamp(8,
												new java.sql.Timestamp(date_tMysqlOutput_2));
									}
								} else {
									pstmtUpdate_tMysqlOutput_2.setNull(8, java.sql.Types.DATE);
								}

								if (insert_ma_call_content.type == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tMysqlOutput_2.setString(9, insert_ma_call_content.type);
								}

								if (insert_ma_call_content.modificationDate == null) {
									pstmtUpdate_tMysqlOutput_2.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tMysqlOutput_2.setString(10, insert_ma_call_content.modificationDate);
								}

								pstmtUpdate_tMysqlOutput_2.setLong(11 + count_tMysqlOutput_2,
										insert_ma_call_content.id);

								try {
									updatedCount_tMysqlOutput_2 = updatedCount_tMysqlOutput_2
											+ pstmtUpdate_tMysqlOutput_2.executeUpdate();
									nb_line_tMysqlOutput_2++;
								} catch (java.lang.Exception e) {
									whetherReject_tMysqlOutput_2 = true;
									nb_line_tMysqlOutput_2++;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tMysqlOutput_2.setLong(1, insert_ma_call_content.id);

								pstmtInsert_tMysqlOutput_2.setLong(2, insert_ma_call_content.call_detail_id);

								if (insert_ma_call_content.percentage_listened == null) {
									pstmtInsert_tMysqlOutput_2.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_2.setInt(3, insert_ma_call_content.percentage_listened);
								}

								if (insert_ma_call_content.content_id == null) {
									pstmtInsert_tMysqlOutput_2.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_2.setLong(4, insert_ma_call_content.content_id);
								}

								if (insert_ma_call_content.completion_flag == null) {
									pstmtInsert_tMysqlOutput_2.setNull(5, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tMysqlOutput_2.setBoolean(5, insert_ma_call_content.completion_flag);
								}

								if (insert_ma_call_content.correct_answer_entered == null) {
									pstmtInsert_tMysqlOutput_2.setNull(6, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tMysqlOutput_2.setBoolean(6,
											insert_ma_call_content.correct_answer_entered);
								}

								if (insert_ma_call_content.duration == null) {
									pstmtInsert_tMysqlOutput_2.setNull(7, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tMysqlOutput_2.setInt(7, insert_ma_call_content.duration);
								}

								if (insert_ma_call_content.start_time != null) {
									date_tMysqlOutput_2 = insert_ma_call_content.start_time.getTime();
									if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
											|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
										pstmtInsert_tMysqlOutput_2.setString(8, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tMysqlOutput_2.setTimestamp(8,
												new java.sql.Timestamp(date_tMysqlOutput_2));
									}
								} else {
									pstmtInsert_tMysqlOutput_2.setNull(8, java.sql.Types.DATE);
								}

								if (insert_ma_call_content.end_time != null) {
									date_tMysqlOutput_2 = insert_ma_call_content.end_time.getTime();
									if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
											|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
										pstmtInsert_tMysqlOutput_2.setString(9, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tMysqlOutput_2.setTimestamp(9,
												new java.sql.Timestamp(date_tMysqlOutput_2));
									}
								} else {
									pstmtInsert_tMysqlOutput_2.setNull(9, java.sql.Types.DATE);
								}

								if (insert_ma_call_content.type == null) {
									pstmtInsert_tMysqlOutput_2.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tMysqlOutput_2.setString(10, insert_ma_call_content.type);
								}

								if (insert_ma_call_content.modificationDate == null) {
									pstmtInsert_tMysqlOutput_2.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tMysqlOutput_2.setString(11, insert_ma_call_content.modificationDate);
								}

								try {
									insertedCount_tMysqlOutput_2 = insertedCount_tMysqlOutput_2
											+ pstmtInsert_tMysqlOutput_2.executeUpdate();
									nb_line_tMysqlOutput_2++;
								} catch (java.lang.Exception e) {
									whetherReject_tMysqlOutput_2 = true;
									nb_line_tMysqlOutput_2++;
									System.err.print(e.getMessage());
								}
							}
							if (!whetherReject_tMysqlOutput_2) {
							}
							commitCounter_tMysqlOutput_2++;

							if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

								conn_tMysqlOutput_2.commit();
								commitCounter_tMysqlOutput_2 = 0;

							}

							tos_count_tMysqlOutput_2++;

							/**
							 * [tMysqlOutput_2 main ] stop
							 */

							/**
							 * [tMysqlOutput_2 process_data_begin ] start
							 */

							currentComponent = "tMysqlOutput_2";

							/**
							 * [tMysqlOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tMysqlOutput_2 process_data_end ] start
							 */

							currentComponent = "tMysqlOutput_2";

							/**
							 * [tMysqlOutput_2 process_data_end ] stop
							 */

						} // End of branch "insert_ma_call_content"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_2 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_2";

						/**
						 * [tMysqlInput_2 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					if (rs_tMysqlInput_2 != null) {
						rs_tMysqlInput_2.close();
					}
					if (stmt_tMysqlInput_2 != null) {
						stmt_tMysqlInput_2.close();
					}
					if (conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {

						conn_tMysqlInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmtUpdate_tMysqlOutput_2 != null) {
					pstmtUpdate_tMysqlOutput_2.close();
					resourceMap.remove("pstmtUpdate_tMysqlOutput_2");
				}
				if (pstmtInsert_tMysqlOutput_2 != null) {
					pstmtInsert_tMysqlOutput_2.close();
					resourceMap.remove("pstmtInsert_tMysqlOutput_2");
				}
				if (pstmt_tMysqlOutput_2 != null) {
					pstmt_tMysqlOutput_2.close();
					resourceMap.remove("pstmt_tMysqlOutput_2");
				}
				resourceMap.put("statementClosed_tMysqlOutput_2", true);
				if (commitCounter_tMysqlOutput_2 > 0) {

					conn_tMysqlOutput_2.commit();

				}

				conn_tMysqlOutput_2.close();

				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2 + deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2 + updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2 + insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2 + rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED", nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED", nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED", nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "insert_ma_call_content");
				}

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tMysqlRow_3Process(globalMap);

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				try {
					if (resourceMap.get("statementClosed_tMysqlOutput_2") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tMysqlOutput_2 = null;
						if ((pstmtUpdateToClose_tMysqlOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tMysqlOutput_2")) != null) {
							pstmtUpdateToClose_tMysqlOutput_2.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tMysqlOutput_2 = null;
						if ((pstmtInsertToClose_tMysqlOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tMysqlOutput_2")) != null) {
							pstmtInsertToClose_tMysqlOutput_2.close();
						}
						java.sql.PreparedStatement pstmtToClose_tMysqlOutput_2 = null;
						if ((pstmtToClose_tMysqlOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tMysqlOutput_2")) != null) {
							pstmtToClose_tMysqlOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMysqlOutput_2") == null) {
						java.sql.Connection ctn_tMysqlOutput_2 = null;
						if ((ctn_tMysqlOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tMysqlOutput_2")) != null) {
							try {
								ctn_tMysqlOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
								String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :"
										+ sqlEx_tMysqlOutput_2.getMessage();
								System.err.println(errorMessage_tMysqlOutput_2);
							}
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_3 begin ] start
				 */

				ok_Hash.put("tMysqlRow_3", false);
				start_Hash.put("tMysqlRow_3", System.currentTimeMillis());

				currentComponent = "tMysqlRow_3";

				int tos_count_tMysqlRow_3 = 0;

				java.sql.Connection conn_tMysqlRow_3 = null;
				String query_tMysqlRow_3 = "";
				boolean whetherReject_tMysqlRow_3 = false;
				String driverClass_tMysqlRow_3 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlRow_3 = java.lang.Class.forName(driverClass_tMysqlRow_3);

				String url_tMysqlRow_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
						+ context.reporting_db_AdditionalParams;
				String dbUser_tMysqlRow_3 = "root";

				final String decryptedPassword_tMysqlRow_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[KRTTxEQE9jnMHzX908AT0JpZXf6gwhubgXUY1fAgLCT8Po+u]");

				String dbPwd_tMysqlRow_3 = decryptedPassword_tMysqlRow_3;

				conn_tMysqlRow_3 = java.sql.DriverManager.getConnection(url_tMysqlRow_3, dbUser_tMysqlRow_3,
						dbPwd_tMysqlRow_3);

				resourceMap.put("conn_tMysqlRow_3", conn_tMysqlRow_3);
				if (conn_tMysqlRow_3.getAutoCommit()) {

					conn_tMysqlRow_3.setAutoCommit(false);

				}
				int commitEvery_tMysqlRow_3 = 10000;
				int commitCounter_tMysqlRow_3 = 0;

				java.sql.Statement stmt_tMysqlRow_3 = conn_tMysqlRow_3.createStatement();
				resourceMap.put("stmt_tMysqlRow_3", stmt_tMysqlRow_3);

				/**
				 * [tMysqlRow_3 begin ] stop
				 */

				/**
				 * [tMysqlRow_3 main ] start
				 */

				currentComponent = "tMysqlRow_3";

				query_tMysqlRow_3 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT max(modificationDate) from wa_call_content_measure),\nE"
						+ "TL_info_table.record_count=(SELECT COUNT(*) from wa_call_content_measure)\nWHERE ETL_info_table.table_id = 12";
				whetherReject_tMysqlRow_3 = false;
				globalMap.put("tMysqlRow_3_QUERY", query_tMysqlRow_3);
				try {
					stmt_tMysqlRow_3.execute(query_tMysqlRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_3 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tMysqlRow_3) {

				}

				commitCounter_tMysqlRow_3++;
				if (commitEvery_tMysqlRow_3 <= commitCounter_tMysqlRow_3) {

					conn_tMysqlRow_3.commit();

					commitCounter_tMysqlRow_3 = 0;
				}

				tos_count_tMysqlRow_3++;

				/**
				 * [tMysqlRow_3 main ] stop
				 */

				/**
				 * [tMysqlRow_3 process_data_begin ] start
				 */

				currentComponent = "tMysqlRow_3";

				/**
				 * [tMysqlRow_3 process_data_begin ] stop
				 */

				/**
				 * [tMysqlRow_3 process_data_end ] start
				 */

				currentComponent = "tMysqlRow_3";

				/**
				 * [tMysqlRow_3 process_data_end ] stop
				 */

				/**
				 * [tMysqlRow_3 end ] start
				 */

				currentComponent = "tMysqlRow_3";

				stmt_tMysqlRow_3.close();
				resourceMap.remove("stmt_tMysqlRow_3");
				resourceMap.put("statementClosed_tMysqlRow_3", true);
				if (commitEvery_tMysqlRow_3 > commitCounter_tMysqlRow_3) {

					conn_tMysqlRow_3.commit();

					commitCounter_tMysqlRow_3 = 0;

				}
				conn_tMysqlRow_3.close();

				if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
						&& routines.system.BundleUtils.inOSGi()) {
					Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
							.invoke(null, (Object[]) null);
				}

				resourceMap.put("finish_tMysqlRow_3", true);

				ok_Hash.put("tMysqlRow_3", true);
				end_Hash.put("tMysqlRow_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tMysqlInput_3Process(globalMap);

				/**
				 * [tMysqlRow_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_3 finally ] start
				 */

				currentComponent = "tMysqlRow_3";

				try {
					if (resourceMap.get("statementClosed_tMysqlRow_3") == null) {
						java.sql.Statement stmtToClose_tMysqlRow_3 = null;
						if ((stmtToClose_tMysqlRow_3 = (java.sql.Statement) resourceMap
								.remove("stmt_tMysqlRow_3")) != null) {
							stmtToClose_tMysqlRow_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMysqlRow_3") == null) {
						java.sql.Connection ctn_tMysqlRow_3 = null;
						if ((ctn_tMysqlRow_3 = (java.sql.Connection) resourceMap.get("conn_tMysqlRow_3")) != null) {
							try {
								ctn_tMysqlRow_3.close();
							} catch (java.sql.SQLException sqlEx_tMysqlRow_3) {
								String errorMessage_tMysqlRow_3 = "failed to close the connection in tMysqlRow_3 :"
										+ sqlEx_tMysqlRow_3.getMessage();
								System.err.println(errorMessage_tMysqlRow_3);
							}
						}
					}
				}

				/**
				 * [tMysqlRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_3_SUBPROCESS_STATE", 1);
	}

	public static class update_chapter_scoreStruct
			implements routines.system.IPersistableRow<update_chapter_scoreStruct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Integer score;

		public Integer getScore() {
			return this.score;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final update_chapter_scoreStruct other = (update_chapter_scoreStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(update_chapter_scoreStruct other) {

			other.id = this.id;
			other.score = this.score;

		}

		public void copyKeysDataTo(update_chapter_scoreStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.score = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Integer

				writeInteger(this.score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",score=" + String.valueOf(score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(update_chapter_scoreStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public String startTime;

		public String getStartTime() {
			return this.startTime;
		}

		public String chapterName;

		public String getChapterName() {
			return this.chapterName;
		}

		public String contentFile;

		public String getContentFile() {
			return this.contentFile;
		}

		public long flw_id;

		public long getFlw_id() {
			return this.flw_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.startTime = readString(dis);

					this.chapterName = readString(dis);

					this.contentFile = readString(dis);

					this.flw_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// String

				writeString(this.startTime, dos);

				// String

				writeString(this.chapterName, dos);

				// String

				writeString(this.contentFile, dos);

				// long

				dos.writeLong(this.flw_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",startTime=" + startTime);
			sb.append(",chapterName=" + chapterName);
			sb.append(",contentFile=" + contentFile);
			sb.append(",flw_id=" + String.valueOf(flw_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				update_chapter_scoreStruct update_chapter_score = new update_chapter_scoreStruct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "update_chapter_score");
				}

				int tos_count_tMysqlOutput_3 = 0;

				int updateKeyCount_tMysqlOutput_3 = 1;
				if (updateKeyCount_tMysqlOutput_3 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "wa_call_content_measure";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = context.reporting_db_AdditionalParams;
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null || dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = context.reporting_db_AdditionalParams;
					if (!properties_tMysqlOutput_3.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ properties_tMysqlOutput_3;
				}
				String driverClass_tMysqlOutput_3 = "com.mysql.jdbc.Driver";

				String dbUser_tMysqlOutput_3 = "root";

				final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[kPZ7ZBf06K8r+9Qa+QugyqiUpWaeOkRylji7Pxv92PyKP1cE]");

				String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;
				java.lang.Class.forName(driverClass_tMysqlOutput_3);

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				String update_tMysqlOutput_3 = "UPDATE `" + "wa_call_content_measure"
						+ "` SET `score` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(update_tMysqlOutput_3);
				resourceMap.put("pstmt_tMysqlOutput_3", pstmt_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				update_chapter_scoreStruct update_chapter_score_tmp = new update_chapter_scoreStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_3 = java.lang.Class.forName(driverClass_tMysqlInput_3);
				String dbUser_tMysqlInput_3 = "root";

				final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[1NNYdluDNBKfpzc3VuiIYagC9oJMtVe18BqZP584CVUrxcko]");

				String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;

				String url_tMysqlInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services"
						+ "?" + context.motech_db_AdditionalParams;

				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3, dbUser_tMysqlInput_3,
						dbPwd_tMysqlInput_3);

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT cc.id,cc.startTime,SUBSTRING_INDEX(cc.contentName, '_', 1),\nSUBSTRING_INDEX(cc.contentFile, '_', 1),\ncdr.swachch"
						+ "agrahi_id_OID as 'flw_id'\nFROM wash_call_content cc\nLEFT OUTER JOIN wash_swachgrahi_cdrs cdr on cc.callDetailRecord_id_O"
						+ "ID=cdr.id\nWHERE cc.washAcademyCardCode IS NULL\nAND cc.creationDate>'"
						+ (String) globalMap.get("lastEtlTime")
						+ "' \nAND contentName like 'Chapter%%_Question04' AND correctAnswerEntered IS NOT NULL AND contentFile like 'ch%%_q4.wav'\n"
						+ "order by cc.creationDate";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);
				java.sql.ResultSet rs_tMysqlInput_3 = null;

				try {
					rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
					int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

					String tmpContent_tMysqlInput_3 = null;

					while (rs_tMysqlInput_3.next()) {
						nb_line_tMysqlInput_3++;

						if (colQtyInRs_tMysqlInput_3 < 1) {
							row3.id = 0;
						} else {

							row3.id = rs_tMysqlInput_3.getLong(1);
							if (rs_tMysqlInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_3 < 2) {
							row3.startTime = null;
						} else {

							row3.startTime = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 2, false);
						}
						if (colQtyInRs_tMysqlInput_3 < 3) {
							row3.chapterName = null;
						} else {

							row3.chapterName = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 3, false);
						}
						if (colQtyInRs_tMysqlInput_3 < 4) {
							row3.contentFile = null;
						} else {

							row3.contentFile = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 4, false);
						}
						if (colQtyInRs_tMysqlInput_3 < 5) {
							row3.flw_id = 0;
						} else {

							row3.flw_id = rs_tMysqlInput_3.getLong(5);
							if (rs_tMysqlInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tMysqlInput_3 begin ] stop
						 */

						/**
						 * [tMysqlInput_3 main ] start
						 */

						currentComponent = "tMysqlInput_3";

						tos_count_tMysqlInput_3++;

						/**
						 * [tMysqlInput_3 main ] stop
						 */

						/**
						 * [tMysqlInput_3 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_3";

						/**
						 * [tMysqlInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							update_chapter_score = null;

// # Output table : 'update_chapter_score'
							update_chapter_score_tmp.id = row3.id;
							update_chapter_score_tmp.score = ReportingHelper.calculateChapterScore(row3.id,
									row3.startTime, row3.chapterName, row3.flw_id, row3.contentFile,
									(java.sql.Connection) resourceMap.get("conn_tMysqlOutput_3"));
							update_chapter_score = update_chapter_score_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "update_chapter_score"
						if (update_chapter_score != null) {

							/**
							 * [tMysqlOutput_3 main ] start
							 */

							currentComponent = "tMysqlOutput_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "update_chapter_score");
							}

							whetherReject_tMysqlOutput_3 = false;
							if (update_chapter_score.score == null) {
								pstmt_tMysqlOutput_3.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_3.setInt(1, update_chapter_score.score);
							}

							pstmt_tMysqlOutput_3.setLong(2 + count_tMysqlOutput_3, update_chapter_score.id);

							try {
								nb_line_tMysqlOutput_3++;
								updatedCount_tMysqlOutput_3 = updatedCount_tMysqlOutput_3
										+ pstmt_tMysqlOutput_3.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_3 = true;
								System.err.print(e.getMessage());
							}
							if (!whetherReject_tMysqlOutput_3) {
							}
							commitCounter_tMysqlOutput_3++;

							if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

								conn_tMysqlOutput_3.commit();
								commitCounter_tMysqlOutput_3 = 0;

							}

							tos_count_tMysqlOutput_3++;

							/**
							 * [tMysqlOutput_3 main ] stop
							 */

							/**
							 * [tMysqlOutput_3 process_data_begin ] start
							 */

							currentComponent = "tMysqlOutput_3";

							/**
							 * [tMysqlOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tMysqlOutput_3 process_data_end ] start
							 */

							currentComponent = "tMysqlOutput_3";

							/**
							 * [tMysqlOutput_3 process_data_end ] stop
							 */

						} // End of branch "update_chapter_score"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_3 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_3";

						/**
						 * [tMysqlInput_3 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_3 end ] start
						 */

						currentComponent = "tMysqlInput_3";

					}
				} finally {
					if (rs_tMysqlInput_3 != null) {
						rs_tMysqlInput_3.close();
					}
					if (stmt_tMysqlInput_3 != null) {
						stmt_tMysqlInput_3.close();
					}
					if (conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {

						conn_tMysqlInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();
					resourceMap.remove("pstmt_tMysqlOutput_3");

				}
				resourceMap.put("statementClosed_tMysqlOutput_3", true);
				if (commitCounter_tMysqlOutput_3 > 0) {

					conn_tMysqlOutput_3.commit();

				}

				conn_tMysqlOutput_3.close();

				resourceMap.put("finish_tMysqlOutput_3", true);

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3 + deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3 + updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3 + insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3 + rejectedCount_tMysqlOutput_3;

				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED", nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED", nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED", nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "update_chapter_score");
				}

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tMysqlInput_7Process(globalMap);

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				try {
					if (resourceMap.get("statementClosed_tMysqlOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tMysqlOutput_3 = null;
						if ((pstmtToClose_tMysqlOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tMysqlOutput_3")) != null) {
							pstmtToClose_tMysqlOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMysqlOutput_3") == null) {
						java.sql.Connection ctn_tMysqlOutput_3 = null;
						if ((ctn_tMysqlOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tMysqlOutput_3")) != null) {
							try {
								ctn_tMysqlOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
								String errorMessage_tMysqlOutput_3 = "failed to close the connection in tMysqlOutput_3 :"
										+ sqlEx_tMysqlOutput_3.getMessage();
								System.err.println(errorMessage_tMysqlOutput_3);
							}
						}
					}
				}

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public String last_etl_time;

		public String getLast_etl_time() {
			return this.last_etl_time;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.last_etl_time = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.last_etl_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("last_etl_time=" + last_etl_time);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tMysqlInput_7 begin ] start
				 */

				ok_Hash.put("tMysqlInput_7", false);
				start_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				currentComponent = "tMysqlInput_7";

				int tos_count_tMysqlInput_7 = 0;

				java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7.getTime();
				int nb_line_tMysqlInput_7 = 0;
				java.sql.Connection conn_tMysqlInput_7 = null;
				String driverClass_tMysqlInput_7 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_7 = java.lang.Class.forName(driverClass_tMysqlInput_7);
				String dbUser_tMysqlInput_7 = "root";

				final String decryptedPassword_tMysqlInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[Xshr7UKQcCD+WH1dN231H6T3Bk4bne5A/CoNKrhbwWiNnRR2]");

				String dbPwd_tMysqlInput_7 = decryptedPassword_tMysqlInput_7;

				String url_tMysqlInput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
						+ context.reporting_db_AdditionalParams;

				conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(url_tMysqlInput_7, dbUser_tMysqlInput_7,
						dbPwd_tMysqlInput_7);

				java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7.createStatement();

				String dbquery_tMysqlInput_7 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=14";

				globalMap.put("tMysqlInput_7_QUERY", dbquery_tMysqlInput_7);
				java.sql.ResultSet rs_tMysqlInput_7 = null;

				try {
					rs_tMysqlInput_7 = stmt_tMysqlInput_7.executeQuery(dbquery_tMysqlInput_7);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7.getMetaData();
					int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7.getColumnCount();

					String tmpContent_tMysqlInput_7 = null;

					while (rs_tMysqlInput_7.next()) {
						nb_line_tMysqlInput_7++;

						if (colQtyInRs_tMysqlInput_7 < 1) {
							row8.last_etl_time = null;
						} else {

							row8.last_etl_time = routines.system.JDBCUtil.getString(rs_tMysqlInput_7, 1, false);
						}

						/**
						 * [tMysqlInput_7 begin ] stop
						 */

						/**
						 * [tMysqlInput_7 main ] start
						 */

						currentComponent = "tMysqlInput_7";

						tos_count_tMysqlInput_7++;

						/**
						 * [tMysqlInput_7 main ] stop
						 */

						/**
						 * [tMysqlInput_7 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_7";

						/**
						 * [tMysqlInput_7 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
						}

						// Code generated according to input schema and output schema

						globalMap.put("lastEtlTime", row8.last_etl_time != null ? row8.last_etl_time : "");
						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_end ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_7 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_7";

						/**
						 * [tMysqlInput_7 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_7 end ] start
						 */

						currentComponent = "tMysqlInput_7";

					}
				} finally {
					if (rs_tMysqlInput_7 != null) {
						rs_tMysqlInput_7.close();
					}
					if (stmt_tMysqlInput_7 != null) {
						stmt_tMysqlInput_7.close();
					}
					if (conn_tMysqlInput_7 != null && !conn_tMysqlInput_7.isClosed()) {

						conn_tMysqlInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_7_NB_LINE", nb_line_tMysqlInput_7);

				ok_Hash.put("tMysqlInput_7", true);
				end_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				/**
				 * [tMysqlInput_7 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tMysqlInput_4Process(globalMap);

				/**
				 * [tJavaRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_7 finally ] start
				 */

				currentComponent = "tMysqlInput_7";

				/**
				 * [tMysqlInput_7 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}

	public static class update_course_complete_timeStruct
			implements routines.system.IPersistableRow<update_course_complete_timeStruct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public long calling_msisdn;

		public long getCalling_msisdn() {
			return this.calling_msisdn;
		}

		public long call_id;

		public long getCall_id() {
			return this.call_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final update_course_complete_timeStruct other = (update_course_complete_timeStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(update_course_complete_timeStruct other) {

			other.id = this.id;
			other.calling_msisdn = this.calling_msisdn;
			other.call_id = this.call_id;

		}

		public void copyKeysDataTo(update_course_complete_timeStruct other) {

			other.id = this.id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.calling_msisdn = dis.readLong();

					this.call_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// long

				dos.writeLong(this.calling_msisdn);

				// long

				dos.writeLong(this.call_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",calling_msisdn=" + String.valueOf(calling_msisdn));
			sb.append(",call_id=" + String.valueOf(call_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(update_course_complete_timeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];
		static byte[] commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public String creationDate;

		public String getCreationDate() {
			return this.creationDate;
		}

		public java.util.Date complete_time;

		public java.util.Date getComplete_time() {
			return this.complete_time;
		}

		public long flw_id;

		public long getFlw_id() {
			return this.flw_id;
		}

		public java.util.Date modificationDate;

		public java.util.Date getModificationDate() {
			return this.modificationDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length) {
					if (length < 1024 && commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test.length == 0) {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[1024];
					} else {
						commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length);
				strReturn = new String(commonByteArray_LOCAL_WASH_NEW_WA_Call_Detail_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_WASH_NEW_WA_Call_Detail_test) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.creationDate = readString(dis);

					this.complete_time = readDate(dis);

					this.flw_id = dis.readLong();

					this.modificationDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// String

				writeString(this.creationDate, dos);

				// java.util.Date

				writeDate(this.complete_time, dos);

				// long

				dos.writeLong(this.flw_id);

				// java.util.Date

				writeDate(this.modificationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",creationDate=" + creationDate);
			sb.append(",complete_time=" + String.valueOf(complete_time));
			sb.append(",flw_id=" + String.valueOf(flw_id));
			sb.append(",modificationDate=" + String.valueOf(modificationDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				update_course_complete_timeStruct update_course_complete_time = new update_course_complete_timeStruct();

				/**
				 * [tMysqlOutput_4 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_4", false);
				start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "update_course_complete_time");
				}

				int tos_count_tMysqlOutput_4 = 0;

				int updateKeyCount_tMysqlOutput_4 = 1;
				if (updateKeyCount_tMysqlOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_4 = 0;
				int nb_line_update_tMysqlOutput_4 = 0;
				int nb_line_inserted_tMysqlOutput_4 = 0;
				int nb_line_deleted_tMysqlOutput_4 = 0;
				int nb_line_rejected_tMysqlOutput_4 = 0;

				int deletedCount_tMysqlOutput_4 = 0;
				int updatedCount_tMysqlOutput_4 = 0;
				int insertedCount_tMysqlOutput_4 = 0;

				int rejectedCount_tMysqlOutput_4 = 0;

				String tableName_tMysqlOutput_4 = "WA_call_detail_measure";
				boolean whetherReject_tMysqlOutput_4 = false;

				java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar.getInstance();
				calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
				calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime().getTime();
				long date_tMysqlOutput_4;

				java.sql.Connection conn_tMysqlOutput_4 = null;
				String dbProperties_tMysqlOutput_4 = context.reporting_db_AdditionalParams;
				String url_tMysqlOutput_4 = null;
				if (dbProperties_tMysqlOutput_4 == null || dbProperties_tMysqlOutput_4.trim().length() == 0) {
					url_tMysqlOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_4 = context.reporting_db_AdditionalParams;
					if (!properties_tMysqlOutput_4.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?"
							+ properties_tMysqlOutput_4;
				}
				String driverClass_tMysqlOutput_4 = "com.mysql.jdbc.Driver";

				String dbUser_tMysqlOutput_4 = "root";

				final String decryptedPassword_tMysqlOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[g9kIeS6BkXjWacbPaWXAtoJl92G/b6dr6xAFrjqDcSthwgR6]");

				String dbPwd_tMysqlOutput_4 = decryptedPassword_tMysqlOutput_4;
				java.lang.Class.forName(driverClass_tMysqlOutput_4);

				conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(url_tMysqlOutput_4, dbUser_tMysqlOutput_4,
						dbPwd_tMysqlOutput_4);

				resourceMap.put("conn_tMysqlOutput_4", conn_tMysqlOutput_4);
				conn_tMysqlOutput_4.setAutoCommit(false);
				int commitEvery_tMysqlOutput_4 = 10000;
				int commitCounter_tMysqlOutput_4 = 0;

				int count_tMysqlOutput_4 = 0;

				String update_tMysqlOutput_4 = "UPDATE `" + "WA_call_detail_measure"
						+ "` SET `calling_msisdn` = ?,`call_id` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement(update_tMysqlOutput_4);
				resourceMap.put("pstmtUpdate_tMysqlOutput_4", pstmtUpdate_tMysqlOutput_4);
				String insert_tMysqlOutput_4 = "INSERT INTO `" + "WA_call_detail_measure"
						+ "` (`id`,`calling_msisdn`,`call_id`) VALUES (?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement(insert_tMysqlOutput_4);
				resourceMap.put("pstmtInsert_tMysqlOutput_4", pstmtInsert_tMysqlOutput_4);

				/**
				 * [tMysqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
					long var1;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				update_course_complete_timeStruct update_course_complete_time_tmp = new update_course_complete_timeStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMysqlInput_4 begin ] start
				 */

				ok_Hash.put("tMysqlInput_4", false);
				start_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				currentComponent = "tMysqlInput_4";

				int tos_count_tMysqlInput_4 = 0;

				java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar.getInstance();
				calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4.getTime();
				int nb_line_tMysqlInput_4 = 0;
				java.sql.Connection conn_tMysqlInput_4 = null;
				String driverClass_tMysqlInput_4 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tMysqlInput_4 = java.lang.Class.forName(driverClass_tMysqlInput_4);
				String dbUser_tMysqlInput_4 = "root";

				final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[ogmLnVmDkJj06YTrEglupgv6xDavQm07OMkbZJATndh3MDbs]");

				String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;

				String url_tMysqlInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services"
						+ "?" + context.motech_db_AdditionalParams;

				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(url_tMysqlInput_4, dbUser_tMysqlInput_4,
						dbPwd_tMysqlInput_4);

				java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4.createStatement();

				String dbquery_tMysqlInput_4 = "SELECT * FROM(SELECT ar.id, ar.creationDate ,ar.creationDate as 'complete_time',flw.id as 'flw_id'\nFROM MTRAINING_MODUL"
						+ "E_ACTIVITYRECORD ar\nINNER JOIN wash_swachchagrahi flw ON flw.contactNumber=ar.externalId\nWHERE ar.state='COMPLETED'\nAND "
						+ "ar.creationDate>'" + (String) globalMap.get("lastEtlTime")
						+ "'\nORDER BY ar.creationDate ASC) main \nCROSS JOIN (SELECT MAX(modificationDate) AS modificationDate FROM MTRAINING_MODUL"
						+ "E_ACTIVITYRECORD\nWHERE state='COMPLETED') act";

				globalMap.put("tMysqlInput_4_QUERY", dbquery_tMysqlInput_4);
				java.sql.ResultSet rs_tMysqlInput_4 = null;

				try {
					rs_tMysqlInput_4 = stmt_tMysqlInput_4.executeQuery(dbquery_tMysqlInput_4);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4.getMetaData();
					int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

					String tmpContent_tMysqlInput_4 = null;

					while (rs_tMysqlInput_4.next()) {
						nb_line_tMysqlInput_4++;

						if (colQtyInRs_tMysqlInput_4 < 1) {
							row4.id = 0;
						} else {

							row4.id = rs_tMysqlInput_4.getLong(1);
							if (rs_tMysqlInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_4 < 2) {
							row4.creationDate = null;
						} else {

							row4.creationDate = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 2, false);
						}
						if (colQtyInRs_tMysqlInput_4 < 3) {
							row4.complete_time = null;
						} else {

							if (rs_tMysqlInput_4.getString(3) != null) {
								String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(3);
								if (!("0000-00-00").equals(dateString_tMysqlInput_4)
										&& !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
									row4.complete_time = rs_tMysqlInput_4.getTimestamp(3);
								} else {
									row4.complete_time = (java.util.Date) year0_tMysqlInput_4.clone();
								}
							} else {
								row4.complete_time = null;
							}
						}
						if (colQtyInRs_tMysqlInput_4 < 4) {
							row4.flw_id = 0;
						} else {

							row4.flw_id = rs_tMysqlInput_4.getLong(4);
							if (rs_tMysqlInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_4 < 5) {
							row4.modificationDate = null;
						} else {

							if (rs_tMysqlInput_4.getString(5) != null) {
								String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(5);
								if (!("0000-00-00").equals(dateString_tMysqlInput_4)
										&& !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
									row4.modificationDate = rs_tMysqlInput_4.getTimestamp(5);
								} else {
									row4.modificationDate = (java.util.Date) year0_tMysqlInput_4.clone();
								}
							} else {
								row4.modificationDate = null;
							}
						}

						/**
						 * [tMysqlInput_4 begin ] stop
						 */

						/**
						 * [tMysqlInput_4 main ] start
						 */

						currentComponent = "tMysqlInput_4";

						tos_count_tMysqlInput_4++;

						/**
						 * [tMysqlInput_4 main ] stop
						 */

						/**
						 * [tMysqlInput_4 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_4";

						/**
						 * [tMysqlInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;
							Var.var1 = ReportingHelper.updateCourseTime(row4.flw_id, row4.creationDate,
									row4.complete_time, row4.modificationDate,
									(java.sql.Connection) resourceMap.get("conn_tMysqlOutput_4"));// ###############################
							// ###############################
							// # Output tables

							update_course_complete_time = null;

// # Output table : 'update_course_complete_time'
							update_course_complete_time_tmp.id = 0;
							update_course_complete_time_tmp.calling_msisdn = 0;
							update_course_complete_time_tmp.call_id = 0;
							update_course_complete_time = update_course_complete_time_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "update_course_complete_time"
						if (update_course_complete_time != null) {

							/**
							 * [tMysqlOutput_4 main ] start
							 */

							currentComponent = "tMysqlOutput_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "update_course_complete_time");
							}

							whetherReject_tMysqlOutput_4 = false;
							int updateFlag_tMysqlOutput_4 = 0;
							pstmtUpdate_tMysqlOutput_4.setLong(1, update_course_complete_time.calling_msisdn);

							pstmtUpdate_tMysqlOutput_4.setLong(2, update_course_complete_time.call_id);

							pstmtUpdate_tMysqlOutput_4.setLong(3 + count_tMysqlOutput_4,
									update_course_complete_time.id);

							try {
								updateFlag_tMysqlOutput_4 = pstmtUpdate_tMysqlOutput_4.executeUpdate();
								updatedCount_tMysqlOutput_4 = updatedCount_tMysqlOutput_4 + updateFlag_tMysqlOutput_4;

								if (updateFlag_tMysqlOutput_4 == 0) {

									pstmtInsert_tMysqlOutput_4.setLong(1, update_course_complete_time.id);

									pstmtInsert_tMysqlOutput_4.setLong(2, update_course_complete_time.calling_msisdn);

									pstmtInsert_tMysqlOutput_4.setLong(3, update_course_complete_time.call_id);

									insertedCount_tMysqlOutput_4 = insertedCount_tMysqlOutput_4
											+ pstmtInsert_tMysqlOutput_4.executeUpdate();
									nb_line_tMysqlOutput_4++;
								} else {
									nb_line_tMysqlOutput_4++;
								}
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_4 = true;
								nb_line_tMysqlOutput_4++;
								System.err.print(e.getMessage());
							}
							commitCounter_tMysqlOutput_4++;

							if (commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

								conn_tMysqlOutput_4.commit();
								commitCounter_tMysqlOutput_4 = 0;

							}

							tos_count_tMysqlOutput_4++;

							/**
							 * [tMysqlOutput_4 main ] stop
							 */

							/**
							 * [tMysqlOutput_4 process_data_begin ] start
							 */

							currentComponent = "tMysqlOutput_4";

							/**
							 * [tMysqlOutput_4 process_data_begin ] stop
							 */

							/**
							 * [tMysqlOutput_4 process_data_end ] start
							 */

							currentComponent = "tMysqlOutput_4";

							/**
							 * [tMysqlOutput_4 process_data_end ] stop
							 */

						} // End of branch "update_course_complete_time"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_4 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_4";

						/**
						 * [tMysqlInput_4 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_4 end ] start
						 */

						currentComponent = "tMysqlInput_4";

					}
				} finally {
					if (rs_tMysqlInput_4 != null) {
						rs_tMysqlInput_4.close();
					}
					if (stmt_tMysqlInput_4 != null) {
						stmt_tMysqlInput_4.close();
					}
					if (conn_tMysqlInput_4 != null && !conn_tMysqlInput_4.isClosed()) {

						conn_tMysqlInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tMysqlInput_4_NB_LINE", nb_line_tMysqlInput_4);

				ok_Hash.put("tMysqlInput_4", true);
				end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				/**
				 * [tMysqlInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMysqlOutput_4 end ] start
				 */

				currentComponent = "tMysqlOutput_4";

				if (pstmtUpdate_tMysqlOutput_4 != null) {
					pstmtUpdate_tMysqlOutput_4.close();
					resourceMap.remove("pstmtUpdate_tMysqlOutput_4");
				}
				if (pstmtInsert_tMysqlOutput_4 != null) {
					pstmtInsert_tMysqlOutput_4.close();
					resourceMap.remove("pstmtInsert_tMysqlOutput_4");
				}
				resourceMap.put("statementClosed_tMysqlOutput_4", true);
				if (commitCounter_tMysqlOutput_4 > 0) {

					conn_tMysqlOutput_4.commit();

				}

				conn_tMysqlOutput_4.close();

				resourceMap.put("finish_tMysqlOutput_4", true);

				nb_line_deleted_tMysqlOutput_4 = nb_line_deleted_tMysqlOutput_4 + deletedCount_tMysqlOutput_4;
				nb_line_update_tMysqlOutput_4 = nb_line_update_tMysqlOutput_4 + updatedCount_tMysqlOutput_4;
				nb_line_inserted_tMysqlOutput_4 = nb_line_inserted_tMysqlOutput_4 + insertedCount_tMysqlOutput_4;
				nb_line_rejected_tMysqlOutput_4 = nb_line_rejected_tMysqlOutput_4 + rejectedCount_tMysqlOutput_4;

				globalMap.put("tMysqlOutput_4_NB_LINE", nb_line_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED", nb_line_update_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED", nb_line_inserted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_DELETED", nb_line_deleted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "update_course_complete_time");
				}

				ok_Hash.put("tMysqlOutput_4", true);
				end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_4 finally ] start
				 */

				currentComponent = "tMysqlInput_4";

				/**
				 * [tMysqlInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMysqlOutput_4 finally ] start
				 */

				currentComponent = "tMysqlOutput_4";

				try {
					if (resourceMap.get("statementClosed_tMysqlOutput_4") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tMysqlOutput_4 = null;
						if ((pstmtUpdateToClose_tMysqlOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tMysqlOutput_4")) != null) {
							pstmtUpdateToClose_tMysqlOutput_4.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tMysqlOutput_4 = null;
						if ((pstmtInsertToClose_tMysqlOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tMysqlOutput_4")) != null) {
							pstmtInsertToClose_tMysqlOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMysqlOutput_4") == null) {
						java.sql.Connection ctn_tMysqlOutput_4 = null;
						if ((ctn_tMysqlOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tMysqlOutput_4")) != null) {
							try {
								ctn_tMysqlOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tMysqlOutput_4) {
								String errorMessage_tMysqlOutput_4 = "failed to close the connection in tMysqlOutput_4 :"
										+ sqlEx_tMysqlOutput_4.getMessage();
								System.err.println(errorMessage_tMysqlOutput_4);
							}
						}
					}
				}

				/**
				 * [tMysqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final WA_Call_Detail_test WA_Call_Detail_testClass = new WA_Call_Detail_test();

		int exitCode = WA_Call_Detail_testClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = WA_Call_Detail_test.class.getClassLoader().getResourceAsStream(
					"local_wash_new/wa_call_detail_test_0_2/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = WA_Call_Detail_test.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("motech_login", "id_String");
					context.motech_login = (String) context.getProperty("motech_login");
					context.setContextType("motech_database", "id_String");
					context.motech_database = (String) context.getProperty("motech_database");
					context.setContextType("motech_port", "id_String");
					context.motech_port = (String) context.getProperty("motech_port");
					context.setContextType("motech_password", "id_Password");
					String pwd_motech_password_value = context.getProperty("motech_password");
					context.motech_password = null;
					if (pwd_motech_password_value != null) {
						if (context_param.containsKey("motech_password")) {// no need to decrypt if it come from program
																			// argument or parent job runtime
							context.motech_password = pwd_motech_password_value;
						} else if (!pwd_motech_password_value.isEmpty()) {
							try {
								context.motech_password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_motech_password_value);
								context.put("motech_password", context.motech_password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("motech_additionalParams", "id_String");
					context.motech_additionalParams = (String) context.getProperty("motech_additionalParams");
					context.setContextType("motech_server", "id_String");
					context.motech_server = (String) context.getProperty("motech_server");
					context.setContextType("report_port", "id_String");
					context.report_port = (String) context.getProperty("report_port");
					context.setContextType("report_server", "id_String");
					context.report_server = (String) context.getProperty("report_server");
					context.setContextType("report_database", "id_String");
					context.report_database = (String) context.getProperty("report_database");
					context.setContextType("report_login", "id_String");
					context.report_login = (String) context.getProperty("report_login");
					context.setContextType("report_password", "id_Password");
					String pwd_report_password_value = context.getProperty("report_password");
					context.report_password = null;
					if (pwd_report_password_value != null) {
						if (context_param.containsKey("report_password")) {// no need to decrypt if it come from program
																			// argument or parent job runtime
							context.report_password = pwd_report_password_value;
						} else if (!pwd_report_password_value.isEmpty()) {
							try {
								context.report_password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_report_password_value);
								context.put("report_password", context.report_password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("report_AdditionalParams", "id_String");
					context.report_AdditionalParams = (String) context.getProperty("report_AdditionalParams");
					context.setContextType("reporting_db_Password", "id_Password");
					String pwd_reporting_db_Password_value = context.getProperty("reporting_db_Password");
					context.reporting_db_Password = null;
					if (pwd_reporting_db_Password_value != null) {
						if (context_param.containsKey("reporting_db_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
							context.reporting_db_Password = pwd_reporting_db_Password_value;
						} else if (!pwd_reporting_db_Password_value.isEmpty()) {
							try {
								context.reporting_db_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_reporting_db_Password_value);
								context.put("reporting_db_Password", context.reporting_db_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("reporting_db_Server", "id_String");
					context.reporting_db_Server = (String) context.getProperty("reporting_db_Server");
					context.setContextType("reporting_db_Login", "id_String");
					context.reporting_db_Login = (String) context.getProperty("reporting_db_Login");
					context.setContextType("reporting_db_Database", "id_String");
					context.reporting_db_Database = (String) context.getProperty("reporting_db_Database");
					context.setContextType("reporting_db_AdditionalParams", "id_String");
					context.reporting_db_AdditionalParams = (String) context
							.getProperty("reporting_db_AdditionalParams");
					context.setContextType("reporting_db_Port", "id_String");
					context.reporting_db_Port = (String) context.getProperty("reporting_db_Port");
					context.setContextType("motech_db_Port", "id_String");
					context.motech_db_Port = (String) context.getProperty("motech_db_Port");
					context.setContextType("motech_db_Login", "id_String");
					context.motech_db_Login = (String) context.getProperty("motech_db_Login");
					context.setContextType("motech_db_Password", "id_Password");
					String pwd_motech_db_Password_value = context.getProperty("motech_db_Password");
					context.motech_db_Password = null;
					if (pwd_motech_db_Password_value != null) {
						if (context_param.containsKey("motech_db_Password")) {// no need to decrypt if it come from
																				// program argument or parent job
																				// runtime
							context.motech_db_Password = pwd_motech_db_Password_value;
						} else if (!pwd_motech_db_Password_value.isEmpty()) {
							try {
								context.motech_db_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_motech_db_Password_value);
								context.put("motech_db_Password", context.motech_db_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("motech_db_Database", "id_String");
					context.motech_db_Database = (String) context.getProperty("motech_db_Database");
					context.setContextType("motech_db_AdditionalParams", "id_String");
					context.motech_db_AdditionalParams = (String) context.getProperty("motech_db_AdditionalParams");
					context.setContextType("motech_db_Server", "id_String");
					context.motech_db_Server = (String) context.getProperty("motech_db_Server");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("motech_login")) {
				context.motech_login = (String) parentContextMap.get("motech_login");
			}
			if (parentContextMap.containsKey("motech_database")) {
				context.motech_database = (String) parentContextMap.get("motech_database");
			}
			if (parentContextMap.containsKey("motech_port")) {
				context.motech_port = (String) parentContextMap.get("motech_port");
			}
			if (parentContextMap.containsKey("motech_password")) {
				context.motech_password = (java.lang.String) parentContextMap.get("motech_password");
			}
			if (parentContextMap.containsKey("motech_additionalParams")) {
				context.motech_additionalParams = (String) parentContextMap.get("motech_additionalParams");
			}
			if (parentContextMap.containsKey("motech_server")) {
				context.motech_server = (String) parentContextMap.get("motech_server");
			}
			if (parentContextMap.containsKey("report_port")) {
				context.report_port = (String) parentContextMap.get("report_port");
			}
			if (parentContextMap.containsKey("report_server")) {
				context.report_server = (String) parentContextMap.get("report_server");
			}
			if (parentContextMap.containsKey("report_database")) {
				context.report_database = (String) parentContextMap.get("report_database");
			}
			if (parentContextMap.containsKey("report_login")) {
				context.report_login = (String) parentContextMap.get("report_login");
			}
			if (parentContextMap.containsKey("report_password")) {
				context.report_password = (java.lang.String) parentContextMap.get("report_password");
			}
			if (parentContextMap.containsKey("report_AdditionalParams")) {
				context.report_AdditionalParams = (String) parentContextMap.get("report_AdditionalParams");
			}
			if (parentContextMap.containsKey("reporting_db_Password")) {
				context.reporting_db_Password = (java.lang.String) parentContextMap.get("reporting_db_Password");
			}
			if (parentContextMap.containsKey("reporting_db_Server")) {
				context.reporting_db_Server = (String) parentContextMap.get("reporting_db_Server");
			}
			if (parentContextMap.containsKey("reporting_db_Login")) {
				context.reporting_db_Login = (String) parentContextMap.get("reporting_db_Login");
			}
			if (parentContextMap.containsKey("reporting_db_Database")) {
				context.reporting_db_Database = (String) parentContextMap.get("reporting_db_Database");
			}
			if (parentContextMap.containsKey("reporting_db_AdditionalParams")) {
				context.reporting_db_AdditionalParams = (String) parentContextMap.get("reporting_db_AdditionalParams");
			}
			if (parentContextMap.containsKey("reporting_db_Port")) {
				context.reporting_db_Port = (String) parentContextMap.get("reporting_db_Port");
			}
			if (parentContextMap.containsKey("motech_db_Port")) {
				context.motech_db_Port = (String) parentContextMap.get("motech_db_Port");
			}
			if (parentContextMap.containsKey("motech_db_Login")) {
				context.motech_db_Login = (String) parentContextMap.get("motech_db_Login");
			}
			if (parentContextMap.containsKey("motech_db_Password")) {
				context.motech_db_Password = (java.lang.String) parentContextMap.get("motech_db_Password");
			}
			if (parentContextMap.containsKey("motech_db_Database")) {
				context.motech_db_Database = (String) parentContextMap.get("motech_db_Database");
			}
			if (parentContextMap.containsKey("motech_db_AdditionalParams")) {
				context.motech_db_AdditionalParams = (String) parentContextMap.get("motech_db_AdditionalParams");
			}
			if (parentContextMap.containsKey("motech_db_Server")) {
				context.motech_db_Server = (String) parentContextMap.get("motech_db_Server");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("motech_password");
		parametersToEncrypt.add("report_password");
		parametersToEncrypt.add("reporting_db_Password");
		parametersToEncrypt.add("motech_db_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : WA_Call_Detail_test");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 260161 characters generated by Talend Open Studio for Data Integration on the
 * 20 November, 2019 3:38:37 PM IST
 ************************************************************************************************/