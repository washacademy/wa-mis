// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package wash_odf_updated.wa_call_details_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.ReportingHelper;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: WA_call_details Purpose: WA_call_details<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class WA_call_details implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(reporting_db_Port != null){
				
					this.setProperty("reporting_db_Port", reporting_db_Port.toString());
				
			}
			
			if(reporting_db_Database != null){
				
					this.setProperty("reporting_db_Database", reporting_db_Database.toString());
				
			}
			
			if(reporting_db_Password != null){
				
					this.setProperty("reporting_db_Password", reporting_db_Password.toString());
				
			}
			
			if(reporting_db_Login != null){
				
					this.setProperty("reporting_db_Login", reporting_db_Login.toString());
				
			}
			
			if(reporting_db_Server != null){
				
					this.setProperty("reporting_db_Server", reporting_db_Server.toString());
				
			}
			
			if(reporting_db_AdditionalParams != null){
				
					this.setProperty("reporting_db_AdditionalParams", reporting_db_AdditionalParams.toString());
				
			}
			
			if(motech_db_Database != null){
				
					this.setProperty("motech_db_Database", motech_db_Database.toString());
				
			}
			
			if(motech_db_Login != null){
				
					this.setProperty("motech_db_Login", motech_db_Login.toString());
				
			}
			
			if(motech_db_AdditionalParams != null){
				
					this.setProperty("motech_db_AdditionalParams", motech_db_AdditionalParams.toString());
				
			}
			
			if(motech_db_Password != null){
				
					this.setProperty("motech_db_Password", motech_db_Password.toString());
				
			}
			
			if(motech_db_Server != null){
				
					this.setProperty("motech_db_Server", motech_db_Server.toString());
				
			}
			
			if(motech_db_Port != null){
				
					this.setProperty("motech_db_Port", motech_db_Port.toString());
				
			}
			
		}

public String reporting_db_Port;
public String getReporting_db_Port(){
	return this.reporting_db_Port;
}
public String reporting_db_Database;
public String getReporting_db_Database(){
	return this.reporting_db_Database;
}
public java.lang.String reporting_db_Password;
public java.lang.String getReporting_db_Password(){
	return this.reporting_db_Password;
}
public String reporting_db_Login;
public String getReporting_db_Login(){
	return this.reporting_db_Login;
}
public String reporting_db_Server;
public String getReporting_db_Server(){
	return this.reporting_db_Server;
}
public String reporting_db_AdditionalParams;
public String getReporting_db_AdditionalParams(){
	return this.reporting_db_AdditionalParams;
}
public String motech_db_Database;
public String getMotech_db_Database(){
	return this.motech_db_Database;
}
public String motech_db_Login;
public String getMotech_db_Login(){
	return this.motech_db_Login;
}
public String motech_db_AdditionalParams;
public String getMotech_db_AdditionalParams(){
	return this.motech_db_AdditionalParams;
}
public java.lang.String motech_db_Password;
public java.lang.String getMotech_db_Password(){
	return this.motech_db_Password;
}
public String motech_db_Server;
public String getMotech_db_Server(){
	return this.motech_db_Server;
}
public String motech_db_Port;
public String getMotech_db_Port(){
	return this.motech_db_Port;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "WA_call_details";
	private final String projectName = "WASH_ODF_UPDATED";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				WA_call_details.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(WA_call_details.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_call_details.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_call_details.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tContextLoad_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_3", false);
		start_Hash.put("tContextLoad_3", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tContextLoad_3 = 0;
		
	java.util.List<String> assignList_tContextLoad_3 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_3 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_3 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_3 = 0;

 



/**
 * [tContextLoad_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tContextLoad_3 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_3 = null;
                    String key_tContextLoad_3 = null;
                      if (row1.key != null){
                          tmp_key_tContextLoad_3 = row1.key.trim();
                        if ((tmp_key_tContextLoad_3.startsWith("#") || tmp_key_tContextLoad_3.startsWith("!") )){
                          tmp_key_tContextLoad_3 = null;
                        } else {
                          row1.key = tmp_key_tContextLoad_3;
                        }
                      }
                        if(row1.key != null) {
                    key_tContextLoad_3 =
                        row1.key;
                        }
                    String value_tContextLoad_3 = null;
                        if(row1.value != null) {
                    value_tContextLoad_3 =
                        row1.value;
                        }
				
				String currentValue_tContextLoad_3 = value_tContextLoad_3;
										
						if ((key_tContextLoad_3 != null) && ("reporting_db_Password".equals(key_tContextLoad_3)) ) currentValue_tContextLoad_3 = currentValue_tContextLoad_3.replaceAll(".", "*");						
						if ((key_tContextLoad_3 != null) && ("motech_db_Password".equals(key_tContextLoad_3)) ) currentValue_tContextLoad_3 = currentValue_tContextLoad_3.replaceAll(".", "*");

  if (tmp_key_tContextLoad_3 != null){
  try{
        if(key_tContextLoad_3!=null && "reporting_db_Port".equals(key_tContextLoad_3))
        {
           context.reporting_db_Port=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "reporting_db_Database".equals(key_tContextLoad_3))
        {
           context.reporting_db_Database=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "reporting_db_Password".equals(key_tContextLoad_3))
        {
           context.reporting_db_Password=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "reporting_db_Login".equals(key_tContextLoad_3))
        {
           context.reporting_db_Login=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "reporting_db_Server".equals(key_tContextLoad_3))
        {
           context.reporting_db_Server=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "reporting_db_AdditionalParams".equals(key_tContextLoad_3))
        {
           context.reporting_db_AdditionalParams=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "motech_db_Database".equals(key_tContextLoad_3))
        {
           context.motech_db_Database=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "motech_db_Login".equals(key_tContextLoad_3))
        {
           context.motech_db_Login=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "motech_db_AdditionalParams".equals(key_tContextLoad_3))
        {
           context.motech_db_AdditionalParams=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "motech_db_Password".equals(key_tContextLoad_3))
        {
           context.motech_db_Password=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "motech_db_Server".equals(key_tContextLoad_3))
        {
           context.motech_db_Server=value_tContextLoad_3;
        }

        if(key_tContextLoad_3!=null && "motech_db_Port".equals(key_tContextLoad_3))
        {
           context.motech_db_Port=value_tContextLoad_3;
        }


        if (context.getProperty(key_tContextLoad_3)!=null)
        {
            assignList_tContextLoad_3.add(key_tContextLoad_3);
        }else  {
            newPropertyList_tContextLoad_3.add(key_tContextLoad_3);
        }
        if(value_tContextLoad_3 == null){
            context.setProperty(key_tContextLoad_3, "");
        }else{
            context.setProperty(key_tContextLoad_3,value_tContextLoad_3);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_3 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_3++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_3++;

/**
 * [tContextLoad_3 main ] stop
 */
	
	/**
	 * [tContextLoad_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_3";

	

 



/**
 * [tContextLoad_3 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_3";

	

 



/**
 * [tContextLoad_3 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_3 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_3";

	
	
	java.util.Enumeration<?> enu_tContextLoad_3 = context.propertyNames();
    while(enu_tContextLoad_3.hasMoreElements())
    {           
    	String key_tContextLoad_3 = (String)enu_tContextLoad_3.nextElement();
        if(!assignList_tContextLoad_3.contains(key_tContextLoad_3) && !newPropertyList_tContextLoad_3.contains(key_tContextLoad_3))
        {
            noAssignList_tContextLoad_3.add(key_tContextLoad_3);
        }          
    } 

    String newPropertyStr_tContextLoad_3 = newPropertyList_tContextLoad_3.toString();
    String newProperty_tContextLoad_3 = newPropertyStr_tContextLoad_3.substring(1, newPropertyStr_tContextLoad_3.length() - 1);
    
    String noAssignStr_tContextLoad_3 = noAssignList_tContextLoad_3.toString();
    String noAssign_tContextLoad_3 = noAssignStr_tContextLoad_3.substring(1, noAssignStr_tContextLoad_3.length() - 1);
    
    globalMap.put("tContextLoad_3_KEY_NOT_INCONTEXT", newProperty_tContextLoad_3);
    globalMap.put("tContextLoad_3_KEY_NOT_LOADED", noAssign_tContextLoad_3);

    globalMap.put("tContextLoad_3_NB_LINE",nb_line_tContextLoad_3);

	List<String> parametersToEncrypt_tContextLoad_3 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_3.add("reporting_db_Password");
		
		parametersToEncrypt_tContextLoad_3.add("motech_db_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_3", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_3));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tContextLoad_3", true);
end_Hash.put("tContextLoad_3", System.currentTimeMillis());




/**
 * [tContextLoad_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMysqlInput_2Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tMysqlInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_3 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_3";

	

 



/**
 * [tContextLoad_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[0];

	
			    public String last_etl_time;

				public String getLast_etl_time () {
					return this.last_etl_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_call_details.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_call_details.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details) {

        	try {

        		int length = 0;
		
					this.last_etl_time = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.last_etl_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("last_etl_time="+last_etl_time);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_2 = java.lang.Class.forName(driverClass_tMysqlInput_2);
					String dbUser_tMysqlInput_2 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[G8LtrP1r8yRk39gwRWV4LHL0j0EMi5pbyW8Qo1h46ReWplCf]");
					
					String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "SELECT last_etl_time FROM ETL_info_table WHERE table_id=13";
			

            	globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);
		    java.sql.ResultSet rs_tMysqlInput_2 = null;

		    try {
		    	rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    	int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								row2.last_etl_time = null;
							} else {
	                         		
        	row2.last_etl_time = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */
	
	/**
	 * [tMysqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

    globalMap.put("lastEtlTime",row2.last_etl_time!=null ?row2.last_etl_time:"");

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if (rs_tMysqlInput_2 != null) {
		rs_tMysqlInput_2.close();
	}
	if (stmt_tMysqlInput_2 != null) {
		stmt_tMysqlInput_2.close();
	}
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ma_call_detailsStruct implements routines.system.IPersistableRow<ma_call_detailsStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public Long swc_id;

				public Long getSwc_id () {
					return this.swc_id;
				}
				
			    public String mobile_number;

				public String getMobile_number () {
					return this.mobile_number;
				}
				
			    public Long operator_id;

				public Long getOperator_id () {
					return this.operator_id;
				}
				
			    public Integer circle_id;

				public Integer getCircle_id () {
					return this.circle_id;
				}
				
			    public String start_time;

				public String getStart_time () {
					return this.start_time;
				}
				
			    public String end_time;

				public String getEnd_time () {
					return this.end_time;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				
			    public Integer duration_in_pulse;

				public Integer getDuration_in_pulse () {
					return this.duration_in_pulse;
				}
				
			    public String call_id;

				public String getCall_id () {
					return this.call_id;
				}
				
			    public String modificationDate;

				public String getModificationDate () {
					return this.modificationDate;
				}
				
			    public int courseId;

				public int getCourseId () {
					return this.courseId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ma_call_detailsStruct other = (ma_call_detailsStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ma_call_detailsStruct other) {

		other.id = this.id;
	            other.swc_id = this.swc_id;
	            other.mobile_number = this.mobile_number;
	            other.operator_id = this.operator_id;
	            other.circle_id = this.circle_id;
	            other.start_time = this.start_time;
	            other.end_time = this.end_time;
	            other.duration = this.duration;
	            other.duration_in_pulse = this.duration_in_pulse;
	            other.call_id = this.call_id;
	            other.modificationDate = this.modificationDate;
	            other.courseId = this.courseId;
	            
	}

	public void copyKeysDataTo(ma_call_detailsStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_call_details.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_call_details.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.swc_id = null;
           				} else {
           			    	this.swc_id = dis.readLong();
           				}
					
					this.mobile_number = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.operator_id = null;
           				} else {
           			    	this.operator_id = dis.readLong();
           				}
					
						this.circle_id = readInteger(dis);
					
					this.start_time = readString(dis);
					
					this.end_time = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
						this.duration_in_pulse = readInteger(dis);
					
					this.call_id = readString(dis);
					
					this.modificationDate = readString(dis);
					
			        this.courseId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// Long
				
						if(this.swc_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.swc_id);
		            	}
					
					// String
				
						writeString(this.mobile_number,dos);
					
					// Long
				
						if(this.operator_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.operator_id);
		            	}
					
					// Integer
				
						writeInteger(this.circle_id,dos);
					
					// String
				
						writeString(this.start_time,dos);
					
					// String
				
						writeString(this.end_time,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
					// Integer
				
						writeInteger(this.duration_in_pulse,dos);
					
					// String
				
						writeString(this.call_id,dos);
					
					// String
				
						writeString(this.modificationDate,dos);
					
					// int
				
		            	dos.writeInt(this.courseId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",swc_id="+String.valueOf(swc_id));
		sb.append(",mobile_number="+mobile_number);
		sb.append(",operator_id="+String.valueOf(operator_id));
		sb.append(",circle_id="+String.valueOf(circle_id));
		sb.append(",start_time="+start_time);
		sb.append(",end_time="+end_time);
		sb.append(",duration="+String.valueOf(duration));
		sb.append(",duration_in_pulse="+String.valueOf(duration_in_pulse));
		sb.append(",call_id="+call_id);
		sb.append(",modificationDate="+modificationDate);
		sb.append(",courseId="+String.valueOf(courseId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ma_call_detailsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[0];

	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public Long flw_id;

				public Long getFlw_id () {
					return this.flw_id;
				}
				
			    public String callingNumber;

				public String getCallingNumber () {
					return this.callingNumber;
				}
				
			    public String operator;

				public String getOperator () {
					return this.operator;
				}
				
			    public Integer circle_id;

				public Integer getCircle_id () {
					return this.circle_id;
				}
				
			    public String callStartTime;

				public String getCallStartTime () {
					return this.callStartTime;
				}
				
			    public String callEndTime;

				public String getCallEndTime () {
					return this.callEndTime;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				
			    public Integer callDurationInPulses;

				public Integer getCallDurationInPulses () {
					return this.callDurationInPulses;
				}
				
			    public String callId;

				public String getCallId () {
					return this.callId;
				}
				
			    public String modificationDate;

				public String getModificationDate () {
					return this.modificationDate;
				}
				
			    public int courseId;

				public int getCourseId () {
					return this.courseId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_call_details.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_call_details.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_call_details = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_call_details, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_call_details) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flw_id = null;
           				} else {
           			    	this.flw_id = dis.readLong();
           				}
					
					this.callingNumber = readString(dis);
					
					this.operator = readString(dis);
					
						this.circle_id = readInteger(dis);
					
					this.callStartTime = readString(dis);
					
					this.callEndTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
						this.callDurationInPulses = readInteger(dis);
					
					this.callId = readString(dis);
					
					this.modificationDate = readString(dis);
					
			        this.courseId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// Long
				
						if(this.flw_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flw_id);
		            	}
					
					// String
				
						writeString(this.callingNumber,dos);
					
					// String
				
						writeString(this.operator,dos);
					
					// Integer
				
						writeInteger(this.circle_id,dos);
					
					// String
				
						writeString(this.callStartTime,dos);
					
					// String
				
						writeString(this.callEndTime,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
					// Integer
				
						writeInteger(this.callDurationInPulses,dos);
					
					// String
				
						writeString(this.callId,dos);
					
					// String
				
						writeString(this.modificationDate,dos);
					
					// int
				
		            	dos.writeInt(this.courseId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",flw_id="+String.valueOf(flw_id));
		sb.append(",callingNumber="+callingNumber);
		sb.append(",operator="+operator);
		sb.append(",circle_id="+String.valueOf(circle_id));
		sb.append(",callStartTime="+callStartTime);
		sb.append(",callEndTime="+callEndTime);
		sb.append(",duration="+String.valueOf(duration));
		sb.append(",callDurationInPulses="+String.valueOf(callDurationInPulses));
		sb.append(",callId="+callId);
		sb.append(",modificationDate="+modificationDate);
		sb.append(",courseId="+String.valueOf(courseId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
ma_call_detailsStruct ma_call_details = new ma_call_detailsStruct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ma_call_details");
					}
				
		int tos_count_tMysqlOutput_1 = 0;
		





        int updateKeyCount_tMysqlOutput_1 = 1;
        if(updateKeyCount_tMysqlOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "WA_call_detail_measure";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_1 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[MtntQgU9sv1zMRjHYdYGsYUjEiFiY/RCZEyEzjcwVHxMuWR8]");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
	    java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement("SELECT COUNT(1) FROM `" + "WA_call_detail_measure" + "` WHERE `id` = ?");
	    resourceMap.put("pstmt_tMysqlOutput_1", pstmt_tMysqlOutput_1);
	    String insert_tMysqlOutput_1 = "INSERT INTO `" + "WA_call_detail_measure" + "` (`id`,`swc_id`,`mobile_number`,`operator_id`,`circle_id`,`start_time`,`end_time`,`duration`,`duration_in_pulse`,`call_id`,`modificationDate`,`courseId`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);
	    resourceMap.put("pstmtInsert_tMysqlOutput_1", pstmtInsert_tMysqlOutput_1);
	    String update_tMysqlOutput_1 = "UPDATE `" + "WA_call_detail_measure" + "` SET `swc_id` = ?,`mobile_number` = ?,`operator_id` = ?,`circle_id` = ?,`start_time` = ?,`end_time` = ?,`duration` = ?,`duration_in_pulse` = ?,`call_id` = ?,`modificationDate` = ?,`courseId` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(update_tMysqlOutput_1);
	    resourceMap.put("pstmtUpdate_tMysqlOutput_1", pstmtUpdate_tMysqlOutput_1);
	    

 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ma_call_detailsStruct ma_call_details_tmp = new ma_call_detailsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_3 = java.lang.Class.forName(driverClass_tMysqlInput_3);
					String dbUser_tMysqlInput_3 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[LSDTuEpi0lyLtWhpnyAhpjSD9RFcMEzrpBrBHSouzKpi0f53]");
					
					String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;
				
				String url_tMysqlInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services" + "?" + context.motech_db_AdditionalParams;
				
				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3,dbUser_tMysqlInput_3,dbPwd_tMysqlInput_3);
		        
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "SELECT cdr.id,cdr.swachchagrahi_id_OID as 'flw_id',cdr.callingNumber,\ncdr.operator,cir.id as circle_id,cdr.callStartTim"
+"e,cdr.callEndTime,\nTIMESTAMPDIFF(SECOND,cdr.callStartTime, cdr.callEndTime) as 'duration',\ncdr.callDurationInPulses,cdr."
+"callId,\ncdr.modificationDate,cdr.courseId\nFROM wash_swachgrahi_cdrs cdr\nJOIN wash_circles cir on cdr.circle=cir.name\nWHE"
+"RE cdr.service='WASH_ACADEMY' \nAND cdr.creationDate>'"+(String)globalMap.get("lastEtlTime")+"'\nORDER BY cdr.creationDate ASC";
			

            	globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);
		    java.sql.ResultSet rs_tMysqlInput_3 = null;

		    try {
		    	rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    	int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								row3.id = null;
							} else {
		                          
            row3.id = rs_tMysqlInput_3.getLong(1);
            if(rs_tMysqlInput_3.wasNull()){
                    row3.id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 2) {
								row3.flw_id = null;
							} else {
		                          
            row3.flw_id = rs_tMysqlInput_3.getLong(2);
            if(rs_tMysqlInput_3.wasNull()){
                    row3.flw_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 3) {
								row3.callingNumber = null;
							} else {
	                         		
        	row3.callingNumber = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 4) {
								row3.operator = null;
							} else {
	                         		
        	row3.operator = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 5) {
								row3.circle_id = null;
							} else {
		                          
            row3.circle_id = rs_tMysqlInput_3.getInt(5);
            if(rs_tMysqlInput_3.wasNull()){
                    row3.circle_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 6) {
								row3.callStartTime = null;
							} else {
	                         		
        	row3.callStartTime = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 7) {
								row3.callEndTime = null;
							} else {
	                         		
        	row3.callEndTime = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 8) {
								row3.duration = null;
							} else {
		                          
            row3.duration = rs_tMysqlInput_3.getLong(8);
            if(rs_tMysqlInput_3.wasNull()){
                    row3.duration = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 9) {
								row3.callDurationInPulses = null;
							} else {
		                          
            row3.callDurationInPulses = rs_tMysqlInput_3.getInt(9);
            if(rs_tMysqlInput_3.wasNull()){
                    row3.callDurationInPulses = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 10) {
								row3.callId = null;
							} else {
	                         		
        	row3.callId = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 11) {
								row3.modificationDate = null;
							} else {
	                         		
        	row3.modificationDate = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 12) {
								row3.courseId = 0;
							} else {
		                          
            row3.courseId = rs_tMysqlInput_3.getInt(12);
            if(rs_tMysqlInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */
	
	/**
	 * [tMysqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ma_call_details = null;


// # Output table : 'ma_call_details'
ma_call_details_tmp.id = row3.id;
ma_call_details_tmp.swc_id = row3.flw_id;
ma_call_details_tmp.mobile_number = row3.callingNumber ;
ma_call_details_tmp.operator_id = ReportingHelper.getOperator(row3.operator,(java.sql.Connection) resourceMap
	.get("conn_tMysqlOutput_1"),globalMap) ;
ma_call_details_tmp.circle_id = row3.circle_id;
ma_call_details_tmp.start_time = row3.callStartTime ;
ma_call_details_tmp.end_time = row3.callEndTime ;
ma_call_details_tmp.duration =  row3.duration ;
ma_call_details_tmp.duration_in_pulse =  row3.callDurationInPulses ;
ma_call_details_tmp.call_id = row3.callId ;
ma_call_details_tmp.modificationDate = row3.modificationDate;
ma_call_details_tmp.courseId = row3.courseId;
ma_call_details = ma_call_details_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "ma_call_details"
if(ma_call_details != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ma_call_details");
					}
					



        whetherReject_tMysqlOutput_1 = false;
                    if(ma_call_details.id == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setLong(1, ma_call_details.id);
}

            int checkCount_tMysqlOutput_1 = -1;
            try (java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1.executeQuery()) {
                while(rs_tMysqlOutput_1.next()) {
                    checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1.getInt(1);
                }
            }
            if(checkCount_tMysqlOutput_1 > 0) {
                        if(ma_call_details.swc_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(1, ma_call_details.swc_id);
}

                        if(ma_call_details.mobile_number == null) {
pstmtUpdate_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(2, ma_call_details.mobile_number);
}

                        if(ma_call_details.operator_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(3, ma_call_details.operator_id);
}

                        if(ma_call_details.circle_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setInt(4, ma_call_details.circle_id);
}

                        if(ma_call_details.start_time == null) {
pstmtUpdate_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(5, ma_call_details.start_time);
}

                        if(ma_call_details.end_time == null) {
pstmtUpdate_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(6, ma_call_details.end_time);
}

                        if(ma_call_details.duration == null) {
pstmtUpdate_tMysqlOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(7, ma_call_details.duration);
}

                        if(ma_call_details.duration_in_pulse == null) {
pstmtUpdate_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setInt(8, ma_call_details.duration_in_pulse);
}

                        if(ma_call_details.call_id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(9, ma_call_details.call_id);
}

                        if(ma_call_details.modificationDate == null) {
pstmtUpdate_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tMysqlOutput_1.setString(10, ma_call_details.modificationDate);
}

                        pstmtUpdate_tMysqlOutput_1.setInt(11, ma_call_details.courseId);

                        if(ma_call_details.id == null) {
pstmtUpdate_tMysqlOutput_1.setNull(12 + count_tMysqlOutput_1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tMysqlOutput_1.setLong(12 + count_tMysqlOutput_1, ma_call_details.id);
}

                try {
                    updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1 + pstmtUpdate_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                        nb_line_tMysqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(ma_call_details.id == null) {
pstmtInsert_tMysqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(1, ma_call_details.id);
}

                        if(ma_call_details.swc_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(2, ma_call_details.swc_id);
}

                        if(ma_call_details.mobile_number == null) {
pstmtInsert_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(3, ma_call_details.mobile_number);
}

                        if(ma_call_details.operator_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(4, ma_call_details.operator_id);
}

                        if(ma_call_details.circle_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setInt(5, ma_call_details.circle_id);
}

                        if(ma_call_details.start_time == null) {
pstmtInsert_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(6, ma_call_details.start_time);
}

                        if(ma_call_details.end_time == null) {
pstmtInsert_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(7, ma_call_details.end_time);
}

                        if(ma_call_details.duration == null) {
pstmtInsert_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setLong(8, ma_call_details.duration);
}

                        if(ma_call_details.duration_in_pulse == null) {
pstmtInsert_tMysqlOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tMysqlOutput_1.setInt(9, ma_call_details.duration_in_pulse);
}

                        if(ma_call_details.call_id == null) {
pstmtInsert_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(10, ma_call_details.call_id);
}

                        if(ma_call_details.modificationDate == null) {
pstmtInsert_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tMysqlOutput_1.setString(11, ma_call_details.modificationDate);
}

                        pstmtInsert_tMysqlOutput_1.setInt(12, ma_call_details.courseId);

                try {
                    insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1 + pstmtInsert_tMysqlOutput_1.executeUpdate();
                    nb_line_tMysqlOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tMysqlOutput_1 = true;
                        nb_line_tMysqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tMysqlOutput_1) {
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "ma_call_details"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if (rs_tMysqlInput_3 != null) {
		rs_tMysqlInput_3.close();
	}
	if (stmt_tMysqlInput_3 != null) {
		stmt_tMysqlInput_3.close();
	}
		if(conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {
			
			conn_tMysqlInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



        if(pstmtUpdate_tMysqlOutput_1 != null){
            pstmtUpdate_tMysqlOutput_1.close();
            resourceMap.remove("pstmtUpdate_tMysqlOutput_1");
        }
        if(pstmtInsert_tMysqlOutput_1 != null){
            pstmtInsert_tMysqlOutput_1.close();
            resourceMap.remove("pstmtInsert_tMysqlOutput_1");
        }
        if(pstmt_tMysqlOutput_1 != null) {
            pstmt_tMysqlOutput_1.close();
            resourceMap.remove("pstmt_tMysqlOutput_1");
        }
    resourceMap.put("statementClosed_tMysqlOutput_1", true);
    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ma_call_details");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMysqlRow_1Process(globalMap);



/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tMysqlOutput_1 = null;
                if ((pstmtUpdateToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tMysqlOutput_1")) != null) {
                    pstmtUpdateToClose_tMysqlOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tMysqlOutput_1 = null;
                if ((pstmtInsertToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tMysqlOutput_1")) != null) {
                    pstmtInsertToClose_tMysqlOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_1 = null;
                if ((pstmtToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_1")) != null) {
                    pstmtToClose_tMysqlOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_1") == null){
            java.sql.Connection ctn_tMysqlOutput_1 = null;
            if((ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1")) != null){
                try {
                    ctn_tMysqlOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
                    String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_1);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlRow_1", false);
		start_Hash.put("tMysqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlRow_1";

	
		int tos_count_tMysqlRow_1 = 0;
		

	java.sql.Connection conn_tMysqlRow_1 = null;
	String query_tMysqlRow_1 = "";
	boolean whetherReject_tMysqlRow_1 = false;
			String driverClass_tMysqlRow_1 = "com.mysql.jdbc.Driver";
		    java.lang.Class jdbcclazz_tMysqlRow_1 = java.lang.Class.forName(driverClass_tMysqlRow_1);
		
				String url_tMysqlRow_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
					String dbUser_tMysqlRow_1 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tMysqlRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[RPmqEGg/dIueVIpVL2w+SMN6T1DtiLJ/xGoUOFBXG6J6D+B+]");
        		   	
        	        String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;
	        
					
			conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(url_tMysqlRow_1,dbUser_tMysqlRow_1,dbPwd_tMysqlRow_1);
		
    resourceMap.put("conn_tMysqlRow_1", conn_tMysqlRow_1);
					if(conn_tMysqlRow_1.getAutoCommit()) {
						
				conn_tMysqlRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tMysqlRow_1 = 10000;
					int commitCounter_tMysqlRow_1 = 0;
				
        java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1.createStatement();
        resourceMap.put("stmt_tMysqlRow_1", stmt_tMysqlRow_1);

 



/**
 * [tMysqlRow_1 begin ] stop
 */
	
	/**
	 * [tMysqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

query_tMysqlRow_1 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT max(modificationDate) from \n WA_call_detail_measure),\n"
+"ETL_info_table.record_count=(SELECT COUNT(*) from WA_call_detail_measure)\nWHERE ETL_info_table.table_id = 13";
whetherReject_tMysqlRow_1 = false;
globalMap.put("tMysqlRow_1_QUERY",query_tMysqlRow_1);
try {
		stmt_tMysqlRow_1.execute(query_tMysqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMysqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tMysqlRow_1++;
		if(commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {
			
			conn_tMysqlRow_1.commit();
			
			commitCounter_tMysqlRow_1=0;
		}
		

 


	tos_count_tMysqlRow_1++;

/**
 * [tMysqlRow_1 main ] stop
 */
	
	/**
	 * [tMysqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

 



/**
 * [tMysqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

 



/**
 * [tMysqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

	
        stmt_tMysqlRow_1.close();
        resourceMap.remove("stmt_tMysqlRow_1");
    resourceMap.put("statementClosed_tMysqlRow_1", true);
		if(commitEvery_tMysqlRow_1>commitCounter_tMysqlRow_1){

			
			conn_tMysqlRow_1.commit();
			
	
			commitCounter_tMysqlRow_1=0;
	
		}
			conn_tMysqlRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tMysqlRow_1", true);
 

ok_Hash.put("tMysqlRow_1", true);
end_Hash.put("tMysqlRow_1", System.currentTimeMillis());




/**
 * [tMysqlRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

try {
    if (resourceMap.get("statementClosed_tMysqlRow_1") == null) {
            java.sql.Statement stmtToClose_tMysqlRow_1 = null;
            if ((stmtToClose_tMysqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tMysqlRow_1")) != null) {
                stmtToClose_tMysqlRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tMysqlRow_1") == null){
            java.sql.Connection ctn_tMysqlRow_1 = null;
            if((ctn_tMysqlRow_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlRow_1")) != null){
                try {
                    ctn_tMysqlRow_1.close();
                } catch (java.sql.SQLException sqlEx_tMysqlRow_1) {
                    String errorMessage_tMysqlRow_1 = "failed to close the connection in tMysqlRow_1 :" + sqlEx_tMysqlRow_1.getMessage();
                    System.err.println(errorMessage_tMysqlRow_1);
                }
            }
        }
    }
 



/**
 * [tMysqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final WA_call_details WA_call_detailsClass = new WA_call_details();

        int exitCode = WA_call_detailsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = WA_call_details.class.getClassLoader().getResourceAsStream("wash_odf_updated/wa_call_details_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = WA_call_details.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("reporting_db_Port", "id_String");
                            context.reporting_db_Port=(String) context.getProperty("reporting_db_Port");
                        context.setContextType("reporting_db_Database", "id_String");
                            context.reporting_db_Database=(String) context.getProperty("reporting_db_Database");
                        context.setContextType("reporting_db_Password", "id_Password");
                            String pwd_reporting_db_Password_value = context.getProperty("reporting_db_Password");
                            context.reporting_db_Password = null;
                            if(pwd_reporting_db_Password_value!=null) {
                                if(context_param.containsKey("reporting_db_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.reporting_db_Password = pwd_reporting_db_Password_value;
                                } else if (!pwd_reporting_db_Password_value.isEmpty()) {
                                    try {
                                        context.reporting_db_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_reporting_db_Password_value);
                                        context.put("reporting_db_Password",context.reporting_db_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("reporting_db_Login", "id_String");
                            context.reporting_db_Login=(String) context.getProperty("reporting_db_Login");
                        context.setContextType("reporting_db_Server", "id_String");
                            context.reporting_db_Server=(String) context.getProperty("reporting_db_Server");
                        context.setContextType("reporting_db_AdditionalParams", "id_String");
                            context.reporting_db_AdditionalParams=(String) context.getProperty("reporting_db_AdditionalParams");
                        context.setContextType("motech_db_Database", "id_String");
                            context.motech_db_Database=(String) context.getProperty("motech_db_Database");
                        context.setContextType("motech_db_Login", "id_String");
                            context.motech_db_Login=(String) context.getProperty("motech_db_Login");
                        context.setContextType("motech_db_AdditionalParams", "id_String");
                            context.motech_db_AdditionalParams=(String) context.getProperty("motech_db_AdditionalParams");
                        context.setContextType("motech_db_Password", "id_Password");
                            String pwd_motech_db_Password_value = context.getProperty("motech_db_Password");
                            context.motech_db_Password = null;
                            if(pwd_motech_db_Password_value!=null) {
                                if(context_param.containsKey("motech_db_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.motech_db_Password = pwd_motech_db_Password_value;
                                } else if (!pwd_motech_db_Password_value.isEmpty()) {
                                    try {
                                        context.motech_db_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_motech_db_Password_value);
                                        context.put("motech_db_Password",context.motech_db_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("motech_db_Server", "id_String");
                            context.motech_db_Server=(String) context.getProperty("motech_db_Server");
                        context.setContextType("motech_db_Port", "id_String");
                            context.motech_db_Port=(String) context.getProperty("motech_db_Port");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("reporting_db_Port")) {
                context.reporting_db_Port = (String) parentContextMap.get("reporting_db_Port");
            }if (parentContextMap.containsKey("reporting_db_Database")) {
                context.reporting_db_Database = (String) parentContextMap.get("reporting_db_Database");
            }if (parentContextMap.containsKey("reporting_db_Password")) {
                context.reporting_db_Password = (java.lang.String) parentContextMap.get("reporting_db_Password");
            }if (parentContextMap.containsKey("reporting_db_Login")) {
                context.reporting_db_Login = (String) parentContextMap.get("reporting_db_Login");
            }if (parentContextMap.containsKey("reporting_db_Server")) {
                context.reporting_db_Server = (String) parentContextMap.get("reporting_db_Server");
            }if (parentContextMap.containsKey("reporting_db_AdditionalParams")) {
                context.reporting_db_AdditionalParams = (String) parentContextMap.get("reporting_db_AdditionalParams");
            }if (parentContextMap.containsKey("motech_db_Database")) {
                context.motech_db_Database = (String) parentContextMap.get("motech_db_Database");
            }if (parentContextMap.containsKey("motech_db_Login")) {
                context.motech_db_Login = (String) parentContextMap.get("motech_db_Login");
            }if (parentContextMap.containsKey("motech_db_AdditionalParams")) {
                context.motech_db_AdditionalParams = (String) parentContextMap.get("motech_db_AdditionalParams");
            }if (parentContextMap.containsKey("motech_db_Password")) {
                context.motech_db_Password = (java.lang.String) parentContextMap.get("motech_db_Password");
            }if (parentContextMap.containsKey("motech_db_Server")) {
                context.motech_db_Server = (String) parentContextMap.get("motech_db_Server");
            }if (parentContextMap.containsKey("motech_db_Port")) {
                context.motech_db_Port = (String) parentContextMap.get("motech_db_Port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("reporting_db_Password");
			parametersToEncrypt.add("motech_db_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : WA_call_details");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     112019 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 December, 2019 1:25:08 PM IST
 ************************************************************************************************/