// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package wash_odf_updated.wa_course_completion_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: WA_Course_Completion Purpose: WA_Course_Completion<br>
 * Description: WA_Course_Completion <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class WA_Course_Completion implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(reporting_db_Port != null){
				
					this.setProperty("reporting_db_Port", reporting_db_Port.toString());
				
			}
			
			if(reporting_db_Database != null){
				
					this.setProperty("reporting_db_Database", reporting_db_Database.toString());
				
			}
			
			if(reporting_db_Password != null){
				
					this.setProperty("reporting_db_Password", reporting_db_Password.toString());
				
			}
			
			if(reporting_db_AdditionalParams != null){
				
					this.setProperty("reporting_db_AdditionalParams", reporting_db_AdditionalParams.toString());
				
			}
			
			if(reporting_db_Login != null){
				
					this.setProperty("reporting_db_Login", reporting_db_Login.toString());
				
			}
			
			if(reporting_db_Server != null){
				
					this.setProperty("reporting_db_Server", reporting_db_Server.toString());
				
			}
			
			if(motech_db_Port != null){
				
					this.setProperty("motech_db_Port", motech_db_Port.toString());
				
			}
			
			if(motech_db_Login != null){
				
					this.setProperty("motech_db_Login", motech_db_Login.toString());
				
			}
			
			if(motech_db_Password != null){
				
					this.setProperty("motech_db_Password", motech_db_Password.toString());
				
			}
			
			if(motech_db_Database != null){
				
					this.setProperty("motech_db_Database", motech_db_Database.toString());
				
			}
			
			if(motech_db_AdditionalParams != null){
				
					this.setProperty("motech_db_AdditionalParams", motech_db_AdditionalParams.toString());
				
			}
			
			if(motech_db_Server != null){
				
					this.setProperty("motech_db_Server", motech_db_Server.toString());
				
			}
			
		}

public String reporting_db_Port;
public String getReporting_db_Port(){
	return this.reporting_db_Port;
}
public String reporting_db_Database;
public String getReporting_db_Database(){
	return this.reporting_db_Database;
}
public java.lang.String reporting_db_Password;
public java.lang.String getReporting_db_Password(){
	return this.reporting_db_Password;
}
public String reporting_db_AdditionalParams;
public String getReporting_db_AdditionalParams(){
	return this.reporting_db_AdditionalParams;
}
public String reporting_db_Login;
public String getReporting_db_Login(){
	return this.reporting_db_Login;
}
public String reporting_db_Server;
public String getReporting_db_Server(){
	return this.reporting_db_Server;
}
public String motech_db_Port;
public String getMotech_db_Port(){
	return this.motech_db_Port;
}
public String motech_db_Login;
public String getMotech_db_Login(){
	return this.motech_db_Login;
}
public java.lang.String motech_db_Password;
public java.lang.String getMotech_db_Password(){
	return this.motech_db_Password;
}
public String motech_db_Database;
public String getMotech_db_Database(){
	return this.motech_db_Database;
}
public String motech_db_AdditionalParams;
public String getMotech_db_AdditionalParams(){
	return this.motech_db_AdditionalParams;
}
public String motech_db_Server;
public String getMotech_db_Server(){
	return this.motech_db_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "WA_Course_Completion";
	private final String projectName = "WASH_ODF_UPDATED";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				WA_Course_Completion.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(WA_Course_Completion.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row1.key != null){
                          tmp_key_tContextLoad_1 = row1.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row1.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row1.key != null) {
                    key_tContextLoad_1 =
                        row1.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row1.value != null) {
                    value_tContextLoad_1 =
                        row1.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ((key_tContextLoad_1 != null) && ("reporting_db_Password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ((key_tContextLoad_1 != null) && ("motech_db_Password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "reporting_db_Port".equals(key_tContextLoad_1))
        {
           context.reporting_db_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Database".equals(key_tContextLoad_1))
        {
           context.reporting_db_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Password".equals(key_tContextLoad_1))
        {
           context.reporting_db_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.reporting_db_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Login".equals(key_tContextLoad_1))
        {
           context.reporting_db_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "reporting_db_Server".equals(key_tContextLoad_1))
        {
           context.reporting_db_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Port".equals(key_tContextLoad_1))
        {
           context.motech_db_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Login".equals(key_tContextLoad_1))
        {
           context.motech_db_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Password".equals(key_tContextLoad_1))
        {
           context.motech_db_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Database".equals(key_tContextLoad_1))
        {
           context.motech_db_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.motech_db_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "motech_db_Server".equals(key_tContextLoad_1))
        {
           context.motech_db_Server=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("/home/beehyv/Downloads/TOS_DI-20190424_1503-V7.2.1M5/workspace/db_connection.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("reporting_db_Password");
		
		parametersToEncrypt_tContextLoad_1.add("motech_db_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMysqlInput_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tMysqlInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];

	
			    public String last_etl_time;

				public String getLast_etl_time () {
					return this.last_etl_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion) {

        	try {

        		int length = 0;
		
					this.last_etl_time = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.last_etl_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("last_etl_time="+last_etl_time);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_1 = java.lang.Class.forName(driverClass_tMysqlInput_1);
					String dbUser_tMysqlInput_1 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[ZoQHerfurrCwayi/E9MTkKeQQD5UAkYsfzx3sjLEKeY0e8t4]");
					
					String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=15";
			

            	globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);
		    java.sql.ResultSet rs_tMysqlInput_1 = null;

		    try {
		    	rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    	int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row2.last_etl_time = null;
							} else {
	                         		
        	row2.last_etl_time = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */
	
	/**
	 * [tMysqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

    //Code generated according to input schema and output schema

globalMap.put("lastEtlTime",row2.last_etl_time!=null ?row2.last_etl_time:"");

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if (rs_tMysqlInput_1 != null) {
		rs_tMysqlInput_1.close();
	}
	if (stmt_tMysqlInput_1 != null) {
		stmt_tMysqlInput_1.close();
	}
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Ma_course_completion_dataStruct implements routines.system.IPersistableRow<Ma_course_completion_dataStruct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Long swc_id;

				public Long getSwc_id () {
					return this.swc_id;
				}
				
			    public Integer score;

				public Integer getScore () {
					return this.score;
				}
				
			    public Boolean has_passed;

				public Boolean getHas_passed () {
					return this.has_passed;
				}
				
			    public String chapter_wise_score;

				public String getChapter_wise_score () {
					return this.chapter_wise_score;
				}
				
			    public String last_delivery_status;

				public String getLast_delivery_status () {
					return this.last_delivery_status;
				}
				
			    public Boolean sent_notification;

				public Boolean getSent_notification () {
					return this.sent_notification;
				}
				
			    public String creation_date;

				public String getCreation_date () {
					return this.creation_date;
				}
				
			    public String last_modified;

				public String getLast_modified () {
					return this.last_modified;
				}
				
			    public int courseId;

				public int getCourseId () {
					return this.courseId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Ma_course_completion_dataStruct other = (Ma_course_completion_dataStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Ma_course_completion_dataStruct other) {

		other.id = this.id;
	            other.swc_id = this.swc_id;
	            other.score = this.score;
	            other.has_passed = this.has_passed;
	            other.chapter_wise_score = this.chapter_wise_score;
	            other.last_delivery_status = this.last_delivery_status;
	            other.sent_notification = this.sent_notification;
	            other.creation_date = this.creation_date;
	            other.last_modified = this.last_modified;
	            other.courseId = this.courseId;
	            
	}

	public void copyKeysDataTo(Ma_course_completion_dataStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.swc_id = null;
           				} else {
           			    	this.swc_id = dis.readLong();
           				}
					
						this.score = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_passed = null;
           				} else {
           			    	this.has_passed = dis.readBoolean();
           				}
					
					this.chapter_wise_score = readString(dis);
					
					this.last_delivery_status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sent_notification = null;
           				} else {
           			    	this.sent_notification = dis.readBoolean();
           				}
					
					this.creation_date = readString(dis);
					
					this.last_modified = readString(dis);
					
			        this.courseId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Long
				
						if(this.swc_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.swc_id);
		            	}
					
					// Integer
				
						writeInteger(this.score,dos);
					
					// Boolean
				
						if(this.has_passed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_passed);
		            	}
					
					// String
				
						writeString(this.chapter_wise_score,dos);
					
					// String
				
						writeString(this.last_delivery_status,dos);
					
					// Boolean
				
						if(this.sent_notification == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sent_notification);
		            	}
					
					// String
				
						writeString(this.creation_date,dos);
					
					// String
				
						writeString(this.last_modified,dos);
					
					// int
				
		            	dos.writeInt(this.courseId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",swc_id="+String.valueOf(swc_id));
		sb.append(",score="+String.valueOf(score));
		sb.append(",has_passed="+String.valueOf(has_passed));
		sb.append(",chapter_wise_score="+chapter_wise_score);
		sb.append(",last_delivery_status="+last_delivery_status);
		sb.append(",sent_notification="+String.valueOf(sent_notification));
		sb.append(",creation_date="+creation_date);
		sb.append(",last_modified="+last_modified);
		sb.append(",courseId="+String.valueOf(courseId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Ma_course_completion_dataStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];
    static byte[] commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[0];

	
			    public long swc_id;

				public long getSwc_id () {
					return this.swc_id;
				}
				
			    public Integer marks;

				public Integer getMarks () {
					return this.marks;
				}
				
			    public Boolean passed;

				public Boolean getPassed () {
					return this.passed;
				}
				
			    public String chapterWiseScores;

				public String getChapterWiseScores () {
					return this.chapterWiseScores;
				}
				
			    public String lastDeliveryStatus;

				public String getLastDeliveryStatus () {
					return this.lastDeliveryStatus;
				}
				
			    public Boolean sentNotification;

				public Boolean getSentNotification () {
					return this.sentNotification;
				}
				
			    public String creationDate;

				public String getCreationDate () {
					return this.creationDate;
				}
				
			    public String last_modified;

				public String getLast_modified () {
					return this.last_modified;
				}
				
			    public int courseId;

				public int getCourseId () {
					return this.courseId;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length) {
				if(length < 1024 && commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion.length == 0) {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[1024];
				} else {
   					commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length);
			strReturn = new String(commonByteArray_WASH_ODF_UPDATED_WA_Course_Completion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_WASH_ODF_UPDATED_WA_Course_Completion) {

        	try {

        		int length = 0;
		
			        this.swc_id = dis.readLong();
					
						this.marks = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.passed = null;
           				} else {
           			    	this.passed = dis.readBoolean();
           				}
					
					this.chapterWiseScores = readString(dis);
					
					this.lastDeliveryStatus = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sentNotification = null;
           				} else {
           			    	this.sentNotification = dis.readBoolean();
           				}
					
					this.creationDate = readString(dis);
					
					this.last_modified = readString(dis);
					
			        this.courseId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.swc_id);
					
					// Integer
				
						writeInteger(this.marks,dos);
					
					// Boolean
				
						if(this.passed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.passed);
		            	}
					
					// String
				
						writeString(this.chapterWiseScores,dos);
					
					// String
				
						writeString(this.lastDeliveryStatus,dos);
					
					// Boolean
				
						if(this.sentNotification == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sentNotification);
		            	}
					
					// String
				
						writeString(this.creationDate,dos);
					
					// String
				
						writeString(this.last_modified,dos);
					
					// int
				
		            	dos.writeInt(this.courseId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("swc_id="+String.valueOf(swc_id));
		sb.append(",marks="+String.valueOf(marks));
		sb.append(",passed="+String.valueOf(passed));
		sb.append(",chapterWiseScores="+chapterWiseScores);
		sb.append(",lastDeliveryStatus="+lastDeliveryStatus);
		sb.append(",sentNotification="+String.valueOf(sentNotification));
		sb.append(",creationDate="+creationDate);
		sb.append(",last_modified="+last_modified);
		sb.append(",courseId="+String.valueOf(courseId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
Ma_course_completion_dataStruct Ma_course_completion_data = new Ma_course_completion_dataStruct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Ma_course_completion_data");
					}
				
		int tos_count_tMysqlOutput_1 = 0;
		






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "WA_course_completion";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = context.reporting_db_AdditionalParams;
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "com.mysql.jdbc.Driver";
		
		String dbUser_tMysqlOutput_1 = "root";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[bFnaF0Ny00XtU1ir0Y/MhOIKsvLz9zRW75lU3g+Uc5PLbUjQ]");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1.getMetaData();
                                boolean whetherExist_tMysqlOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1.getTables("WAReporting", null, null, new String[]{"TABLE"})) {
                                    while(rsTable_tMysqlOutput_1.next()) {
                                        String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1.getString("TABLE_NAME");
                                        if(table_tMysqlOutput_1.equalsIgnoreCase("WA_course_completion")) {
                                            whetherExist_tMysqlOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tMysqlOutput_1) {
                                    try (java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement()) {
                                        stmtCreate_tMysqlOutput_1.execute("CREATE TABLE `" + tableName_tMysqlOutput_1 + "`(`id` INT(0)  ,`swc_id` BIGINT(0)  ,`score` INT(0)  ,`has_passed` BIT(1)  ,`chapter_wise_score` VARCHAR(255)  ,`last_delivery_status` VARCHAR(0)  ,`sent_notification` BIT(1)  ,`creation_date` VARCHAR(0)  ,`last_modified` VARCHAR(0)  ,`courseId` INT(0)   not null ,primary key(`id`))");
                                    }
                                }

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "WA_course_completion" + "` (`id`,`swc_id`,`score`,`has_passed`,`chapter_wise_score`,`last_delivery_status`,`sent_notification`,`creation_date`,`last_modified`,`courseId`) VALUES (?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);
		        resourceMap.put("pstmt_tMysqlOutput_1", pstmt_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Ma_course_completion_dataStruct Ma_course_completion_data_tmp = new Ma_course_completion_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "com.mysql.jdbc.Driver";
			    java.lang.Class jdbcclazz_tMysqlInput_2 = java.lang.Class.forName(driverClass_tMysqlInput_2);
					String dbUser_tMysqlInput_2 = "root";
					
					
					 
	final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[NCMYsxdg5dnRWeQtUS/hCLRjIf5JUKlN6BL+gZcfaNzmUGce]");
					
					String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "motech_data_services" + "?" + context.motech_db_AdditionalParams;
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "select swcId as 'swc_id' ,score as 'marks',\npassed, chapterWiseScores, lastDeliveryStatus, sentNotification, creationDa"
+"te,\nmodificationDate as 'last_modified', courseId from wash_course_completion_records\nwhere modificationDate >'"+(String)globalMap.get("lastEtlTime")+"'";
			

            	globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);
		    java.sql.ResultSet rs_tMysqlInput_2 = null;

		    try {
		    	rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    	int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								row3.swc_id = 0;
							} else {
		                          
            row3.swc_id = rs_tMysqlInput_2.getLong(1);
            if(rs_tMysqlInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 2) {
								row3.marks = null;
							} else {
		                          
            row3.marks = rs_tMysqlInput_2.getInt(2);
            if(rs_tMysqlInput_2.wasNull()){
                    row3.marks = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 3) {
								row3.passed = null;
							} else {
	                         		
            row3.passed = rs_tMysqlInput_2.getBoolean(3);
            if(rs_tMysqlInput_2.wasNull()){
                    row3.passed = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 4) {
								row3.chapterWiseScores = null;
							} else {
	                         		
        	row3.chapterWiseScores = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 5) {
								row3.lastDeliveryStatus = null;
							} else {
	                         		
        	row3.lastDeliveryStatus = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 6) {
								row3.sentNotification = null;
							} else {
	                         		
            row3.sentNotification = rs_tMysqlInput_2.getBoolean(6);
            if(rs_tMysqlInput_2.wasNull()){
                    row3.sentNotification = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 7) {
								row3.creationDate = null;
							} else {
	                         		
        	row3.creationDate = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 8) {
								row3.last_modified = null;
							} else {
	                         		
        	row3.last_modified = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 8, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 9) {
								row3.courseId = 0;
							} else {
		                          
            row3.courseId = rs_tMysqlInput_2.getInt(9);
            if(rs_tMysqlInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */
	
	/**
	 * [tMysqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Ma_course_completion_data = null;


// # Output table : 'Ma_course_completion_data'
Ma_course_completion_data_tmp.id = null;
Ma_course_completion_data_tmp.swc_id = row3.swc_id ;
Ma_course_completion_data_tmp.score = row3.marks ;
Ma_course_completion_data_tmp.has_passed = row3.passed ;
Ma_course_completion_data_tmp.chapter_wise_score = row3.chapterWiseScores ;
Ma_course_completion_data_tmp.last_delivery_status = row3.lastDeliveryStatus ;
Ma_course_completion_data_tmp.sent_notification = row3.sentNotification ;
Ma_course_completion_data_tmp.creation_date = row3.creationDate ;
Ma_course_completion_data_tmp.last_modified = row3.last_modified ;
Ma_course_completion_data_tmp.courseId = row3.courseId;
Ma_course_completion_data = Ma_course_completion_data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Ma_course_completion_data"
if(Ma_course_completion_data != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Ma_course_completion_data");
					}
					



        whetherReject_tMysqlOutput_1 = false;
                            if(Ma_course_completion_data.id == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(1, Ma_course_completion_data.id);
}

                            if(Ma_course_completion_data.swc_id == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setLong(2, Ma_course_completion_data.swc_id);
}

                            if(Ma_course_completion_data.score == null) {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(3, Ma_course_completion_data.score);
}

                            if(Ma_course_completion_data.has_passed == null) {
pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.BOOLEAN);
} else {pstmt_tMysqlOutput_1.setBoolean(4, Ma_course_completion_data.has_passed);
}

                            if(Ma_course_completion_data.chapter_wise_score == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, Ma_course_completion_data.chapter_wise_score);
}

                            if(Ma_course_completion_data.last_delivery_status == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(6, Ma_course_completion_data.last_delivery_status);
}

                            if(Ma_course_completion_data.sent_notification == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.BOOLEAN);
} else {pstmt_tMysqlOutput_1.setBoolean(7, Ma_course_completion_data.sent_notification);
}

                            if(Ma_course_completion_data.creation_date == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(8, Ma_course_completion_data.creation_date);
}

                            if(Ma_course_completion_data.last_modified == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(9, Ma_course_completion_data.last_modified);
}

                            pstmt_tMysqlOutput_1.setInt(10, Ma_course_completion_data.courseId);

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
            if(!whetherReject_tMysqlOutput_1) {
            }
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

 



/**
 * [tMysqlOutput_1 process_data_end ] stop
 */

} // End of branch "Ma_course_completion_data"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMysqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if (rs_tMysqlInput_2 != null) {
		rs_tMysqlInput_2.close();
	}
	if (stmt_tMysqlInput_2 != null) {
		stmt_tMysqlInput_2.close();
	}
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
				resourceMap.remove("pstmt_tMysqlOutput_1");
			
        }
    resourceMap.put("statementClosed_tMysqlOutput_1", true);
    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Ma_course_completion_data");
			  	}
			  	
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMysqlRow_1Process(globalMap);



/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tMysqlOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tMysqlOutput_1 = null;
                if ((pstmtToClose_tMysqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tMysqlOutput_1")) != null) {
                    pstmtToClose_tMysqlOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tMysqlOutput_1") == null){
            java.sql.Connection ctn_tMysqlOutput_1 = null;
            if((ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1")) != null){
                try {
                    ctn_tMysqlOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
                    String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
                    System.err.println(errorMessage_tMysqlOutput_1);
                }
            }
        }
    }
 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlRow_1", false);
		start_Hash.put("tMysqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlRow_1";

	
		int tos_count_tMysqlRow_1 = 0;
		

	java.sql.Connection conn_tMysqlRow_1 = null;
	String query_tMysqlRow_1 = "";
	boolean whetherReject_tMysqlRow_1 = false;
			String driverClass_tMysqlRow_1 = "com.mysql.jdbc.Driver";
		    java.lang.Class jdbcclazz_tMysqlRow_1 = java.lang.Class.forName(driverClass_tMysqlRow_1);
		
				String url_tMysqlRow_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "WAReporting" + "?" + context.reporting_db_AdditionalParams;
					String dbUser_tMysqlRow_1 = "root";
	        
            		
            		
            		 
	final String decryptedPassword_tMysqlRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[+G+/PqQN/nAOOJXaPcwIRd3EwYbvjs4UYpE5ormq38+NYSyr]");
        		   	
        	        String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;
	        
					
			conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(url_tMysqlRow_1,dbUser_tMysqlRow_1,dbPwd_tMysqlRow_1);
		
    resourceMap.put("conn_tMysqlRow_1", conn_tMysqlRow_1);
					if(conn_tMysqlRow_1.getAutoCommit()) {
						
				conn_tMysqlRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tMysqlRow_1 = 10000;
					int commitCounter_tMysqlRow_1 = 0;
				
        java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1.createStatement();
        resourceMap.put("stmt_tMysqlRow_1", stmt_tMysqlRow_1);

 



/**
 * [tMysqlRow_1 begin ] stop
 */
	
	/**
	 * [tMysqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

query_tMysqlRow_1 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT MAX(last_modified)FROM \n WA_course_completion),\nETL_in"
+"fo_table.record_count=(select count(*) from WA_course_completion)\nWHERE ETL_info_table.table_id = 15";
whetherReject_tMysqlRow_1 = false;
globalMap.put("tMysqlRow_1_QUERY",query_tMysqlRow_1);
try {
		stmt_tMysqlRow_1.execute(query_tMysqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMysqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tMysqlRow_1++;
		if(commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {
			
			conn_tMysqlRow_1.commit();
			
			commitCounter_tMysqlRow_1=0;
		}
		

 


	tos_count_tMysqlRow_1++;

/**
 * [tMysqlRow_1 main ] stop
 */
	
	/**
	 * [tMysqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

 



/**
 * [tMysqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tMysqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

 



/**
 * [tMysqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tMysqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

	
        stmt_tMysqlRow_1.close();
        resourceMap.remove("stmt_tMysqlRow_1");
    resourceMap.put("statementClosed_tMysqlRow_1", true);
		if(commitEvery_tMysqlRow_1>commitCounter_tMysqlRow_1){

			
			conn_tMysqlRow_1.commit();
			
	
			commitCounter_tMysqlRow_1=0;
	
		}
			conn_tMysqlRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tMysqlRow_1", true);
 

ok_Hash.put("tMysqlRow_1", true);
end_Hash.put("tMysqlRow_1", System.currentTimeMillis());




/**
 * [tMysqlRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlRow_1";

	

try {
    if (resourceMap.get("statementClosed_tMysqlRow_1") == null) {
            java.sql.Statement stmtToClose_tMysqlRow_1 = null;
            if ((stmtToClose_tMysqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tMysqlRow_1")) != null) {
                stmtToClose_tMysqlRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tMysqlRow_1") == null){
            java.sql.Connection ctn_tMysqlRow_1 = null;
            if((ctn_tMysqlRow_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlRow_1")) != null){
                try {
                    ctn_tMysqlRow_1.close();
                } catch (java.sql.SQLException sqlEx_tMysqlRow_1) {
                    String errorMessage_tMysqlRow_1 = "failed to close the connection in tMysqlRow_1 :" + sqlEx_tMysqlRow_1.getMessage();
                    System.err.println(errorMessage_tMysqlRow_1);
                }
            }
        }
    }
 



/**
 * [tMysqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final WA_Course_Completion WA_Course_CompletionClass = new WA_Course_Completion();

        int exitCode = WA_Course_CompletionClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = WA_Course_Completion.class.getClassLoader().getResourceAsStream("wash_odf_updated/wa_course_completion_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = WA_Course_Completion.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("reporting_db_Port", "id_String");
                            context.reporting_db_Port=(String) context.getProperty("reporting_db_Port");
                        context.setContextType("reporting_db_Database", "id_String");
                            context.reporting_db_Database=(String) context.getProperty("reporting_db_Database");
                        context.setContextType("reporting_db_Password", "id_Password");
                            String pwd_reporting_db_Password_value = context.getProperty("reporting_db_Password");
                            context.reporting_db_Password = null;
                            if(pwd_reporting_db_Password_value!=null) {
                                if(context_param.containsKey("reporting_db_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.reporting_db_Password = pwd_reporting_db_Password_value;
                                } else if (!pwd_reporting_db_Password_value.isEmpty()) {
                                    try {
                                        context.reporting_db_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_reporting_db_Password_value);
                                        context.put("reporting_db_Password",context.reporting_db_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("reporting_db_AdditionalParams", "id_String");
                            context.reporting_db_AdditionalParams=(String) context.getProperty("reporting_db_AdditionalParams");
                        context.setContextType("reporting_db_Login", "id_String");
                            context.reporting_db_Login=(String) context.getProperty("reporting_db_Login");
                        context.setContextType("reporting_db_Server", "id_String");
                            context.reporting_db_Server=(String) context.getProperty("reporting_db_Server");
                        context.setContextType("motech_db_Port", "id_String");
                            context.motech_db_Port=(String) context.getProperty("motech_db_Port");
                        context.setContextType("motech_db_Login", "id_String");
                            context.motech_db_Login=(String) context.getProperty("motech_db_Login");
                        context.setContextType("motech_db_Password", "id_Password");
                            String pwd_motech_db_Password_value = context.getProperty("motech_db_Password");
                            context.motech_db_Password = null;
                            if(pwd_motech_db_Password_value!=null) {
                                if(context_param.containsKey("motech_db_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.motech_db_Password = pwd_motech_db_Password_value;
                                } else if (!pwd_motech_db_Password_value.isEmpty()) {
                                    try {
                                        context.motech_db_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_motech_db_Password_value);
                                        context.put("motech_db_Password",context.motech_db_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("motech_db_Database", "id_String");
                            context.motech_db_Database=(String) context.getProperty("motech_db_Database");
                        context.setContextType("motech_db_AdditionalParams", "id_String");
                            context.motech_db_AdditionalParams=(String) context.getProperty("motech_db_AdditionalParams");
                        context.setContextType("motech_db_Server", "id_String");
                            context.motech_db_Server=(String) context.getProperty("motech_db_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("reporting_db_Port")) {
                context.reporting_db_Port = (String) parentContextMap.get("reporting_db_Port");
            }if (parentContextMap.containsKey("reporting_db_Database")) {
                context.reporting_db_Database = (String) parentContextMap.get("reporting_db_Database");
            }if (parentContextMap.containsKey("reporting_db_Password")) {
                context.reporting_db_Password = (java.lang.String) parentContextMap.get("reporting_db_Password");
            }if (parentContextMap.containsKey("reporting_db_AdditionalParams")) {
                context.reporting_db_AdditionalParams = (String) parentContextMap.get("reporting_db_AdditionalParams");
            }if (parentContextMap.containsKey("reporting_db_Login")) {
                context.reporting_db_Login = (String) parentContextMap.get("reporting_db_Login");
            }if (parentContextMap.containsKey("reporting_db_Server")) {
                context.reporting_db_Server = (String) parentContextMap.get("reporting_db_Server");
            }if (parentContextMap.containsKey("motech_db_Port")) {
                context.motech_db_Port = (String) parentContextMap.get("motech_db_Port");
            }if (parentContextMap.containsKey("motech_db_Login")) {
                context.motech_db_Login = (String) parentContextMap.get("motech_db_Login");
            }if (parentContextMap.containsKey("motech_db_Password")) {
                context.motech_db_Password = (java.lang.String) parentContextMap.get("motech_db_Password");
            }if (parentContextMap.containsKey("motech_db_Database")) {
                context.motech_db_Database = (String) parentContextMap.get("motech_db_Database");
            }if (parentContextMap.containsKey("motech_db_AdditionalParams")) {
                context.motech_db_AdditionalParams = (String) parentContextMap.get("motech_db_AdditionalParams");
            }if (parentContextMap.containsKey("motech_db_Server")) {
                context.motech_db_Server = (String) parentContextMap.get("motech_db_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("reporting_db_Password");
			parametersToEncrypt.add("motech_db_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : WA_Course_Completion");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     108550 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 December, 2019 1:25:09 PM IST
 ************************************************************************************************/